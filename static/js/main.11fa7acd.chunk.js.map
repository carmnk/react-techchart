{"version":3,"sources":["Chart/Types/CChartStateTypes.ts","Chart/CChartDataSchema.ts","Chart/Types/CChartTypes.ts","Chart/CChartLabel.tsx","Chart/CChartCrosshair.tsx","Chart/Charts/CCandleChart.tsx","Chart/utils.ts","Chart/Charts/CLineChart.tsx","Chart/Charts/CBarChart.tsx","Chart/Time/CChartDateTime.ts","Chart/Time/CChartPeriod.ts","Chart/CChartModel.ts","Chart/Time/CChartDateStat.ts","Chart/ChartState/CChartStateReducer.ts","Chart/ChartState/CChartStateMethods.ts","Chart/ChartState/CChartStateXaxis.ts","Chart/ChartState/CChartStateYaxis.ts","Chart/ChartState/CChartStateInteractions.ts","Chart/ChartState/CChartState.ts","Chart/Tools/CTrendline.tsx","Chart/Tools/CVLine.tsx","Chart/Tools/CHLine.tsx","Chart/MuiTheme.tsx","Chart/Menu2/ChartMenuHome.tsx","Chart/CIndicator.ts","Chart/CTreeItem.tsx","Chart/Colorpicker.tsx","Chart/Menu2/ChartMenuIndicators.tsx","Chart/Menu2/ChartMenuTools.tsx","Chart/Menu2/ChartMenuSettings.tsx","Chart/Menu2/ChartMenuQuickys.tsx","Chart/CSnackbar.tsx","Chart/Menu2/ChartMenuChart.tsx","Chart/Menu2/ChartMenu.tsx","Chart/CChart.tsx","Site/Site.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["isIndicatorGraph","graph","type","isChartGraph","chartDataSchema","minItems","items","properties","data","nullable","date","open","high","low","close","required","name","isCandleChartDataset","dataset","isLineChartDataset","isVolumeDataset","isIndicatorDataset","CChartLabel","props","decimals","onClick","useTheme","Button","style","textTransform","textAlign","startIcon","path","mdiChartBellCurve","mdiChartLine","size","Typography","prices","map","price","toFixed","join","variant","CChartCrosshair","fullState","containerWidth","containerSize","width","containerHeight","height","widthYAxis","yaxis","xaxis","heightXAxis","heightTickMarkLines","pixYSnap","ySnap","pointer","move","xy","i","subCharts","length","subchart","j","graphs","chartPointer","snapDatasets","subchartIdx","findIndex","val","bottom","top","methods","pixToY","curgraph","indicator","default","Math","round","parseFloat","pow","toString","Fragment","x","y","points","xToPix","pixToX","stroke","strokeWidth","sceneFunc","context","shape","ctx","_context","yStart","moveTo","lineTo","fillStrokeShape","fill","font","fontSize","fontName","fillStyle","fontColor","textBaseline","fillText","widthTickmarkLines","xUnlimited","xEnd","xStart","dateString","CCandleChart","curData","dxHalfCandle","forEach","valIdx","idx","widthPerTick","floor","beginPath","datasetIdx","xPix","pixXStart","yPixHigh","yToPix","yPixLow","yPixClose","closePath","candleStrokeColor","filter","gainDataset","gainDatasetIdx","yPixOpen","maxWidth","pixXEnd","rect","candleUpColor","candleDownColor","isNullish","undefined","isNaN","getDecimals","split","includesOne","array","res","params","param","includes","colorNames","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","honeydew","hotpink","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hexToRgb","hex","replace","m","r","g","b","result","exec","parseInt","CLineChart","yaxisIdx","graphIdx","indSeriesIdxIn","indSeriesIdx","graphVals","Array","isArray","push","flat","graphValsNN","strokeColor","CBarChart","volume","yPixVol","yPix0","getDateString","period","format","getDateSubValue","getMinutes","getHours","getDate","getISOWeek","getMonth","getYear","getDateObject","minute","hour","day","week","month","year","chartPeriods","minutes","scaleMultiplys","range","hours","days","weeks","months","years","getOptimalPeriod","metaData","noDataPortion","dateStat","chartPeriod","periodsConstIdx","chartPeriodName","nCurrent","curDateStat","Object","assign","nInDateStat","accAmt","keys","key","keyIdx","targetIntervals","opt","optPeriod","optMultiply","multiply","abs","isNewYear","curYearDateStat","thisMonthStat","isNewMonth","curMonthIdx","periodMultiply","isNewIsoWeek","curWeekIdx","daysInMonth","curDays","optWeekIdx","optimalDaysTarget","weekInMonth","isNewPeriod","optPeriodName","curYearStat","e","curMonthStat","curMonthStatIdx","indexOf","curWeekStat","curWeekStatIdx","curDayStat","curDayStatIdx","curDayIdx","isNewDay","getGraphMetaData","dataSeries","nData","getDeltaT","dataPoint1","dataPoint0","deltaPeriods","dT","amt","curWeek","curYear","curWeekDays","weekDays","deltaPeriod","iDataWeek","iyear","weekDaysFiltered","amtDays","console","log","weekDayIdx","occ","datasetDecimals","curDataset","maxDecimals","max","deltaTs","item","amts","maxIdx","reduce","arr","maxDaysPerWeekOccurences","totalOcc","maxDaysPerWeekOccIdx","maxDaysPerWeek","maxDaysPerWeekGuessConfidence","isDesc","dataPeriod","dataPeriodKeys","chartPeriodKey","chartPeriodRange","getChartPeriod","periodGuessConfidence","tradingDaysPerWeek","tradingDaysPerWeekGuessConfidence","isDescending","createSubChartModel","chartData","chartName","createYaxisModel","newGraph","createIndicatorGraphModel","createChartGraphModel","tools","translatedY","optIntervalY","heightPerPt","drawTicks","graphProps","reverse","stat","makeSingleDayStat","makeSingleHourStat","makeSingleWeekStat","makeSingleMonthStat","makeSingleYearStat","makeSingleMinuteStat","incrementPeriodAccAmt","addPeriod","curStatIdx","addOrIncrementPeriod","periodStat","periodStatFilter","filteredStatIdx","nextLowerPeriod","getDateStat","meta","yMax","yMaxExact","yMin","yMinExact","datasets","first","last","indicatorData","indicatorFn","decimalsData","graphColorsLight","getGraphColors","colorArr","isSetCandleChartUpColor","action","task","isSetCandleChartDownColor","isSetCandleChartStrokeColor","isSetToolStrokeColorAction","isSetToolAnchorColor","chartStateReducer","current","isAddSubchartAction","chartSeries","reset","minMainHeight","heightNewSubchart","min","totalTranslatedX","scaledWidthPerTick","maxHeight","subChart","subChartIdx","isRemoveSubchartAction","dHeight","dHeightEach","dHeightRest","slice","subchartSliced","subchartSlicedIdx","isRemoveGraphAction","isClearChartAction","mode","isAddGraphAction","isDrawAction","draw","isDrawing","pixXy","isSetBackgroundColorAction","color","backgroundColor","isSetGridStrokeColorAction","grid","isSetAxisFillColorAction","fillColor","isSetAxisStrokeColorAction","isSetAxisTextColorAction","isToggleXaxisGridAction","useGridX","isToggleYaxisGridAction","useGridY","isToggleFullscreenAction","fullscreen","isDarkModeToggleAction","newDarkMode","darkMode","defaultDarkState","defaultState","isSetLineChartStrokeColor","prop","toolIdx","isSetIndicatorParam","paramIdx","indicatorGraph","fn","srcData","isSetHlineYlevelAction","newAnchor","isUpdateInteractionState","newState","getChartMethods","ChartState","Dispatch","addGraph","addSubchart","getSubchart","getYaxis","getGraph","translatedX","pixX","stateTranslatedY","translatedYint","pixY","pureXToPix","translated","purePixToX","pureYToPix","pixYBottom","pixPerPt","purePixToY","snapPixYToPrices","subcharts","snapTolerance","snapTol","snapRes","priceIdx","yPixPrice","sort","a","calculateCurrentGraphs","pixXstart","pixXend","calculatedSubcharts","mainYaxis","yMinExactAllGraphs","yMaxExactAllGraphs","graphM","fixedYScale","intervalsTarget","dec","targetSteps","initIntervalStep","curIntervalStep","optIntervalStep","optimizationFunction","steps","optimizer","factor","curOptimizerRes","GetYOptInterval","yMaxAllGraphs","yMinAllGraphs","ceil","y_bottom","yi","yvalstr","label","getSubchartIdxByVector","getDragActionType","dragInitXy","isEditing","canvasWidth","canvasHeight","init","editToolPath","toolsIdx","singleYaxis","singleYaxisIdx","tool","anchorXy","anchorIdx","getToolsByXy","resizeSubchartIdx","getSubchartIdxByBottom","initBottom","editToolPosition","dragActionType","curPixX","pixXSnap","drag","curPixY","initX","initial","subIdx","yAdjusted","localInitY","newPixX","newPixY","newX","newY","toolsSubIdx","toolsYaxisIdx","resizeSubchart","newBottom","addToolAnchor","drawToolType","dragpixXy","dequal","require","totalScaleX","startNoDataPeriod","endNoDataPeriod","noDataPeriodPortion","optPeriodRes","xAxisTicks","strokeStyle","border","left","isHovering","isMoving","wheel","isWheeling","delta","dragPointerUp","isDragPointerUp","movementInitial","isDragging","xDateString","click","clickedSubchartIdx","useChartState","HtmlElementRef","settings","defaultStateInt","window","matchMedia","matches","initState","maxUpdatesPerSec","initWidthPerTick","viewModeInternal","viewMode","safeYaxis","entries","value","safeXaxis","safeGrid","React","useReducer","PreStateRef","useRef","tmp","scaleInitWidthPerTick","scaleInitTranslatedX","amtLastSubcharts","lastMainChartData","lastUpdate","Date","shallUpdate","userInteractedChartState","useDragOptions","domTarget","transform","useTouch","experimental_preventWindowScrollY","useGesture","onDrag","dragState","deltaX","deltaY","movement","active","onMove","moveState","onHover","hoverState","onWheel","wheelState","onDragEnd","useEffect","position","zIndex","clientWidth","clientHeight","getBoundingClientRect","handleWindowResize","parentElement","addEventListener","removeEventListener","userInteractedSubcharts","addIndicatorDeps","onTimer","PreState","DragEndState","DragState","currentPointer","widthYaxis","widthChart","heightChart","heightXaxis","calcSubcharts","calcXaxis","calcDraw","dHproportionalTmp","newMainSizeTmp","dHeightMain","dHeightSingleSubchart","currentRest","lastBottom","correctRest","tempRest","sign","newTop","dragInit","mainGraph","currentXaxis","initWidthTickX","shallUpdateDrag","clickedChart","clickedXaxis","nDatasets","wheeldY","initWheelMousePos","scaleFn","translatedXonStart","initPixX","initXexact","getInteractiveXaxisState","translatedPixX","nMainData","pixXi","xi","periodToDraw","calculateCurrentXaxis","calcCurrentSubchart","xpointerRes","xIdx","xPointerUnlimited","xPointer","xPointerDateStr","pixXPointer","calculateXPointer","xpointer","xpointerUnlimited","xPointerDateString","getSubchartIdx","snapPriceRes","calculateCurrentPointerDataset","nPoints","xyArr","pixXyIdx","anchorColor","addTool","state","handleTimer","setInterval","clearInterval","CTrendline","subchartTop","subchartBottom","modeInt","pixXyAdjusted","dx","dy","slope","pixYTarget","pixXTarget","pixYSrc","pixXSrc","radius","CVline","CHline","ConditionalMuiThemeProvider","disableTheme","theme","children","ThemeProvider","muiTheme","responsiveFontSizes","createMuiTheme","palette","primary","main","secondary","typography","h1","fontWeight","lineHeight","h2","h3","h4","h5","h6","fontFamily","muiDarkTheme","ChartMenuHome","onNavigate","useMediaQuery","List","ListItem","button","ListItemIcon","borderRadius","marginRight","background","minWidth","contrastText","ListItemText","primaryTypographyProps","mdiPencilRuler","mdiTune","mdiStarShooting","iSMA","srcChartData","srcChartName","srcDataset","srcDatasetIdx","singleSmaAcc","selSrcDataset","newSubchart","iEMACalc","initSMA","multiplier","ema","iEMA","iATR","singleValAcc","dataset1","singleAtr","hl","hc1","lc1","iRSI","calcData","dClose","up","dwn","w","lastUpEma","lastDwnEma","upSmoothed","dwnSmoothed","rsi","iOBV","obv","iVolume","iMACD","periodEmaShort","periodEmaLong","periodSignal","emaShort","emaLong","macd","emaLongVal","emaShortVal","priceLabels","signal","macdComplete","macdVal","macdIdx","macdValPrice","signalVal","macdHistogramm","useTreeItemStyles","makeStyles","createStyles","root","text","hover","grey","content","borderTopRightRadius","spacing","borderBottomRightRadius","paddingRight","fontWeightMedium","fontWeightRegular","group","marginLeft","paddingLeft","expanded","selected","labelRoot","display","alignItems","padding","labelRootBtn","btnLabel","labelIcon","labelText","flexGrow","CTreeItem","classes","LabelIcon","labelInfo","bgColor","onLabelClick","onIconClick","labelTypographyVariant","infoTypographyVariant","labelTypographyColor","infoTypographyColor","other","TreeItem","className","rgbaColor","ColorRect","container","boxSizing","Colorpicker","onColorSelected","useState","Open","setOpen","ColorHover","setColorHover","InputRef","isHex","test","hexToRgbRes","isRgb","match","isRgba","rgbInternal","colorNameRes","alphaProp","AlphaVal","setAlphaVal","IconButton","ref","Popover","id","anchorEl","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Grid","alignContent","justify","margin","clr","clrIdx","xs","onMouseOver","onMouseLeave","Slider","onChange","TextField","inputProps","target","borderTop","paddingBottom","component","align","fullWidth","onIndicatorLabelClick","indi","CIndicatorGraphTreeItem","ChartStateDispatch","handleToggleExpanded","graphGeneric","nodeId","light","Icon","preventDefault","mdiClose","mdiBorderColor","mdiIframeVariableOutline","defaultValue","ChartMenuIndicators","FilterCat","setFilterCat","categorys","icon","mdiDiameterVariant","mdiArrowExpandVertical","mdiPoll","indicators","category","amtIndicators","yaxixsIdx","fgraph","acc","cur","right","ToggleButtonGroup","exclusive","ToggleButton","borderBottomLeftRadius","borderTopLeftRadius","paper","alert","mdiMagnify","mdiSortAlphabeticalAscending","mdiFilter","TreeView","defaultCollapseIcon","mdiMenuDown","defaultExpandIcon","mdiMenuRight","defaultEndIcon","disableSelection","cat","catIdx","indiIdx","onToolLabelClick","CToolTreeItem","toolIn","mdiMinus","mdiHelp","rotate","mdiArrowSplitHorizontal","mdiBullseye","ChartMenuTools","mdiRuler","mdiRulerSquareCompass","amtTools","ChartMenuSettings","onSettingsExpand","ChartMenuState","setAnchorEl","handleClose","event","currentTarget","Menu","keepMounted","Boolean","MenuItem","expandedSetting","mdiFileChartOutline","mdiWater","mdiFormatText","mdiGrid","Checkbox","checked","mdiChartAreaspline","ChartMenuQuickys","mdiBroom","Alert","elevation","CSnackBar","reason","Snackbar","autoHideDuration","severity","parse","useStyles","popper","tooltip","parseCsvFileObj","then","dataString","rowDelimiter","chars","rowDelimiterAmts","guessedRowDelimiter","rows","delimiter","delimiterAmts","del","guessedDelimiter","amtDecDel","dots","commas","row","lastDot","lastIndexOf","lastComma","isCommaDecDel","isCommaDigitSeparator","newDataString","replaceAll","parseRes","record_delimiter","cast","trim","cast_date","shift","ChartMenuChart","IsError","setIsError","HiddenInputRef","ShowUrlPopup","setShowUrlPopup","CsvUrl","setCsvUrl","evt","files","fetchCsvFromURL","fetch","resp","Error","file","visibility","mdiFileDelimitedOutline","Tooltip","PopperProps","disablePortal","title","helperText","onKeyUp","InputProps","endAdornment","mdiArrowRightThick","interactive","arrow","placement","mdiWeb","minHeight","paperDesktop","CChartMenu2","isMinSm","Drawer","anchor","location","ModalProps","hideBackdrop","mdiHome","mdiFullscreen","ajv","Ajv","ConditionallPortal","Portal","CChart","ContainerRef","ChartMenu2Open","setChartMenu2Open","isContainerInit","validate","compile","errors","xAxis","listening","stateGraph","indicatorType","indicatorLines","indicatorDataSeries","indDataSeriesIdx","xaxisTick","xaxisTickIdx","yaxisTick","yaxisTickIdx","tmpDataset","opacity","mdiMenu","menuButton","Site","setDarkMode","getContrastText","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","Toolbar","edge","aria-label","mdiThemeLightDark","mdiGithub","App","Data","setData","DarkMode","response","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11fa7acd.chunk.js","sourcesContent":["/** Data types */\r\n\r\nimport {\r\n  CommonGestureState,\r\n  Coordinates,\r\n  DragState,\r\n  FullGestureState,\r\n  SharedGestureState,\r\n} from \"react-use-gesture/dist/types\";\r\nimport { ExcludeEmpty, ReducerActionTaskType, ReducerActionType } from \"../ChartState/CChartStateReducer\";\r\nimport { ChartPeriodType, DateStatType } from \"./CChartTimeTypes\";\r\nimport { ChartDataSeries, ChartDataset, DataSeries, IndicatorDataSeries, IndicatorDataset } from \"./CChartTypes\";\r\n\r\nexport type UseGestureStateType = {\r\n  drag: CommonGestureState & Coordinates & DragState & SharedGestureState;\r\n  move: Omit<FullGestureState<\"move\">, \"event\"> & {\r\n    event: React.PointerEvent<Element> | PointerEvent;\r\n  };\r\n  hover: Omit<FullGestureState<\"move\">, \"event\"> & {\r\n    event: React.PointerEvent<Element> | PointerEvent;\r\n  };\r\n  wheel: CommonGestureState & Coordinates;\r\n  dragEnd: CommonGestureState & Coordinates & DragState & SharedGestureState;\r\n};\r\n\r\n/** Interactive State */\r\nexport type InteractiveContainerSizeType = {\r\n  top: number;\r\n  left: number;\r\n  width: number;\r\n  height: number;\r\n  init: boolean;\r\n};\r\n\r\nexport type InteractivePointerType = {\r\n  isHovering: boolean;\r\n  move: { isMoving: boolean; xy: [number, number] };\r\n  drag: {\r\n    isDragging: boolean;\r\n    xy: [number, number];\r\n    initial: [number, number];\r\n    delta: [number, number];\r\n    first: boolean;\r\n    last: boolean;\r\n    movementInitial: [number, number];\r\n  };\r\n  dragPointerUp: {\r\n    isDragPointerUp: boolean;\r\n    xy: [number, number];\r\n    initial: [number, number];\r\n    first: boolean;\r\n    last: boolean;\r\n    movementInitial: [number, number];\r\n  };\r\n  wheel: { isWheeling: boolean; delta: [number, number] };\r\n  chartPointer: {\r\n    move: {\r\n      pixX: number;\r\n      pixXSnap: number;\r\n      pixY: number;\r\n      x: number|null;\r\n      xUnlimited : number;\r\n      xDateString: string;\r\n      subchartIdx: number;\r\n      snapDatasets: {\r\n        yaxisIdx: number;\r\n        graphIdx: number;\r\n        y: number;\r\n        ySnap: string | null;\r\n        pixYSnap: number | null;\r\n        data: ChartDataset | IndicatorDataset;\r\n        dateString: string;\r\n      }[];\r\n    };\r\n    click: {\r\n      clickedSubchartIdx: number | null;\r\n    };\r\n  };\r\n};\r\n\r\nexport type InteractiveXaxisCalcs = {\r\n  xStart: number;\r\n  pixXStart: number;\r\n  xEnd: number;\r\n  pixXEnd: number;\r\n  widthPerTick: number;\r\n  startNoDataPeriod: number;\r\n  endNoDataPeriod: number;\r\n  noDataPeriodPortion: number;\r\n  xAxisTicks: { x: number; dateString: string }[];\r\n  optPeriodRes: ChartPeriodType | null;\r\n};\r\n\r\nexport type InteractiveXaxisType = {\r\n  totalTranslatedX: number;\r\n  totalScaleX: number; //only int\r\n  scaledWidthPerTick: number;\r\n} & InteractiveXaxisCalcs;\r\n\r\nexport type InteractiveStateType = {\r\n  pointer: InteractivePointerType;\r\n  containerSize: InteractiveContainerSizeType;\r\n  xaxis: InteractiveXaxisType;\r\n};\r\n\r\n///////////////////////////////////////\r\n\r\nexport type ChartPreStateRefType = InteractiveStateType & {\r\n  lastUpdate: Date;\r\n  shallUpdate: (\"drag\" | \"pointerMove\" | \"wheel\" | \"dragEnd\" | \"containerResize\" | \"deps\")[];\r\n  tmp: {\r\n    scaleInitWidthPerTick: number | null;\r\n    scaleInitTranslatedX: number;\r\n    amtLastSubcharts: number;\r\n    lastMainChartData: ChartDataSeries;\r\n    dragActionType:\r\n      | null\r\n      | { type: \"translate\" | \"scale\" }\r\n      | { type: \"resizeSubchart\"; res: number; initBottom: number }\r\n      | { type: \"editTool\"; res: [number, number, number, number][]; init: [number, number] }\r\n      | { type: \"drawTool\"; init: [number, number] };\r\n  };\r\n  userInteractedChartState: any;\r\n};\r\n\r\n/** SubCharts State */\r\nexport type GraphStateType<AdditionalGraphProps = {}> = {\r\n  data: DataSeries;\r\n  style: {\r\n    strokeColor: string[];\r\n  };\r\n  name: string;\r\n  type: \"chart\" | \"indicator\" | \"formula\";\r\n  decimals: number;\r\n  curData?: GraphStateType[\"data\"];\r\n  yMax: number;\r\n  yMaxExact: number;\r\n  yMin: number;\r\n  yMinExact: number;\r\n  // drawPixXy: [number, number][];\r\n  datasets: {\r\n    first: {\r\n      x: number;\r\n      pixX: number;\r\n      data: ChartDataset | IndicatorDataset;\r\n      dateString: string;\r\n    } | null;\r\n    last: {\r\n      x: number;\r\n      pixX: number;\r\n      data: ChartDataset | IndicatorDataset;\r\n      dateString: string;\r\n    } | null;\r\n  };\r\n} & AdditionalGraphProps;\r\n\r\nexport type AdditionalChartGraphStateType = {\r\n  data: ChartDataSeries;\r\n  dateStat: DateStatType;\r\n  meta: {\r\n    nData: number;\r\n    chartPeriod: ChartPeriodType | null;\r\n    dataPeriod: number;\r\n    periodGuessConfidence: number;\r\n    tradingDaysPerWeek: number;\r\n    tradingDaysPerWeekGuessConfidence: number;\r\n    type: \"candlechart\" | \"linechart\";\r\n  };\r\n  style: {\r\n    candleStrokeColor: string;\r\n    candleDownColor: string;\r\n    candleUpColor: string;\r\n  };\r\n};\r\n\r\nexport type AdditionalIndicatorGraphStateType = {\r\n  data: IndicatorDataSeries;\r\n  indicator: {\r\n    name: string;\r\n    params: { name: string; val: number }[];\r\n    type: \"line\" | \"bars\";\r\n    default: {\r\n      params: { name: string; val: number }[];\r\n      newSubchart: boolean;\r\n      fixedYScale?: [number, number]; //\r\n      decimals?: number; //\r\n    };\r\n    indicatorFn: (chartData: ChartDataset[], chartName: string, ...other: any[]) => IndicatorDataSeries;\r\n    \r\n  };\r\n};\r\n\r\nexport type ChartGraphStateType = GraphStateType<AdditionalChartGraphStateType>;\r\nexport type IndicatorGraphStateType = Omit<GraphStateType, \"data\" | \"style\"> &\r\n  AdditionalIndicatorGraphStateType & {\r\n    style: {\r\n      strokeColor: string[];\r\n    };\r\n  };\r\n\r\nexport const isIndicatorGraph = (graph: GraphStateType): graph is GraphStateType<AdditionalIndicatorGraphStateType> => {\r\n  if (graph.type === \"indicator\") return true;\r\n  return false;\r\n};\r\nexport const isChartGraph = (graph: GraphStateType): graph is GraphStateType<AdditionalChartGraphStateType> => {\r\n  if (graph.type === \"chart\") return true;\r\n  return false;\r\n};\r\nexport type DrawingTool = {\r\n  xy: [number, number][];\r\n  type: \"hline\" | \"vline\" | \"trendline\";\r\n  style: {\r\n    strokeColor: string;\r\n    anchorColor: string;\r\n  };\r\n  params?: { [key: string]: any };\r\n};\r\n\r\nexport type userInteractsSubchartStateType = {\r\n  yaxis: {\r\n    graphs: {\r\n      data?: DataSeries;\r\n      style: {\r\n        strokeColor: string[];\r\n      };\r\n      name: string;\r\n      type: \"chart\" | \"indicator\" | \"formula\";\r\n      decimals: number;\r\n    }[];\r\n    tools: Pick<DrawingTool, \"params\" | \"type\" | \"style\">[];\r\n    decimals: number;\r\n  }[];\r\n  // top: number;\r\n  // bottom: number;\r\n}[];\r\n\r\nexport type SubchartStateType = {\r\n  yaxis: YaxisStateType[];\r\n  top: number;\r\n  bottom: number;\r\n};\r\n\r\nexport type YaxisStateType<pure = \"false\"> = {\r\n  graphs: GraphStateType[];\r\n  tools: DrawingTool[];\r\n  decimals: number;\r\n\r\n  optIntervalY: number;\r\n  heightPerPt: number; // yaxis\r\n  translatedY: number; // yaxis\r\n  drawTicks: { pixY: number; label: string }[];\r\n};\r\n\r\n/** ChartState */\r\n\r\nexport type ChartStateType = {\r\n  xaxis: {\r\n    heightXAxis: number;\r\n    heightTickMarkLines: number;\r\n    style: {\r\n      fillColor: string;\r\n      strokeColor: string;\r\n      fontColor: string;\r\n      fontSize: number;\r\n      fontName: string;\r\n    };\r\n  };\r\n  yaxis: {\r\n    widthYAxis: number;\r\n    widthTickmarkLines: number;\r\n    style: {\r\n      fillColor: string;\r\n      strokeColor: string;\r\n      fontColor: string;\r\n      fontSize: number;\r\n      fontName: string;\r\n    };\r\n  };\r\n  grid: {\r\n    useGridX: boolean;\r\n    useGridY: boolean;\r\n    style: {\r\n      strokeColor: string;\r\n      strokeStyle: string;\r\n    };\r\n  };\r\n  backgroundColor: string;\r\n  border: string;\r\n  darkMode: boolean;\r\n  fullscreen: boolean;\r\n  subCharts: SubchartStateType[];\r\n  draw: Partial<Omit<DrawingTool, \"xy\">> & { isDrawing: boolean; pixXy: [number, number][] };\r\n} & InteractiveStateType;\r\n\r\n/** CalculatedChartState and Hook */\r\n\r\nexport type CalculatedChartStateType = ChartStateType & {\r\n  methods: {\r\n    addSubchart: (\r\n      chartSeries: DataSeries,\r\n      chartName: string,\r\n      indicator?: AdditionalIndicatorGraphStateType[\"indicator\"],\r\n      reset?: boolean,\r\n    ) => void;\r\n    addGraph: (\r\n      chartSeries: ChartDataset[],\r\n      chartName: string,\r\n      subchartIdx: number,\r\n      indicator?: AdditionalIndicatorGraphStateType[\"indicator\"]\r\n    ) => void;\r\n    getSubchart: (subchartIdx: number) => SubchartStateType;\r\n    getYaxis: (subchartIdx: number, yaxisIdx: number) => YaxisStateType;\r\n    getGraph: (subchartIdx: number, yaxisIdx: number, graphIdx: number) => GraphStateType;\r\n    xToPix: (x: number, translatedX?: number) => number;\r\n    pixToX: (pixX: number, translatedX?: number) => number;\r\n    yToPix: (y: number, subchartIdx: number, yaxisIdx: number, translatedY?: number) => number;\r\n    pixToY: (pixY: number, subchartIdx: number, yaxisIdx: number, translatedY?: number) => number;\r\n  };\r\n  // drawProps: { graphs: number[][]; yaxis: { y: number; label: string }[][] }[];\r\n};\r\nexport type TypedDispatcher<Action extends ReducerActionTaskType> = React.Dispatch<ReducerActionType<Action>>;\r\nexport type ChartStateHookType<Action extends ReducerActionTaskType = ReducerActionTaskType> = [\r\n  CalculatedChartStateType,\r\n  TypedDispatcher<Action>\r\n];\r\n","export const singleChartDataSchema = {\r\n  type: \"object\",\r\n  properties: {\r\n    data: {\r\n      type: \"array\",\r\n      nullable: false,\r\n      minItems: 2,\r\n      items: {\r\n        type: \"object\",\r\n        nullable: false,\r\n        properties: {\r\n          date: {\r\n            type: \"object\",\r\n            nullable: false,\r\n            // format: \"date-time\",\r\n          },\r\n          open: { type: \"number\", nullable: false },\r\n          high: { type: \"number\", nullable: false },\r\n          low: { type: \"number\", nullable: false },\r\n          close: { type: \"number\", nullable: false },\r\n        },\r\n        required: [\"date\", \"close\"],\r\n      },\r\n    },\r\n    name: { type: \"string\", nullable: false },\r\n  },\r\n  required: [\"data\", \"name\"],\r\n};\r\nexport const chartDataSchema = {\r\n  type: \"array\",\r\n  minItems: 1,\r\n  // additionalItems: true,\r\n  items: singleChartDataSchema,\r\n};\r\n","// /** Data types */\r\n\r\nimport { CalculatedChartStateType, ChartStateHookType, ChartStateType } from \"./CChartStateTypes\";\r\n\r\n// types for single datasets\r\nexport type LineChartDataset = {\r\n  date: Date;\r\n  close: number;\r\n  volume?: number;\r\n};\r\nexport type CandleChartDataset = LineChartDataset & {\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n};\r\nexport type ChartDataset = LineChartDataset | CandleChartDataset;\r\nexport type IndicatorDataset = {\r\n  prices: (number | null)[];\r\n  date: Date;\r\n  priceLabels?: string[];\r\n};\r\nexport type Dataset = ChartDataset | IndicatorDataset;\r\n\r\n// type for dataseries\r\nexport type ChartDataSeries = ChartDataset[];\r\nexport type IndicatorDataSeries = IndicatorDataset[];\r\nexport type DataSeries = (ChartDataset | IndicatorDataset)[];\r\n\r\n// type guard for candle chart\r\nexport const isCandleChartDataset = (dataset: Dataset): dataset is CandleChartDataset => {\r\n  if (\"open\" in dataset && \"high\" in dataset && \"low\" in dataset && \"close\" in dataset) return true;\r\n  return false;\r\n};\r\n// doesn't exclude datasets with close property (like CandleChartDataset -> e.g. a CandleChartDataset will also return true)\r\nexport const isLineChartDataset = (dataset: Dataset): dataset is LineChartDataset => {\r\n  // if (!dataset) return false;\r\n  if (\"close\" in dataset) return true;\r\n  return false;\r\n};\r\nexport const isVolumeDataset = (dataset: Dataset): dataset is ChartDataset & { volume: number } => {\r\n  if (\"volume\" in dataset) return true;\r\n  return false;\r\n};\r\n\r\nexport const isIndicatorDataset = (dataset: Dataset): dataset is IndicatorDataset => {\r\n  if (\"prices\" in dataset) return true;\r\n  return false;\r\n};\r\n\r\n/** CChart Prop types */\r\n// type for chartData prop\r\nexport type ChartDataProp = { data: ChartDataset[]; name: string }[];\r\n\r\n// todo -> chart styling props\r\nexport type StyleProp = {\r\n  xaxis?: {\r\n    heightXAxis: number;\r\n    heightTickMarkLines: number;\r\n    style: {\r\n      fillColor: string;\r\n      strokeColor: string;\r\n      fontColor: string;\r\n      fontSize: number;\r\n      fontName: string;\r\n    };\r\n  };\r\n  yaxis?: {\r\n    widthYAxis?: number;\r\n    widthTickmarkLines?: number;\r\n    style?: {\r\n      fillColor: string;\r\n      strokeColor: string;\r\n      fontColor: string;\r\n      fontSize: number;\r\n      fontName: string;\r\n    };\r\n  };\r\n  grid?: {\r\n    useGridX?: boolean;\r\n    useGridY?: boolean;\r\n    style?: {\r\n      strokeColor: string;\r\n      strokeStyle: string;\r\n    };\r\n  };\r\n  backgroundColor?: string;\r\n  fullscreen?: boolean;\r\n};\r\n\r\ntype DeepPartial<T> = {\r\n  [P in keyof T]?: DeepPartial<T[P]>;\r\n};\r\n\r\n// type of CChart props\r\nexport type CChartProps = {\r\n  chartData: ChartDataProp;\r\n  style?: DeepPartial<Omit<ChartStateType, \"draw\" | \"containerSize\" | \"subCharts\" | \"pointer\">>;\r\n  width?: number;\r\n  height?: number;\r\n  viewMode?: \"static\" | \"responsive\" | \"fullscreen\";\r\n  disableTheme?: boolean;\r\n  ChartState?: CalculatedChartStateType;\r\n  ChartStateDispatch?: ChartStateHookType[1];\r\n  // darkMode?: boolean;\r\n};\r\n","import { Button, Typography, useTheme } from \"@material-ui/core\";\r\nimport { mdiChartBellCurve, mdiChartLine } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport React from \"react\";\r\nimport { ChartDataset, Dataset, isCandleChartDataset, isIndicatorDataset } from \"./Types/CChartTypes\";\r\n\r\nexport const CChartLabel = (props: {\r\n  name: string;\r\n  dataset: Dataset;\r\n  decimals?: number;\r\n  onClick?: (name?: string) => any;\r\n  // top: number;\r\n}) => {\r\n  const { dataset, name, decimals, onClick } = props;\r\n  const theme = useTheme();\r\n  if (!dataset) return null;\r\n\r\n  return (\r\n    <div >\r\n      <Button\r\n        style={{textTransform: \"none\", textAlign: \"left\", }}\r\n        onClick={() => {\r\n          onClick?.(name);\r\n        }}\r\n        startIcon={<Icon path={isIndicatorDataset(dataset) ? mdiChartBellCurve : mdiChartLine} size={1.0} />}\r\n      >\r\n      {isIndicatorDataset(dataset) ? (\r\n        <Typography>{`${name}:${dataset.prices.map((price) => price?.toFixed(decimals)).join(\", \") || \"\"}`}</Typography>\r\n      ) : (\r\n        <Typography variant=\"body1\">\r\n          {isCandleChartDataset(dataset)\r\n            ? `${name}\r\n                O:${dataset.open.toFixed(decimals)}\r\n                H:${dataset.high.toFixed(decimals)}\r\n                L:${dataset.low.toFixed(decimals)}\r\n                C:${dataset.close.toFixed(decimals)}`\r\n            : `${name}\r\n                C:${dataset.close.toFixed(decimals)}`}\r\n        </Typography>\r\n      )}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Line, Rect, Shape } from \"react-konva\";\r\nimport { chartStateReducer } from \"./ChartState/CChartStateReducer\";\r\nimport { isIndicatorGraph, CalculatedChartStateType } from \"./Types/CChartStateTypes\";\r\nimport { getDecimals } from \"./utils\";\r\n\r\nexport const CChartCrosshair = (props: { fullState: CalculatedChartStateType }) => {\r\n  const { fullState } = props;\r\n  const containerWidth = fullState.containerSize.width - 1;\r\n  const containerHeight = fullState.containerSize.height - 1;\r\n  const { widthYAxis } = fullState.yaxis;\r\n  const { heightXAxis, heightTickMarkLines } = fullState.xaxis;\r\n\r\n  let pixYSnap: number | null = null;\r\n  let ySnap: string | null = null;\r\n  if (!!fullState.pointer.move) {\r\n    pixYSnap = fullState.pointer.move.xy[1];\r\n  }\r\n  for (let i = 0; i < fullState.subCharts.length; i++) {\r\n    const subchart = fullState.subCharts[i];\r\n    for (let j = 0; j < subchart.yaxis[0].graphs.length; j++) {\r\n      const graph = subchart.yaxis[0].graphs[j];\r\n      if (!!fullState.pointer?.chartPointer?.move?.snapDatasets?.[0])\r\n        if (fullState.pointer.chartPointer.move?.snapDatasets[0].pixYSnap !== null) {\r\n          pixYSnap = fullState.pointer.chartPointer.move.snapDatasets[0].pixYSnap;\r\n          ySnap = fullState.pointer.chartPointer.move.snapDatasets[0].ySnap;\r\n        }\r\n    }\r\n  }\r\n  let subchartIdx = -1;\r\n  if (!!fullState.pointer.move) {\r\n    const xy = fullState.pointer.move.xy[1];\r\n    subchartIdx = fullState.subCharts.findIndex((val) => val.bottom >= xy && val.top <= xy);\r\n  }\r\n  if (!ySnap && subchartIdx !== -1)\r\n    ySnap = fullState.methods\r\n      .pixToY(fullState.pointer.move?.xy[1] as number, subchartIdx, 0)\r\n      .toFixed(fullState.subCharts[subchartIdx].yaxis[0].decimals);\r\n  if (!!ySnap && subchartIdx !== -1) {\r\n    const curgraph = fullState.subCharts[subchartIdx].yaxis[0].graphs[0];\r\n    if (isIndicatorGraph(curgraph)) {\r\n      if (!!curgraph.indicator.default.decimals)\r\n        ySnap = (\r\n          Math.round(parseFloat(ySnap) * Math.pow(10, curgraph.indicator.default.decimals)) /\r\n          Math.pow(10, curgraph.indicator.default.decimals)\r\n        ).toString();\r\n    }\r\n  }\r\n\r\n  // console.log(fullState.pointer?.chartPointer?.move?.xUnlimited, fullState.xaxis.xEnd, fullState.xaxis.xStart);\r\n  // console.log(fullState.pointer.move.xy[1], fullState.subCharts[fullState.subCharts.length - 1].bottom);\r\n\r\n  return !!fullState.pointer.move && !!pixYSnap ? (\r\n    <React.Fragment>\r\n      <Line // crosshair x\r\n        x={0}\r\n        y={0}\r\n        points={[\r\n          fullState.methods.xToPix(Math.round(fullState.methods.pixToX(fullState.pointer.move.xy[0]))),\r\n          0,\r\n          fullState.methods.xToPix(Math.round(fullState.methods.pixToX(fullState.pointer.move.xy[0]))),\r\n          containerHeight - heightXAxis + heightTickMarkLines,\r\n        ]}\r\n        stroke=\"black\"\r\n        strokeWidth={1}\r\n      />\r\n\r\n      {fullState.pointer.move.xy[1] <= fullState.subCharts[fullState.subCharts.length - 1].bottom ? (\r\n        <React.Fragment>\r\n          <Line // crosshair y\r\n            x={0}\r\n            y={0}\r\n            points={[0, pixYSnap, containerWidth - widthYAxis, pixYSnap]}\r\n            stroke=\"black\"\r\n            strokeWidth={1}\r\n          />\r\n          <Shape // yaxis marker\r\n            sceneFunc={(context, shape) => {\r\n              const ctx = context._context;\r\n              if (!fullState.pointer.move) return;\r\n              const yStart = pixYSnap as number;\r\n              ctx.moveTo(containerWidth - widthYAxis, yStart);\r\n              ctx.lineTo(containerWidth - widthYAxis + 10, yStart + 10);\r\n              ctx.lineTo(containerWidth, yStart + 10);\r\n              ctx.lineTo(containerWidth, yStart + 1);\r\n              ctx.lineTo(containerWidth, yStart - 10);\r\n              ctx.lineTo(containerWidth - widthYAxis + 10, yStart - 10);\r\n              ctx.lineTo(containerWidth - widthYAxis, yStart);\r\n              // (!) Konva specific method, it is very important\r\n              context.fillStrokeShape(shape);\r\n            }}\r\n            stroke=\"black\"\r\n            fill=\"rgba(199, 0, 57, 1)\"\r\n            strokeWidth={1}\r\n          />\r\n          <Shape // yaxis marker text\r\n            sceneFunc={(context, shape) => {\r\n              const ctx = context._context;\r\n              if (!fullState.pointer.move) return;\r\n              const yStart = pixYSnap as number;\r\n              ctx.font = fullState.yaxis.style.fontSize + \"px \" + fullState.yaxis.style.fontName;\r\n              ctx.fillStyle = fullState.yaxis.style.fontColor;\r\n              ctx.textAlign = \"left\";\r\n              ctx.textBaseline = \"middle\";\r\n              ctx.fillText(\r\n                ySnap as string,\r\n                containerWidth - widthYAxis + fullState.yaxis.widthTickmarkLines + 5,\r\n                yStart // additional 5px distance to end of tickmark\r\n              );\r\n              // (!) Konva specific method, it is very important\r\n              context.fillStrokeShape(shape);\r\n            }}\r\n            // stroke=\"black\"\r\n            // strokeWidth={1}\r\n          />\r\n        </React.Fragment>\r\n      ) : null}\r\n\r\n      {fullState.pointer?.chartPointer?.move?.xUnlimited <= fullState.xaxis.xEnd &&\r\n      fullState.pointer?.chartPointer?.move?.xUnlimited >= fullState.xaxis.xStart ? (\r\n        <React.Fragment>\r\n          <Rect // xaxis marker rect\r\n            x={fullState.methods.xToPix(Math.round(fullState.methods.pixToX(fullState.pointer.move?.xy[0]))) - 25}\r\n            y={containerHeight - heightXAxis + heightTickMarkLines + 0.5}\r\n            width={50}\r\n            height={25}\r\n            fill=\"white\"\r\n            stroke=\"black\"\r\n            strokeWidth={1}\r\n          />\r\n          <Shape // xaxis marker text\r\n            sceneFunc={(context, shape) => {\r\n              const ctx = context._context;\r\n              if (!fullState.pointer.move) return;\r\n              ctx.font = fullState.xaxis.style.fontSize + \"px \" + fullState.xaxis.style.fontName;\r\n              ctx.fillStyle = fullState.xaxis.style.fontColor;\r\n              ctx.textAlign = \"center\";\r\n              ctx.textBaseline = \"top\";\r\n\r\n              ctx.fillText(\r\n                !!fullState.pointer?.chartPointer?.move?.snapDatasets?.[0]\r\n                  ? (fullState.pointer.chartPointer.move.snapDatasets[0].dateString as string)\r\n                  : Math.round(fullState.methods.pixToX(fullState.pointer.move.xy[0])).toString(),\r\n                fullState.methods.xToPix(Math.round(fullState.methods.pixToX(fullState.pointer.move.xy[0]))),\r\n                containerHeight - heightXAxis + heightTickMarkLines + 5 + 0.5 // additional 5px distance to end of tickmark\r\n              );\r\n              // (!) Konva specific method, it is very important\r\n              context.fillStrokeShape(shape);\r\n            }}\r\n            // stroke=\"black\"\r\n            // strokeWidth={1}\r\n          />\r\n        </React.Fragment>\r\n      ) : null}\r\n\r\n      {/* ) : null} */}\r\n    </React.Fragment>\r\n  ) : null;\r\n};\r\n","import React from \"react\";\r\nimport { Shape } from \"react-konva\";\r\nimport { CandleChartDataset } from \"../Types/CChartTypes\";\r\nimport { CalculatedChartStateType, isChartGraph } from \"../Types/CChartStateTypes\";\r\n\r\nexport type CCandleChartType = {\r\n  fullState: CalculatedChartStateType;\r\n};\r\n\r\nexport const CCandleChart = (props: CCandleChartType) => {\r\n  const { fullState } = props;\r\n  const yaxis = fullState.subCharts[0].yaxis[0];\r\n  const graph = fullState.subCharts[0].yaxis[0].graphs[0];\r\n  if (!isChartGraph(graph) || !graph || !graph.curData) return null;\r\n\r\n  let curData: (CandleChartDataset & {\r\n    idx: number;\r\n  })[] = [];\r\n  let dxHalfCandle = 0;\r\n  if (0 in fullState.subCharts)\r\n    if (0 in fullState.subCharts[0].yaxis)\r\n      if (0 in fullState.subCharts[0].yaxis[0].graphs) {\r\n        curData = graph.curData as unknown as (CandleChartDataset & {\r\n          idx: number;\r\n        })[];\r\n        curData.forEach((val, valIdx) => (val.idx = valIdx));\r\n        dxHalfCandle =\r\n          fullState.xaxis.widthPerTick <= 2 ? 0 : Math.floor(0.35 * (fullState.xaxis.widthPerTick - 1));\r\n      }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Shape // candle wicks\r\n        sceneFunc={(context, shape) => {\r\n          context.beginPath();\r\n          (graph.curData as CandleChartDataset[]).forEach((dataset, datasetIdx) => {\r\n            const xPix = fullState.methods.xToPix(datasetIdx, 0) + fullState.xaxis.pixXStart;\r\n            const yPixHigh = Math.round(\r\n              fullState.methods.yToPix(dataset.high, 0, 0)\r\n            );\r\n            const yPixLow = Math.round(\r\n              fullState.methods.yToPix(dataset.low, 0, 0)\r\n            );\r\n            const yPixClose = Math.round(\r\n              fullState.methods.yToPix(dataset.close, 0, 0)\r\n            );\r\n            context.moveTo(xPix + 0.5, yPixLow + 0.5);\r\n            context.lineTo(xPix + 0.5, yPixHigh + 0.5);\r\n            if (dataset.close === dataset.open) {\r\n              context.moveTo(xPix - 2, yPixClose);\r\n              context.lineTo(xPix + 2, yPixClose);\r\n            }\r\n          });\r\n          // (!) Konva specific method, it is very important\r\n          context.closePath();\r\n          context.fillStrokeShape(shape);\r\n        }}\r\n        stroke={graph.style.candleStrokeColor}\r\n        strokeWidth={1}\r\n      />\r\n      <Shape // candle bodys upward\r\n        sceneFunc={(context, shape) => {\r\n          context.beginPath();\r\n          curData\r\n            .filter((val) => val.close >= val.open)\r\n            .forEach((gainDataset, gainDatasetIdx) => {\r\n              const xPix =\r\n                fullState.methods.xToPix(gainDataset.idx, 0) + fullState.xaxis.pixXStart;\r\n              const yPixOpen = Math.round(\r\n                fullState.methods.yToPix(\r\n                  gainDataset.open,\r\n                  0,\r\n                  0,\r\n                )\r\n              );\r\n              const yPixClose = Math.round(\r\n                fullState.methods.yToPix(\r\n                  gainDataset.close,\r\n                  0,\r\n                  0,\r\n                )\r\n              );\r\n              if (gainDataset.close !== gainDataset.open) {\r\n                if (dxHalfCandle !== 0) {\r\n                  const maxWidth =\r\n                    xPix + dxHalfCandle > fullState.xaxis.pixXEnd\r\n                      ? fullState.xaxis.pixXEnd - xPix + dxHalfCandle\r\n                      : dxHalfCandle * 2;\r\n                  context.rect(xPix + 0.5 - dxHalfCandle, yPixOpen + 0.5, maxWidth, yPixClose - yPixOpen);\r\n                } else if (dxHalfCandle === 0) {\r\n                  context.moveTo(xPix + 0.5, yPixClose);\r\n                  context.lineTo(xPix + 0.5, yPixOpen);\r\n                }\r\n              }\r\n              context.closePath();\r\n              context.fillStrokeShape(shape);\r\n            });\r\n        }}\r\n        stroke={graph.style.candleStrokeColor}\r\n        fill={graph.style.candleUpColor}\r\n        strokeWidth={1}\r\n      />\r\n      <Shape // candle bodys downward\r\n        sceneFunc={(context, shape) => {\r\n          context.beginPath();\r\n          curData\r\n            .filter((val) => val.close < val.open)\r\n            .forEach((gainDataset, gainDatasetIdx) => {\r\n              const xPix =\r\n                fullState.methods.xToPix(gainDataset.idx, 0) + fullState.xaxis.pixXStart;\r\n              const yPixOpen = Math.round(\r\n                fullState.methods.yToPix(\r\n                  gainDataset.open,\r\n                  0,\r\n                  0,\r\n                )\r\n              );\r\n              const yPixClose = Math.round(\r\n                fullState.methods.yToPix(\r\n                  gainDataset.close,\r\n                  0,\r\n                  0,\r\n                )\r\n              );\r\n              if (gainDataset.close !== gainDataset.open) {\r\n                if (dxHalfCandle !== 0) {\r\n                  const maxWidth =\r\n                    xPix + dxHalfCandle > fullState.xaxis.pixXEnd\r\n                      ? fullState.xaxis.pixXEnd - xPix + dxHalfCandle\r\n                      : dxHalfCandle * 2;\r\n                  context.rect(xPix + 0.5 - dxHalfCandle, yPixOpen + 0.5, maxWidth, yPixClose - yPixOpen);\r\n                } else if (dxHalfCandle === 0) {\r\n                  context.moveTo(xPix + 0.5, yPixClose);\r\n                  context.lineTo(xPix + 0.5, yPixOpen);\r\n                }\r\n              }\r\n              context.closePath();\r\n              context.fillStrokeShape(shape);\r\n            });\r\n        }}\r\n        stroke={graph.style.candleStrokeColor}\r\n        fill={graph.style.candleDownColor}\r\n        strokeWidth={1}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { MutableRefObject, RefObject } from \"react\";\r\n\r\n/** Null/Undefined  */\r\nexport const isNullish = (val: any): val is undefined | null => {\r\n  if (val === undefined || val === null) return true;\r\n  if (typeof val === \"number\") if (isNaN(val)) return true;\r\n  return false;\r\n};\r\n\r\n/** Number utils */\r\nexport const getDecimals = (val: number) => {\r\n  if (Math.floor(val) === val) return 0;\r\n  return val.toString().split(\".\")[1].length || 0;\r\n};\r\n\r\n/** React */\r\n// export const isValidRef = (\r\n//   ref: MutableRefObject<any | null> | RefObject<any>\r\n// ): ref is MutableRefObject<any> | (RefObject<any> & { readonly current: any }) => {\r\n//   if (!ref || !ref.current) return false;\r\n//   return true;\r\n// };\r\n// export const isEmptyRef = (ref: MutableRefObject<any | null> |  RefObject<any>): ref is MutableRefObject<null> | RefObject<null> => {\r\n//   if (!ref || !ref.current) return true;\r\n//   return false;\r\n// };\r\n\r\n// export const isEmptyDOMRef = (\r\n//   ref: RefObject<any>\r\n// ): ref is {current: null} => {\r\n//   if (!ref || !ref.current) return true;\r\n//   return false;\r\n// };\r\n\r\n// Object / Array utils\r\n// export const editDeepProp = (srcObj: {[key: string]: any} | any[], path: (number | string)[], propName: number | string) => {\r\n\r\nexport const includesOne = (array: any[], ...params: any[]): boolean => {\r\n  let res = false;\r\n  params.forEach((param) => {\r\n    if (array.includes(param)) res = true;\r\n  });\r\n  return res;\r\n};\r\n\r\n//   let newObj = srcObj;\r\n//   path.forEach((addr, addrIdx) => {\r\n//     if (typeof newObj !== \"object\") return;\r\n//     if (Array.isArray(newObj) && typeof addr === \"number\") {\r\n//       newObj= newObj[addr]\r\n//     }\r\n//     else if (typeof  newObj === \"object\" && typeof addr === \"string\"){\r\n//       newObj = (newObj as { [key: string]: any })[addr];\r\n//     }\r\n//   })\r\n//   const editedSubcharts: ChartStateType[\"subCharts\"] = [\r\n//     ...srcObj.slice(0, toolsSubIdx),\r\n//     {\r\n//       ...srcObj[toolsSubIdx],\r\n//       yaxis: [\r\n//         ...srcObj[toolsSubIdx].yaxis.slice(0, toolsYaxisIdx),\r\n//         {\r\n//           ...srcObj[toolsSubIdx].yaxis[toolsYaxisIdx],\r\n//           tools: [\r\n//             ...srcObj[toolsSubIdx].yaxis[toolsYaxisIdx].tools.slice(0, toolIdx),\r\n//             {\r\n//               ...srcObj[toolsSubIdx].yaxis[toolsYaxisIdx].tools[toolIdx],\r\n//               xy: [\r\n//                 ...srcObj[toolsSubIdx].yaxis[toolsYaxisIdx].tools[toolIdx].xy.slice(0, anchorIdx),\r\n//                 [newX, newY],\r\n//                 ...srcObj[toolsSubIdx].yaxis[toolsYaxisIdx].tools[toolIdx].xy.slice(anchorIdx + 1),\r\n//               ],\r\n//             },\r\n//             ...srcObj[toolsSubIdx].yaxis[toolsYaxisIdx].tools.slice(toolIdx + 1),\r\n//           ],\r\n//         },\r\n//         ...srcObj[toolsSubIdx].yaxis.slice(toolsYaxisIdx + 1),\r\n//       ],\r\n//     },\r\n//     ...srcObj.slice(toolsSubIdx + 1),\r\n//   ];\r\n// }\r\n\r\nconst colorNames: {[key: string]: string} = {\r\n  aliceblue: \"#f0f8ff\",\r\n  antiquewhite: \"#faebd7\",\r\n  aqua: \"#00ffff\",\r\n  aquamarine: \"#7fffd4\",\r\n  azure: \"#f0ffff\",\r\n  beige: \"#f5f5dc\",\r\n  bisque: \"#ffe4c4\",\r\n  black: \"#000000\",\r\n  blanchedalmond: \"#ffebcd\",\r\n  blue: \"#0000ff\",\r\n  blueviolet: \"#8a2be2\",\r\n  brown: \"#a52a2a\",\r\n  burlywood: \"#deb887\",\r\n  cadetblue: \"#5f9ea0\",\r\n  chartreuse: \"#7fff00\",\r\n  chocolate: \"#d2691e\",\r\n  coral: \"#ff7f50\",\r\n  cornflowerblue: \"#6495ed\",\r\n  cornsilk: \"#fff8dc\",\r\n  crimson: \"#dc143c\",\r\n  cyan: \"#00ffff\",\r\n  darkblue: \"#00008b\",\r\n  darkcyan: \"#008b8b\",\r\n  darkgoldenrod: \"#b8860b\",\r\n  darkgray: \"#a9a9a9\",\r\n  darkgreen: \"#006400\",\r\n  darkkhaki: \"#bdb76b\",\r\n  darkmagenta: \"#8b008b\",\r\n  darkolivegreen: \"#556b2f\",\r\n  darkorange: \"#ff8c00\",\r\n  darkorchid: \"#9932cc\",\r\n  darkred: \"#8b0000\",\r\n  darksalmon: \"#e9967a\",\r\n  darkseagreen: \"#8fbc8f\",\r\n  darkslateblue: \"#483d8b\",\r\n  darkslategray: \"#2f4f4f\",\r\n  darkturquoise: \"#00ced1\",\r\n  darkviolet: \"#9400d3\",\r\n  deeppink: \"#ff1493\",\r\n  deepskyblue: \"#00bfff\",\r\n  dimgray: \"#696969\",\r\n  dodgerblue: \"#1e90ff\",\r\n  firebrick: \"#b22222\",\r\n  floralwhite: \"#fffaf0\",\r\n  forestgreen: \"#228b22\",\r\n  fuchsia: \"#ff00ff\",\r\n  gainsboro: \"#dcdcdc\",\r\n  ghostwhite: \"#f8f8ff\",\r\n  gold: \"#ffd700\",\r\n  goldenrod: \"#daa520\",\r\n  gray: \"#808080\",\r\n  green: \"#008000\",\r\n  greenyellow: \"#adff2f\",\r\n  honeydew: \"#f0fff0\",\r\n  hotpink: \"#ff69b4\",\r\n  \"indianred \": \"#cd5c5c\",\r\n  indigo: \"#4b0082\",\r\n  ivory: \"#fffff0\",\r\n  khaki: \"#f0e68c\",\r\n  lavender: \"#e6e6fa\",\r\n  lavenderblush: \"#fff0f5\",\r\n  lawngreen: \"#7cfc00\",\r\n  lemonchiffon: \"#fffacd\",\r\n  lightblue: \"#add8e6\",\r\n  lightcoral: \"#f08080\",\r\n  lightcyan: \"#e0ffff\",\r\n  lightgoldenrodyellow: \"#fafad2\",\r\n  lightgrey: \"#d3d3d3\",\r\n  lightgreen: \"#90ee90\",\r\n  lightpink: \"#ffb6c1\",\r\n  lightsalmon: \"#ffa07a\",\r\n  lightseagreen: \"#20b2aa\",\r\n  lightskyblue: \"#87cefa\",\r\n  lightslategray: \"#778899\",\r\n  lightsteelblue: \"#b0c4de\",\r\n  lightyellow: \"#ffffe0\",\r\n  lime: \"#00ff00\",\r\n  limegreen: \"#32cd32\",\r\n  linen: \"#faf0e6\",\r\n  magenta: \"#ff00ff\",\r\n  maroon: \"#800000\",\r\n  mediumaquamarine: \"#66cdaa\",\r\n  mediumblue: \"#0000cd\",\r\n  mediumorchid: \"#ba55d3\",\r\n  mediumpurple: \"#9370d8\",\r\n  mediumseagreen: \"#3cb371\",\r\n  mediumslateblue: \"#7b68ee\",\r\n  mediumspringgreen: \"#00fa9a\",\r\n  mediumturquoise: \"#48d1cc\",\r\n  mediumvioletred: \"#c71585\",\r\n  midnightblue: \"#191970\",\r\n  mintcream: \"#f5fffa\",\r\n  mistyrose: \"#ffe4e1\",\r\n  moccasin: \"#ffe4b5\",\r\n  navajowhite: \"#ffdead\",\r\n  navy: \"#000080\",\r\n  oldlace: \"#fdf5e6\",\r\n  olive: \"#808000\",\r\n  olivedrab: \"#6b8e23\",\r\n  orange: \"#ffa500\",\r\n  orangered: \"#ff4500\",\r\n  orchid: \"#da70d6\",\r\n  palegoldenrod: \"#eee8aa\",\r\n  palegreen: \"#98fb98\",\r\n  paleturquoise: \"#afeeee\",\r\n  palevioletred: \"#d87093\",\r\n  papayawhip: \"#ffefd5\",\r\n  peachpuff: \"#ffdab9\",\r\n  peru: \"#cd853f\",\r\n  pink: \"#ffc0cb\",\r\n  plum: \"#dda0dd\",\r\n  powderblue: \"#b0e0e6\",\r\n  purple: \"#800080\",\r\n  rebeccapurple: \"#663399\",\r\n  red: \"#ff0000\",\r\n  rosybrown: \"#bc8f8f\",\r\n  royalblue: \"#4169e1\",\r\n  saddlebrown: \"#8b4513\",\r\n  salmon: \"#fa8072\",\r\n  sandybrown: \"#f4a460\",\r\n  seagreen: \"#2e8b57\",\r\n  seashell: \"#fff5ee\",\r\n  sienna: \"#a0522d\",\r\n  silver: \"#c0c0c0\",\r\n  skyblue: \"#87ceeb\",\r\n  slateblue: \"#6a5acd\",\r\n  slategray: \"#708090\",\r\n  snow: \"#fffafa\",\r\n  springgreen: \"#00ff7f\",\r\n  steelblue: \"#4682b4\",\r\n  tan: \"#d2b48c\",\r\n  teal: \"#008080\",\r\n  thistle: \"#d8bfd8\",\r\n  tomato: \"#ff6347\",\r\n  turquoise: \"#40e0d0\",\r\n  violet: \"#ee82ee\",\r\n  wheat: \"#f5deb3\",\r\n  white: \"#ffffff\",\r\n  whitesmoke: \"#f5f5f5\",\r\n  yellow: \"#ffff00\",\r\n  yellowgreen: \"#9acd32\",\r\n};\r\n// colors\r\nexport const colorNameToHex = (name: string) => {\r\n  if (!(name in colorNames)) return null;\r\n  return colorNames[\"name\"];\r\n};\r\nexport const colorNameToRGB = (name: string) => {\r\n  if (!(name in colorNames)) return null;\r\n  return hexToRgb(colorNames[\"name\"]);\r\n};\r\n\r\nexport const hexToRgb = (hex: string) => {\r\n  if (!hex) return null;\r\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n    return r + r + g + g + b + b;\r\n  });\r\n\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result\r\n    ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n      }\r\n    : null;\r\n};\r\n\r\n\r\nexport default function mergeRefs<T = any>(\r\n  refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>\r\n): React.RefCallback<T> {\r\n  return (value) => {\r\n    refs.forEach((ref) => {\r\n      if (typeof ref === \"function\") {\r\n        ref(value);\r\n      } else if (ref != null) {\r\n        (ref as React.MutableRefObject<T | null>).current = value;\r\n      }\r\n    });\r\n  };\r\n}","import React from \"react\";\r\nimport { Line } from \"react-konva\";\r\nimport { isIndicatorDataset } from \"../Types/CChartTypes\";\r\nimport { CalculatedChartStateType, isIndicatorGraph } from \"../Types/CChartStateTypes\";\r\nimport { isNullish } from \"../utils\";\r\n\r\nexport type ClineChartType = {\r\n  fullState: CalculatedChartStateType;\r\n  subchartIdx: number;\r\n  yaxisIdx: number;\r\n  graphIdx: number;\r\n  indSeriesIdx?: number;\r\n};\r\nexport const CLineChart = (props: ClineChartType) => {\r\n  const { fullState, subchartIdx, yaxisIdx, graphIdx, indSeriesIdx: indSeriesIdxIn } = props;\r\n  const indSeriesIdx = isNullish(indSeriesIdxIn) ? 0 : indSeriesIdxIn;\r\n  const yaxis = fullState.subCharts[subchartIdx].yaxis[yaxisIdx];\r\n  const graph = fullState.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx];\r\n  const graphVals: (number | null)[] = [];\r\n  if (Array.isArray(graph.curData) && graph.curData.length > 1) {\r\n    graphVals.push(\r\n      ...(graph.curData\r\n        .map((val, idx) => {\r\n          let price;\r\n          if (isIndicatorDataset(val)) price = val.prices[indSeriesIdx];\r\n          else price = val.close;\r\n          if (price === null) return [null, null];\r\n          return [fullState.xaxis.widthPerTick * idx, fullState.methods.yToPix(price, subchartIdx, 0, 0)];\r\n        })\r\n        .flat()\r\n        .filter((val) => val !== null) as number[])\r\n    );\r\n  }\r\n  const graphValsNN = graphVals.filter((val) => val !== null) as number[];\r\n\r\n  return (\r\n    <Line\r\n      key={`sub${subchartIdx}_graph${graphIdx}`}\r\n      x={fullState.xaxis.pixXStart}\r\n      y={fullState.methods.yToPix(0, subchartIdx, 0) - fullState.subCharts[subchartIdx].bottom}\r\n      points={[...graphValsNN]}\r\n      stroke={isIndicatorGraph(graph) ? graph.style.strokeColor[indSeriesIdx] : graph.style.strokeColor[0]}\r\n      strokeWidth={1}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Shape } from \"react-konva\";\r\nimport { LineChartDataset } from \"../Types/CChartTypes\";\r\nimport { CalculatedChartStateType, isIndicatorGraph } from \"../Types/CChartStateTypes\";\r\n\r\nexport type CBarChartType = {\r\n  fullState: CalculatedChartStateType;\r\n  subchartIdx: number;\r\n  yaxisIdx: number;\r\n  graphIdx: number;\r\n  // stroke: string;\r\n  // strokeWidth: number;\r\n};\r\nexport const CBarChart = (props: CBarChartType) => {\r\n  const { fullState, subchartIdx, yaxisIdx, graphIdx } = props;\r\n  const strokeWidth = 1;\r\n  const graph = fullState.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx];\r\n  return (\r\n    <Shape\r\n      sceneFunc={(context, shape) => {\r\n        context.beginPath();\r\n        (fullState.subCharts[0].yaxis[0].graphs[0].curData as LineChartDataset[]).forEach((dataset, datasetIdx) => {\r\n          if (!dataset.volume) return;\r\n          const xPix = fullState.methods.xToPix(datasetIdx, 0) + fullState.xaxis.pixXStart;\r\n          const yPixVol = Math.round(fullState.methods.yToPix(dataset.volume, subchartIdx, yaxisIdx, 0));\r\n          const yPix0 = Math.round(fullState.methods.yToPix(0, subchartIdx, yaxisIdx, 0));\r\n\r\n          context.moveTo(xPix + 0.5, yPix0 + 0.5);\r\n          context.lineTo(xPix + 0.5, yPixVol + 0.5);\r\n        });\r\n        // (!) Konva specific method, it is very important\r\n        context.closePath();\r\n        context.fillStrokeShape(shape);\r\n      }}\r\n    \r\n      stroke={isIndicatorGraph(graph) ? graph.style.strokeColor[0] : graph.style.strokeColor[0]}\r\n      strokeWidth={strokeWidth}\r\n    />\r\n  );\r\n};\r\n","import { PeriodsConstType } from \"../Types/CChartTimeTypes\";\r\nimport { format, getDate, getHours, getISOWeek, getMinutes, getMonth, getYear } from \"date-fns\";\r\n\r\nexport const getDateString = (date: Date, period: keyof PeriodsConstType): string => {\r\n  switch (period) {\r\n    case \"minutes\":\r\n      return format(date, \"mm\");\r\n    case \"hours\":\r\n      return format(date, \"HH\");\r\n    case \"days\":\r\n      return format(date, \"dd\");\r\n    case \"weeks\":\r\n      return format(date, \"dd\");\r\n    case \"months\":\r\n      return format(date, \"MMM\");\r\n    case \"years\":\r\n      return format(date, \"yyyy\");\r\n    default:\r\n      return \"|\";\r\n  }\r\n}; \r\n\r\nexport const getDateSubValue = (date: Date, period: keyof PeriodsConstType): number => {\r\n  switch (period) {\r\n    case \"minutes\":\r\n      return getMinutes(date);\r\n    case \"hours\":\r\n      return getHours(date);\r\n    case \"days\":\r\n      return getDate(date);\r\n    case \"weeks\":\r\n      return getISOWeek(date);\r\n    case \"months\":\r\n      return getMonth(date);\r\n    case \"years\":\r\n      return getYear(date);\r\n    default:\r\n      return 0;\r\n  }\r\n};\r\nexport const getDateObject = (date: Date) => ({\r\n  minute: getDateSubValue(date, \"minutes\"),\r\n  hour: getDateSubValue(date, \"hours\"),\r\n  day: getDateSubValue(date, \"days\"),\r\n  week: getDateSubValue(date, \"weeks\"),\r\n  month: getDateSubValue(date, \"months\"),\r\n  year: getDateSubValue(date, \"years\"),\r\n});\r\n","import { getDateObject, getDateSubValue } from \"./CChartDateTime\";\r\nimport { ChartPeriodType, DateStatType, PeriodsConstType } from \"../Types/CChartTimeTypes\";\r\nimport { DataSeries } from \"../Types/CChartTypes\";\r\nimport { ChartGraphStateType } from \"../Types/CChartStateTypes\";\r\n\r\nexport const chartPeriods: PeriodsConstType = {\r\n  minutes: { period: 60000, scaleMultiplys: [2, 5, 15, 30], range: [60000, 60000] },\r\n  hours: { period: 3600000, scaleMultiplys: [2, 4, 12], range: [3600000, 3600000] },\r\n  days: { period: 86400000, scaleMultiplys: [2], range: [86400000, 86400000] }, // special threatment!\r\n  weeks: { period: 86400000 * 7, scaleMultiplys: [2], range: [259200000, 950400000] }, // only 1 and 2 wheras 2 means 1/2 month\r\n  months: { period: 86400000 * 31, scaleMultiplys: [2, 3, 6], range: [2419200000, 2678400000] }, // months have 28-31 day :/\r\n  years: { period: 86400000 * 365, scaleMultiplys: [], range: [31536000000, 31622400000] },\r\n};\r\n\r\n/** determines chartPeriod (restrictions apply, otherwise return null) based on dataPeriod (dataPeriod repres. period with most occurances) */\r\nexport const getChartPeriod = (dataPeriod: number): ChartPeriodType | null => {\r\n  const dataPeriodKeys = Object.keys(chartPeriods) as (keyof PeriodsConstType)[];\r\n  for (let i = 0; i < dataPeriodKeys.length; i++) {\r\n    const chartPeriodKey = dataPeriodKeys[i];\r\n    const chartPeriod = chartPeriods[chartPeriodKey].period;\r\n    const chartPeriodRange = chartPeriods[chartPeriodKey].range;\r\n    if (typeof chartPeriod === \"number\")\r\n      if (dataPeriod === chartPeriod || (dataPeriod >= chartPeriodRange[0] && dataPeriod <= chartPeriodRange[1]))\r\n        return { chartPeriodName: chartPeriodKey, periodsConstIdx: i, chartPeriod: chartPeriod, multiply: 1 };\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const getOptimalPeriod = (\r\n  data: DataSeries,\r\n  xStart: number,\r\n  xEnd: number,\r\n  metaData: ChartGraphStateType[\"meta\"],\r\n  noDataPortion: number,\r\n  dateStat: DateStatType\r\n): ChartPeriodType | null => {\r\n  if (!metaData.chartPeriod) return null;\r\n  const { chartPeriod, periodsConstIdx, chartPeriodName } = metaData.chartPeriod;\r\n\r\n  // const dateStat = getDateStat(data, xStart, xEnd);\r\n  const nCurrent = xEnd - xStart + 1;\r\n\r\n  const curDateStat = Object.assign({}, dateStat); //{ ...dateStat };\r\n  const nInDateStat = curDateStat.accAmt[chartPeriodName];\r\n  Object.keys(curDateStat.accAmt).forEach((key, keyIdx) => {\r\n    curDateStat.accAmt[key as keyof DateStatType[\"accAmt\"]] =\r\n      (curDateStat.accAmt[key as keyof DateStatType[\"accAmt\"]] / nInDateStat) * nCurrent;\r\n  });\r\n  const targetIntervals = 10 * (1 - noDataPortion);\r\n  let opt = null;\r\n  let optPeriod = chartPeriodName;\r\n  let optMultiply = 1;\r\n  let optConstIdx = 0;\r\n  for (let i = periodsConstIdx; i < Object.keys(chartPeriods).length; i++) {\r\n    const key = Object.keys(chartPeriods)[i] as keyof PeriodsConstType;\r\n    // higherPeriods += key + \", \";\r\n    if (key in curDateStat.accAmt) {\r\n      for (let multiply of [1, ...chartPeriods[key].scaleMultiplys]) {\r\n        if (opt !== null) {\r\n          if (\r\n            Math.abs(curDateStat.accAmt[key] / multiply - targetIntervals) <\r\n            Math.abs(opt / optMultiply - targetIntervals)\r\n          ) {\r\n            opt = curDateStat.accAmt[key];\r\n            optMultiply = multiply;\r\n            optPeriod = key;\r\n          }\r\n        } else {\r\n          // opt is just once null multiply is in first iteration always 1\r\n          opt = curDateStat.accAmt[key];\r\n          optMultiply = multiply;\r\n          optPeriod = key;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    chartPeriodName: optPeriod,\r\n    multiply: optMultiply,\r\n    chartPeriod: chartPeriods[optPeriod].period,\r\n    periodsConstIdx: optConstIdx,\r\n  };\r\n};\r\n\r\nexport const isNewYear = (date: Date, curYearDateStat: DateStatType[\"years\"], periodMultiply: 1 = 1) => {\r\n  // , periodMultiply?: number to be added as parameter -> multiply currently not supported for years\r\n  if (curYearDateStat.length > 1) return false;\r\n  const { day, week, month, year } = getDateObject(date);\r\n  const thisMonthStat = curYearDateStat[0].months[0];\r\n  if (\r\n    thisMonthStat.weeks[0].days[0].day === day &&\r\n    thisMonthStat.weeks[0].week === week &&\r\n    thisMonthStat.month === month\r\n  )\r\n    return true;\r\n  return false;\r\n};\r\n\r\nconst isNewMonth = (\r\n  date: Date,\r\n  curYearDateStat: DateStatType[\"years\"],\r\n  curMonthIdx: number,\r\n  periodMultiply: 1 | 2 | 3 | 6 = 1\r\n) => {\r\n  if (curYearDateStat.length > 1) return false;\r\n  const { day, week, month, year } = getDateObject(date);\r\n  if ((curMonthIdx + 1) % periodMultiply !== 0) return false;\r\n  if (\r\n    curYearDateStat[0].months[curMonthIdx].weeks[0].days[0].day === day &&\r\n    curYearDateStat[0].months[curMonthIdx].weeks[0].week === week\r\n  )\r\n    return true;\r\n  return false;\r\n};\r\n\r\nconst isNewIsoWeek = (\r\n  date: Date,\r\n  curYearDateStat: DateStatType[\"years\"],\r\n  curMonthIdx: number,\r\n  curWeekIdx: number,\r\n  periodMultiply: 1 | 2 = 1\r\n) => {\r\n  if (curYearDateStat.length > 1) return false;\r\n  const { day, week, month, year } = getDateObject(date);\r\n  if (\r\n    curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].days[0].day === day &&\r\n    curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].week === week\r\n  ) {\r\n    if (periodMultiply === 2) {\r\n      let daysInMonth = 0;\r\n      curYearDateStat[0].months[curMonthIdx].weeks.forEach((val) => (daysInMonth += val.days.length));\r\n      let curDays = 0;\r\n      let opt = 0;\r\n      let optWeekIdx = 0;\r\n      const optimalDaysTarget = Math.round(daysInMonth / 2);\r\n      for (let i = 0; i < curYearDateStat[0].months[curMonthIdx].weeks.length; i++) {\r\n        const weekInMonth = curYearDateStat[0].months[curMonthIdx].weeks[i];\r\n        if (Math.abs(curDays + weekInMonth.days.length - optimalDaysTarget) < Math.abs(opt - optimalDaysTarget)) {\r\n          opt = curDays + weekInMonth.days.length;\r\n          optWeekIdx = i + 1;\r\n        }\r\n        curDays += weekInMonth.days.length;\r\n      }\r\n      if (curWeekIdx === optWeekIdx) return true;\r\n      return false;\r\n    } else if (periodMultiply === 1) {\r\n      if (curWeekIdx === 1 && curYearDateStat[0].months[curMonthIdx].weeks[0].days.length < 3) return false;\r\n      if (\r\n        curWeekIdx === curYearDateStat[0].months[curMonthIdx].weeks.length - 1 &&\r\n        curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].days.length < 3\r\n      )\r\n        return false;\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst isNewDay = (\r\n  date: Date,\r\n  curYearDateStat: DateStatType[\"years\"],\r\n  curMonthIdx: number,\r\n  curWeekIdx: number,\r\n  curDayIdx: number,\r\n  periodMultiply: 1 | 2 = 1\r\n) => {\r\n  const day = getDateSubValue(date, \"days\");\r\n  if (curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].days[curDayIdx].day === day && periodMultiply === 1)\r\n    return true;\r\n  if (curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].days[curDayIdx].day === day && periodMultiply === 2) {\r\n    if (curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].days.length <= 3) return false; // weeks with up to 3 days are not diveded\r\n    if (\r\n      (curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].days.length === 4 &&\r\n        (curDayIdx === 0 || curDayIdx === 2)) ||\r\n      (curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].days.length === 5 &&\r\n        (curDayIdx === 0 || curDayIdx === 2)) ||\r\n      (curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].days.length === 6 &&\r\n        (curDayIdx === 0 || curDayIdx === 2 || curDayIdx === 4)) ||\r\n      (curYearDateStat[0].months[curMonthIdx].weeks[curWeekIdx].days.length === 7 &&\r\n        (curDayIdx === 0 || curDayIdx === 2 || curDayIdx === 5))\r\n    )\r\n      return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const isNewPeriod = (\r\n  //   data: ChartData,\r\n  date: Date,\r\n  dateStat: DateStatType,\r\n  chartPeriod: ChartPeriodType,\r\n  optPeriod: ChartPeriodType\r\n  //   xStart: number,\r\n  //   xEnd: number\r\n) => {\r\n  if (!chartPeriod || !optPeriod || !dateStat) return null;\r\n  const { chartPeriodName: optPeriodName, multiply: optMultiply } = optPeriod;\r\n  const year = getDateSubValue(date, \"years\");\r\n  const month = getDateSubValue(date, \"months\");\r\n  const week = getDateSubValue(date, \"weeks\");\r\n  const day = getDateSubValue(date, \"days\");\r\n\r\n  const curYearStat = dateStat.years.filter((e) => e.year === year);\r\n  // console.log(month, curYearStat, dateStat);\r\n  const curMonthStat = curYearStat[0].months.filter((e) => e.month === month);\r\n  const curMonthStatIdx = curYearStat[0].months.indexOf(curMonthStat[0]);\r\n\r\n  const curWeekStat = curMonthStat[0].weeks.filter((e) => e.week === week);\r\n  const curWeekStatIdx = curYearStat[0].months[curMonthStatIdx].weeks.indexOf(curWeekStat[0]);\r\n  const curDayStat = curWeekStat[0].days.filter((e) => e.day === day);\r\n  const curDayStatIdx = curYearStat[0].months[curMonthStatIdx].weeks[curWeekStatIdx].days.indexOf(curDayStat[0]);\r\n\r\n  if (chartPeriod.chartPeriodName === optPeriodName && optMultiply === 1) return optPeriodName;\r\n  // if (chartPeriod.chartPeriodName === optPeriodName && optMultiply !== 1) return optPeriodName; //// TODO\r\n  if (optPeriodName === \"days\") {\r\n    if (isNewYear(date, curYearStat)) return \"years\";\r\n    if (isNewMonth(date, curYearStat, curMonthStatIdx, 1)) return \"months\";\r\n    if (isNewIsoWeek(date, curYearStat, curMonthStatIdx, curWeekStatIdx, optMultiply as 1 | 2)) return \"weeks\";\r\n    if (isNewDay(date, curYearStat, curMonthStatIdx, curWeekStatIdx, curDayStatIdx, optMultiply as 1 | 2))\r\n      return \"days\";\r\n    return null;\r\n  }\r\n  if (optPeriodName === \"weeks\") {\r\n    if (isNewYear(date, curYearStat)) return \"years\";\r\n    if (isNewMonth(date, curYearStat, curMonthStatIdx, 1)) return \"months\";\r\n    if (isNewIsoWeek(date, curYearStat, curMonthStatIdx, curWeekStatIdx, optMultiply as 1 | 2)) return optPeriodName;\r\n    return null;\r\n  }\r\n  if (optPeriodName === \"months\") {\r\n    if (curMonthStat[0].weeks[0].days[0].day === day) return optPeriodName;\r\n    else return null;\r\n  }\r\n  if (optPeriodName === \"years\") {\r\n    if (curYearStat[0].months[0].weeks[0].days[0].day === day) return optPeriodName;\r\n    return null;\r\n  }\r\n  return null;\r\n};\r\n","import { getISOWeek } from \"date-fns\";\r\nimport { getDateStat } from \"./Time/CChartDateStat\";\r\nimport { getDateSubValue } from \"./Time/CChartDateTime\";\r\nimport { getChartPeriod } from \"./Time/CChartPeriod\";\r\nimport {\r\n  DataSeries,\r\n  ChartDataset,\r\n  IndicatorDataset,\r\n  isCandleChartDataset,\r\n  IndicatorDataSeries,\r\n} from \"./Types/CChartTypes\";\r\nimport {\r\n  isIndicatorGraph,\r\n  SubchartStateType,\r\n  YaxisStateType,\r\n  AdditionalIndicatorGraphStateType,\r\n  IndicatorGraphStateType,\r\n  ChartGraphStateType,\r\n  GraphStateType,\r\n} from \"./Types/CChartStateTypes\";\r\nimport { getDecimals } from \"./utils\";\r\n// import { getDataDateStat } from \"./CChartDate\";\r\n// import { CandleChartDataset, CChartViewerInternalState, ChartDataset, GraphProps } from \"./CChartViewer\";\r\n\r\nexport const getGraphMetaData = (\r\n  dataSeries: ChartDataset[]\r\n): ChartGraphStateType[\"meta\"] & { decimals: number; isDescending: boolean } => {\r\n  // get nData\r\n  const nData = dataSeries.length;\r\n\r\n  // local function, ts seems not to accept Date types as number\r\n  const getDeltaT = (dataPoint1: ChartDataset, dataPoint0: ChartDataset) =>\r\n    (dataPoint1.date as unknown as number) - (dataPoint0.date as unknown as number);\r\n\r\n  // loop data -> guess period, tradingDaysPerWeek (and confidence level=occurences in percent) and get decimals\r\n  const dT1 = getDeltaT(dataSeries[1], dataSeries[0]);\r\n  let deltaPeriods = [{ dT: dT1, amt: 1 }];\r\n  let decimals = 0;\r\n  let curWeek = getDateSubValue(dataSeries[0].date, \"weeks\"); //  getISOWeek(dataSeries[0].date);\r\n  let curYear = getDateSubValue(dataSeries[0].date, \"years\"); //dataSeries[0].date.getFullYear();\r\n  let curWeekDays = 0;\r\n  let weekDays: { amtDays: number; occ: number }[] = [];\r\n  for (let i = 0; i < nData; i++) {\r\n    // heuristic guess of period using simple stat of delta Periods (N=n-1)\r\n    if (i >= 2) {\r\n      // start with 2, iteration i=1 is done outside for loop\r\n      const deltaPeriod = getDeltaT(dataSeries[i], dataSeries[i - 1]);\r\n      // loop thru deltaPeriods already determined in prev iterations\r\n      for (let j = 0; j < deltaPeriods.length; j++) {\r\n        const savedDeltaPeriod = deltaPeriods[j];\r\n        if (savedDeltaPeriod.dT === deltaPeriod) {\r\n          deltaPeriods[j].amt++;\r\n          break;\r\n        } else if (j === deltaPeriods.length - 1) deltaPeriods.push({ dT: deltaPeriod, amt: 1 });\r\n      }\r\n    }\r\n    // heuristic guess of tradingDaysPerWeek\r\n    const iDataWeek = getISOWeek(dataSeries[i].date);\r\n    const iyear = getDateSubValue(dataSeries[i].date, \"years\"); //.getFullYear(); ;\r\n    if (iDataWeek > curWeek || iyear > curYear || i === nData - 1) {\r\n      // eslint-disable-next-line no-loop-func\r\n      const weekDaysFiltered = weekDays.filter((e) => e.amtDays === curWeekDays);\r\n      if (weekDaysFiltered.length > 0) {\r\n        if (weekDaysFiltered.length > 1) console.log(\"warning - internal error determing GraphMetaData\");\r\n        const weekDayIdx = weekDays.indexOf(weekDaysFiltered[0]);\r\n        weekDays[weekDayIdx].occ++;\r\n      } else if (weekDaysFiltered.length === 0) {\r\n        weekDays.push({ amtDays: curWeekDays, occ: 1 });\r\n      }\r\n      curWeek = iDataWeek;\r\n      curWeekDays = 1;\r\n      curYear = iyear;\r\n    } else {\r\n      curWeekDays++;\r\n    }\r\n\r\n    if (!dataSeries[i].close) console.log(\"hier ist was falsch\", i);\r\n\r\n    // determine max amount of decimals found in data\r\n    const datasetDecimals = [getDecimals(dataSeries[i].close)];\r\n    const curDataset = dataSeries[i]; //ts seems not to cast\r\n    if (isCandleChartDataset(curDataset)) {\r\n      datasetDecimals.push(getDecimals(curDataset.open));\r\n      datasetDecimals.push(getDecimals(curDataset.high));\r\n      datasetDecimals.push(getDecimals(curDataset.low));\r\n    }\r\n    const maxDecimals = Math.max(...datasetDecimals);\r\n    if (maxDecimals > decimals) decimals = maxDecimals;\r\n  }\r\n\r\n  // extract desired period data from deltaPeriod stat\r\n  let deltaTs = deltaPeriods.map((item) => item.dT);\r\n  let amts = deltaPeriods.map((item) => item.amt);\r\n  let maxIdx = amts.reduce((maxIdx, val, i, arr) => (val > arr[maxIdx] ? i : maxIdx), 0); //\r\n  // extract desired tradingDaysPerWeek data from weekDays stat\r\n  const maxDaysPerWeekOccurences = weekDays.map((val) => val.occ);\r\n  let totalOcc = 0;\r\n  weekDays.forEach((val) => (totalOcc += val.occ));\r\n  const maxDaysPerWeekOccIdx = maxDaysPerWeekOccurences.reduce(\r\n    (maxIdx, val, i, arr) => (val > arr[maxIdx] ? i : maxIdx),\r\n    0\r\n  );\r\n  const maxDaysPerWeek = weekDays[maxDaysPerWeekOccIdx].amtDays;\r\n  const maxDaysPerWeekGuessConfidence = weekDays[maxDaysPerWeekOccIdx].occ / totalOcc;\r\n  const isDesc = deltaTs[maxIdx] < 0;\r\n\r\n  // get chartperiod\r\n  console.log(deltaTs[maxIdx]);\r\n  const dataPeriod = Math.abs(deltaTs[maxIdx]);\r\n  const chartPeriod = getChartPeriod(dataPeriod);\r\n  return {\r\n    nData: nData,\r\n    dataPeriod: dataPeriod,\r\n    chartPeriod: chartPeriod,\r\n    periodGuessConfidence: amts[maxIdx] / nData,\r\n    tradingDaysPerWeek: maxDaysPerWeek,\r\n    tradingDaysPerWeekGuessConfidence: maxDaysPerWeekGuessConfidence,\r\n    type: \"candlechart\",\r\n    decimals: decimals,\r\n    isDescending: isDesc,\r\n  };\r\n};\r\n\r\nexport const createSubChartModel = (\r\n  top: number,\r\n  bottom: number,\r\n  chartData: ChartDataset[],\r\n  chartName: string,\r\n  style?: ChartGraphStateType[\"style\"] | IndicatorGraphStateType[\"style\"],\r\n  indicator?: AdditionalIndicatorGraphStateType[\"indicator\"]\r\n): SubchartStateType => {\r\n  return {\r\n    yaxis: [createYaxisModel(chartData, chartName, style, indicator)],\r\n    top: top,\r\n    bottom: bottom,\r\n  };\r\n};\r\n\r\nexport const createYaxisModel = (\r\n  chartData: ChartDataset[],\r\n  chartName: string,\r\n  style?: ChartGraphStateType[\"style\"] | IndicatorGraphStateType[\"style\"],\r\n  indicator?: AdditionalIndicatorGraphStateType[\"indicator\"]\r\n): YaxisStateType => {\r\n  const newGraph = !!indicator\r\n    ? createIndicatorGraphModel(chartData, chartName, indicator, style as IndicatorGraphStateType[\"style\"])\r\n    : createChartGraphModel(chartData, chartName, style as ChartGraphStateType[\"style\"]);\r\n  return {\r\n    graphs: [{ ...(newGraph as any) }],\r\n    decimals: newGraph.decimals,\r\n    tools: [],\r\n    translatedY: 0,\r\n    optIntervalY: 0,\r\n    heightPerPt: 0,\r\n    drawTicks: [],\r\n  };\r\n};\r\n\r\nexport const createChartGraphModel = (\r\n  chartData: ChartDataset[],\r\n  chartName: string,\r\n  style?: GraphStateType[\"style\"]\r\n): ChartGraphStateType => {\r\n  const { decimals, isDescending, ...graphProps } = getGraphMetaData(chartData);\r\n  if (isDescending) chartData.reverse();\r\n  const dateStat = getDateStat(chartData, 0, chartData.length - 1);\r\n  return {\r\n    data: chartData,\r\n    meta: graphProps,\r\n    // dateStat: dateStat,\r\n    style: {\r\n      strokeColor: [\"#000\"],\r\n      candleStrokeColor: \"#666\",\r\n      candleDownColor: \"rgb(199, 0, 57)\",\r\n      candleUpColor: \"#009688\",\r\n      ...style,\r\n    },\r\n    yMax: 0,\r\n    yMaxExact: 0,\r\n    yMin: 0,\r\n    yMinExact: 0,\r\n    // drawPixXy: [],\r\n    datasets: { first: null, last: null },\r\n    dateStat: dateStat,\r\n    type: \"chart\",\r\n    name: chartName,\r\n    decimals: decimals,\r\n  };\r\n};\r\nexport const createIndicatorGraphModel = (\r\n  chartData: ChartDataset[],\r\n  chartName: string,\r\n  indicator: AdditionalIndicatorGraphStateType[\"indicator\"],\r\n  style?: IndicatorGraphStateType[\"style\"]\r\n): IndicatorGraphStateType => {\r\n  const indicatorData: IndicatorDataSeries = indicator.indicatorFn?.(\r\n    chartData,\r\n    chartName,\r\n    ...indicator.params.map((val) => val.val)\r\n  );\r\n  const { decimals: decimalsData, ...graphProps } = getGraphMetaData(chartData); //only decimals necessary!\r\n  const decimals = !!indicator.default.decimals ? indicator.default.decimals : decimalsData;\r\n  // const dateStat = getDateStat(chartData, 0, chartData.length - 1);\r\n  return {\r\n    data: indicatorData,\r\n    type: \"indicator\",\r\n    name: indicator.name, //chartName,\r\n    decimals: decimals,\r\n    style: {\r\n      ...style,\r\n      strokeColor: style?.strokeColor || [\"#00ffff\"],\r\n    },\r\n    yMax: 0,\r\n    yMaxExact: 0,\r\n    yMin: 0,\r\n    yMinExact: 0,\r\n    // drawPixXy: [],\r\n    datasets: { first: null, last: null },\r\n    indicator,\r\n  };\r\n};\r\n","import { getDateSubValue } from \"./CChartDateTime\";\r\nimport {\r\n  DateStatType,\r\n  PeriodsConstType,\r\n  DateStatYearType,\r\n  DateStatMonthType,\r\n  DateStatWeekType,\r\n  DateStatDayType,\r\n  DateStatHourType,\r\n  DateStatMinuteType,\r\n} from \"../Types/CChartTimeTypes\";\r\nimport { DataSeries } from \"../Types/CChartTypes\";\r\n\r\nexport const getDateStat = (data: DataSeries, xStart: number, xEnd: number) => {\r\n  let stat: DateStatType = { years: [], accAmt: { years: 0, months: 0, weeks: 0, days: 0, hours: 0, minutes: 0 } };\r\n\r\n  const makeSingleDayStat = (day: number, hour?: number, minute?: number): DateStatDayType => ({\r\n    day: day,\r\n    hours: (!!hour || hour === 0) && (!!minute || minute === 0) ? [makeSingleHourStat(hour, minute)] : [],\r\n  });\r\n  const makeSingleWeekStat = (week: number, day: number, hours?: number, minutes?: number): DateStatWeekType => ({\r\n    week: week,\r\n    days: [makeSingleDayStat(day, hours, minutes)],\r\n  });\r\n  const makeSingleMonthStat = (\r\n    month: number,\r\n    week: number,\r\n    day: number,\r\n    hours?: number,\r\n    minutes?: number\r\n  ): DateStatMonthType => ({\r\n    month: month,\r\n    weeks: [makeSingleWeekStat(week, day, hours, minutes)],\r\n  });\r\n  const makeSingleYearStat = (\r\n    year: number,\r\n    month: number,\r\n    week: number,\r\n    day: number,\r\n    hours?: number,\r\n    minutes?: number\r\n  ): DateStatYearType => ({\r\n    year: year,\r\n    months: [makeSingleMonthStat(month, week, day, hours, minutes)],\r\n  });\r\n\r\n  const makeSingleHourStat = (hour: number, minute: number): DateStatHourType => ({\r\n    hour,\r\n    minutes: !!minute || minute === 0 ? [makeSingleMinuteStat(minute)] : [],\r\n  });\r\n  const makeSingleMinuteStat = (minute: number): DateStatMinuteType => ({ minute });\r\n\r\n  const incrementPeriodAccAmt = (period: keyof PeriodsConstType) => {\r\n    if (period === \"years\") stat.accAmt.years++;\r\n    if ([\"years\", \"months\"].includes(period)) stat.accAmt.months++;\r\n    if ([\"years\", \"months\", \"weeks\"].includes(period)) stat.accAmt.weeks++;\r\n    if ([\"years\", \"months\", \"weeks\", \"days\"].includes(period)) stat.accAmt.days++;\r\n    if ([\"years\", \"months\", \"weeks\", \"days\", \"hours\"].includes(period)) stat.accAmt.hours++;\r\n    if ([\"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\"].includes(period)) stat.accAmt.minutes++;\r\n  };\r\n\r\n  for (let i = xStart; i <= xEnd; i++) {\r\n    const year = getDateSubValue(data[i].date, \"years\");\r\n    const month = getDateSubValue(data[i].date, \"months\");\r\n    const week = getDateSubValue(data[i].date, \"weeks\");\r\n    const day = getDateSubValue(data[i].date, \"days\");\r\n    const hours = getDateSubValue(data[i].date, \"hours\");\r\n    const minutes = getDateSubValue(data[i].date, \"minutes\");\r\n    // console.log(year, month, week, day, \"h: \", hours, \"min\", minutes)\r\n\r\n    const addPeriod = (period: keyof PeriodsConstType, curStatIdx: number[]) => {\r\n      if (period === \"years\") stat.years.push(makeSingleYearStat(year, month, week, day));\r\n      if (period === \"months\") stat.years[curStatIdx[0]].months.push(makeSingleMonthStat(month, week, day));\r\n      if (period === \"weeks\") stat.years[curStatIdx[0]].months[curStatIdx[1]].weeks.push(makeSingleWeekStat(week, day));\r\n      if (period === \"days\")\r\n        stat.years[curStatIdx[0]].months[curStatIdx[1]].weeks[curStatIdx[2]].days.push(makeSingleDayStat(day));\r\n      if (period === \"hours\")\r\n        stat.years[curStatIdx[0]].months[curStatIdx[1]].weeks[curStatIdx[2]].days[curStatIdx[3]].hours.push(\r\n          makeSingleHourStat(hours, minutes)\r\n        );\r\n      if (period === \"minutes\")\r\n        stat.years[curStatIdx[0]].months[curStatIdx[1]].weeks[curStatIdx[2]].days[curStatIdx[3]].hours[\r\n          curStatIdx[4]\r\n        ].minutes.push(makeSingleMinuteStat(minutes));\r\n    };\r\n\r\n    const addOrIncrementPeriod = (\r\n      period: keyof PeriodsConstType,\r\n      periodStat: DateStatType,\r\n      curStatIdx: number[] = []\r\n    ): null | true => {\r\n      // search current Data's date in stat (resp it's sub-period-value)\r\n      let periodStatFilter:\r\n        | DateStatYearType[]\r\n        | DateStatDayType[]\r\n        | DateStatWeekType[]\r\n        | DateStatMonthType[]\r\n        | DateStatHourType[]\r\n        | DateStatMinuteType[]\r\n        | null = null;\r\n      let filteredStatIdx = -1;\r\n      if (period === \"years\") {\r\n        periodStatFilter = (periodStat.years as DateStatYearType[]).filter((e) => e.year === year);\r\n        if (0 in periodStatFilter) filteredStatIdx = stat.years.indexOf(periodStatFilter[0]);\r\n      } else if (period === \"months\") {\r\n        if (curStatIdx.length < 1) return null;\r\n        const monthsStat = periodStat.years[curStatIdx[0]].months as DateStatMonthType[];\r\n        periodStatFilter = monthsStat.filter((e) => e.month === month);\r\n        if (0 in periodStatFilter) filteredStatIdx = stat.years[curStatIdx[0]].months.indexOf(periodStatFilter[0]);\r\n      } else if (period === \"weeks\") {\r\n        if (curStatIdx.length < 2) return null;\r\n        const weeksStat = periodStat.years[curStatIdx[0]].months[curStatIdx[1]].weeks as DateStatWeekType[];\r\n        periodStatFilter = weeksStat.filter((e) => e.week === week);\r\n        if (0 in periodStatFilter)\r\n          filteredStatIdx = stat.years[curStatIdx[0]].months[curStatIdx[1]].weeks.indexOf(periodStatFilter[0]);\r\n      } else if (period === \"days\") {\r\n        if (curStatIdx.length < 3) return null;\r\n        const daysStat = periodStat.years[curStatIdx[0]].months[curStatIdx[1]].weeks[curStatIdx[2]]\r\n          .days as DateStatDayType[];\r\n        periodStatFilter = daysStat.filter((e) => e.day === day);\r\n        if (0 in periodStatFilter)\r\n          filteredStatIdx = stat.years[curStatIdx[0]].months[curStatIdx[1]].weeks[curStatIdx[2]].days.indexOf(\r\n            periodStatFilter[0]\r\n          );\r\n      } else if (period === \"hours\") {\r\n        if (curStatIdx.length < 4) return null;\r\n        const hoursStat = periodStat.years[curStatIdx[0]].months[curStatIdx[1]].weeks[curStatIdx[2]].days[curStatIdx[3]]\r\n          .hours as DateStatHourType[];\r\n        periodStatFilter = hoursStat.filter((e) => e.hour === hours);\r\n        if (0 in periodStatFilter)\r\n          filteredStatIdx = stat.years[curStatIdx[0]].months[curStatIdx[1]].weeks[curStatIdx[2]].days[\r\n            curStatIdx[3]\r\n          ].hours.indexOf(periodStatFilter[0]);\r\n      } else if (period === \"minutes\") {\r\n        if (curStatIdx.length < 5) return null;\r\n        const minsStat = periodStat.years[curStatIdx[0]].months[curStatIdx[1]].weeks[curStatIdx[2]].days[curStatIdx[3]]\r\n          .hours[curStatIdx[4]].minutes as DateStatMinuteType[];\r\n        periodStatFilter = minsStat.filter((e) => e.minute === minutes);\r\n        if (0 in periodStatFilter)\r\n          filteredStatIdx = stat.years[curStatIdx[0]].months[curStatIdx[1]].weeks[curStatIdx[2]].days[\r\n            curStatIdx[3]\r\n          ].hours[curStatIdx[4]].minutes.indexOf(periodStatFilter[0]);\r\n      }\r\n      if (!periodStatFilter) return null; // will not occure if period is provided acc. to it's type\r\n\r\n      // period doesn't exist yet in stat\r\n      if (periodStatFilter.length === 0) {\r\n        incrementPeriodAccAmt(period);\r\n        const newPeriodStat =\r\n          period === \"years\"\r\n            ? makeSingleYearStat(year, month, week, day, hours, minutes)\r\n            : period === \"months\"\r\n            ? makeSingleMonthStat(month, week, day, hours, minutes)\r\n            : period === \"weeks\"\r\n            ? makeSingleWeekStat(week, day, hours, minutes)\r\n            : period === \"days\"\r\n            ? makeSingleDayStat(day, hours, minutes)\r\n            : period === \"hours\"\r\n            ? makeSingleHourStat(hours, minutes)\r\n            : period === \"minutes\"\r\n            ? makeSingleMinuteStat(minutes)\r\n            : null;\r\n        if (!newPeriodStat) return null; // will not occure if period is provided acc. to it's type\r\n        addPeriod(period, curStatIdx);\r\n        return true;\r\n      } else {\r\n        // period already exists in stat -> check next lower subperiod\r\n        const nextLowerPeriod =\r\n          period === \"years\"\r\n            ? \"months\"\r\n            : period === \"months\"\r\n            ? \"weeks\"\r\n            : period === \"weeks\"\r\n            ? \"days\"\r\n            : period === \"days\"\r\n            ? \"hours\"\r\n            : period === \"hours\"\r\n            ? \"minutes\"\r\n            : null;\r\n        if (!nextLowerPeriod) return null;\r\n        if (filteredStatIdx === -1) return null;\r\n        return addOrIncrementPeriod(nextLowerPeriod, periodStat, [...curStatIdx, filteredStatIdx]);\r\n      }\r\n    };\r\n    addOrIncrementPeriod(\"years\", stat);\r\n  }\r\n  return stat;\r\n};\r\n","import { createChartGraphModel, createIndicatorGraphModel, createSubChartModel } from \"../CChartModel\";\r\n// import { getGraphColors, graphColorsLight } from \"../Archiv/CChartVals\";\r\nimport { ChartDataSeries, ChartDataset, DataSeries } from \"../Types/CChartTypes\";\r\n\r\nimport {\r\n  AdditionalChartGraphStateType,\r\n  AdditionalIndicatorGraphStateType,\r\n  ChartGraphStateType,\r\n  ChartStateType,\r\n  GraphStateType,\r\n  IndicatorGraphStateType,\r\n  isChartGraph,\r\n  isIndicatorGraph,\r\n} from \"../Types/CChartStateTypes\";\r\nimport { defaultDarkState, defaultState } from \"./CChartState\";\r\nexport type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U];\r\nexport type ExcludeEmpty<T> = T extends AtLeastOne<T> ? T : never;\r\n\r\nexport const graphColorsLight: string[] = [\"#666\", \"#0693E3\", \"#f50057\", \"#00D084\", \"#FF6900\", \"#bd10e0\", \"#bbb\"];\r\nexport const getGraphColors = (colorArr: string[], idx: number) => colorArr[idx % colorArr.length];\r\nexport const getLightGraphColors = (idx: number) => getGraphColors(graphColorsLight, idx);\r\n\r\nexport type ReducerActionTaskType =\r\n  | \"addSubchart\"\r\n  | \"addGraph\"\r\n  | \"clearChart\"\r\n  // | \"draw\"\r\n  | \"setBackgroundColor\"\r\n  | \"setAxisFillColor\"\r\n  | \"setAxisStrokeColor\"\r\n  | \"setAxisTextColor\"\r\n  | \"toggleXaxisGrid\"\r\n  | \"toggleYaxisGrid\"\r\n  | \"setGridStrokeColor\"\r\n  | \"setLineChartStrokeColor\"\r\n  | \"setCandleChartUpColor\"\r\n  | \"setCandleChartDownColor\"\r\n  | \"setCandleChartStrokeColor\"\r\n  | \"setIndicatorParam\"\r\n  | \"updateInteractionState\"\r\n  | \"setToolStrokeColor\"\r\n  | \"setToolchorColor\"\r\n  | \"setHlineYlevel\"\r\n  | \"toggleFullscreen\"\r\n  | \"removeSubchart\"\r\n  | \"removeGraph\"\r\n  | \"toggleDarkMode\"\r\n  | {};\r\n\r\nexport type ReducerActionType<T extends ReducerActionTaskType = {}> = {\r\n  task: T;\r\n  params: T extends \"addSubchart\"\r\n    ? {\r\n        chartSeries: DataSeries;\r\n        chartName: string;\r\n        indicator?: AdditionalIndicatorGraphStateType[\"indicator\"];\r\n        containerHeight: number; // should not be\r\n        reset?: boolean;\r\n      }\r\n    : T extends \"removeSubchart\"\r\n    ? {\r\n        subchartIdx: number;\r\n      }\r\n    : T extends \"removeGraph\"\r\n    ? {\r\n        subchartIdx: number;\r\n        yaxisIdx: number;\r\n        graphIdx: number;\r\n      }\r\n    : T extends \"addGraph\"\r\n    ? {\r\n        chartSeries: DataSeries;\r\n        chartName: string;\r\n        subchartIdx: number;\r\n        indicator?: AdditionalIndicatorGraphStateType[\"indicator\"];\r\n      }\r\n    : T extends \"draw\"\r\n    ? {\r\n        type?: ChartStateType[\"draw\"][\"type\"];\r\n        xy?: [number, number];\r\n        subchartIdx: number;\r\n      }\r\n    : T extends\r\n        | \"setBackgroundColor\"\r\n        | \"setAxisFillColor\"\r\n        | \"setAxisStrokeColor\"\r\n        | \"setAxisTextColor\"\r\n        | \"setGridStrokeColor\"\r\n    ? { color: string }\r\n    : T extends \"toggleXaxisGrid\" | \"toggleYaxisGrid\" | \"toggleFullscreen\" | \"toggleDarkMode\"\r\n    ? {}\r\n    : T extends\r\n        | \"setLineChartStrokeColor\"\r\n        | \"setCandleChartUpColor\"\r\n        | \"setCandleChartDownColor\"\r\n        | \"setCandleChartStrokeColor\"\r\n    ? { color: string; subchartIdx: number; yaxisIdx: number; graphIdx: number }\r\n    : T extends \"setToolStrokeColor\" | \"setToolAnchorColor\"\r\n    ? { color: string; subchartIdx: number; yaxisIdx: number; toolIdx: number }\r\n    : T extends \"setIndicatorParam\"\r\n    ? {\r\n        subchartIdx: number;\r\n        yaxisIdx: number;\r\n        graphIdx: number;\r\n        paramIdx: number;\r\n        val: any;\r\n      }\r\n    : T extends \"setHlineYlevel\"\r\n    ? { subchartIdx: number; yaxisIdx: number; toolIdx: number; val: number }\r\n    : T extends \"updateInteractionState\"\r\n    ? {\r\n        newState: ChartStateType;\r\n      }\r\n    : T extends \"clearChart\"\r\n    ? {\r\n        mode: \"all\" | \"indicators\" | \"tools\";\r\n      }\r\n    : {};\r\n};\r\n\r\nexport const isAddSubchartAction = (action: ReducerActionType): action is ReducerActionType<\"addSubchart\"> =>\r\n  action.task === \"addSubchart\";\r\nexport const isAddGraphAction = (action: ReducerActionType): action is ReducerActionType<\"addGraph\"> =>\r\n  action.task === \"addGraph\";\r\n// export const isDrawAction = (action: ReducerActionType): action is ReducerActionType<\"draw\"> => action.task === \"draw\";\r\nexport const isSetBackgroundColorAction = (\r\n  action: ReducerActionType\r\n): action is ReducerActionType<\"setBackgroundColor\"> => action.task === \"setBackgroundColor\";\r\nexport const isSetAxisFillColorAction = (action: ReducerActionType): action is ReducerActionType<\"setAxisFillColor\"> =>\r\n  action.task === \"setAxisFillColor\";\r\nexport const isSetAxisStrokeColorAction = (\r\n  action: ReducerActionType\r\n): action is ReducerActionType<\"setAxisStrokeColor\"> => action.task === \"setAxisStrokeColor\";\r\nexport const isSetAxisTextColorAction = (action: ReducerActionType): action is ReducerActionType<\"setAxisTextColor\"> =>\r\n  action.task === \"setAxisTextColor\";\r\nexport const isToggleXaxisGridAction = (action: ReducerActionType): action is ReducerActionType<\"toggleXaxisGrid\"> =>\r\n  action.task === \"toggleXaxisGrid\";\r\nexport const isToggleYaxisGridAction = (action: ReducerActionType): action is ReducerActionType<\"toggleYaxisGrid\"> =>\r\n  action.task === \"toggleYaxisGrid\";\r\nexport const isSetLineChartStrokeColor = (\r\n  action: ReducerActionType\r\n): action is ReducerActionType<\"setLineChartStrokeColor\"> => action.task === \"setLineChartStrokeColor\";\r\nexport const isSetCandleChartUpColor = (\r\n  action: ReducerActionType\r\n): action is ReducerActionType<\"setCandleChartUpColor\"> => action.task === \"setCandleChartUpColor\";\r\nexport const isSetCandleChartDownColor = (\r\n  action: ReducerActionType\r\n): action is ReducerActionType<\"setCandleChartDownColor\"> => action.task === \"setCandleChartDownColor\";\r\nexport const isSetCandleChartStrokeColor = (\r\n  action: ReducerActionType\r\n): action is ReducerActionType<\"setCandleChartStrokeColor\"> => action.task === \"setCandleChartStrokeColor\";\r\nexport const isSetIndicatorParam = (action: ReducerActionType): action is ReducerActionType<\"setIndicatorParam\"> =>\r\n  action.task === \"setIndicatorParam\";\r\nexport const isUpdateInteractionState = (\r\n  action: ReducerActionType\r\n): action is ReducerActionType<\"updateInteractionState\"> => action.task === \"updateInteractionState\";\r\nexport const isSetToolStrokeColorAction = (\r\n  action: ReducerActionType\r\n): action is ReducerActionType<\"setToolStrokeColor\"> => action.task === \"setToolStrokeColor\";\r\nexport const isSetToolAnchorColor = (action: ReducerActionType): action is ReducerActionType<\"setToolAnchorColor\"> =>\r\n  action.task === \"setToolAnchorColor\";\r\nexport const isSetHlineYlevelAction = (action: ReducerActionType): action is ReducerActionType<\"setHlineYlevel\"> =>\r\n  action.task === \"setHlineYlevel\";\r\nexport const isDrawAction = (action: ReducerActionType): action is ReducerActionType<\"draw\"> => action.task === \"draw\";\r\nexport const isToggleFullscreenAction = (action: ReducerActionType): action is ReducerActionType<\"toggleFullscreen\"> =>\r\n  action.task === \"toggleFullscreen\";\r\nexport const isRemoveSubchartAction = (action: ReducerActionType): action is ReducerActionType<\"removeSubchart\"> =>\r\n  action.task === \"removeSubchart\";\r\nexport const isRemoveGraphAction = (action: ReducerActionType): action is ReducerActionType<\"removeGraph\"> =>\r\n  action.task === \"removeGraph\";\r\nexport const isSetGridStrokeColorAction = (\r\n  action: ReducerActionType\r\n): action is ReducerActionType<\"setGridStrokeColor\"> => action.task === \"setGridStrokeColor\";\r\nexport const isClearChartAction = (action: ReducerActionType): action is ReducerActionType<\"clearChart\"> =>\r\n  action.task === \"clearChart\";\r\nexport const isDarkModeToggleAction = (action: ReducerActionType): action is ReducerActionType<\"toggleDarkMode\"> =>\r\n  action.task === \"toggleDarkMode\";\r\n\r\nexport const chartStateReducer = <T>(current: ChartStateType, action: ReducerActionType<T>): ChartStateType => {\r\n  // addSubchart\r\n  if (isAddSubchartAction(action)) {\r\n    // currently all new subcharts are indicators!\r\n    const chartSeries = action.params.chartSeries;\r\n    const chartName = action.params.chartName;\r\n    const indicator = action.params.indicator;\r\n    const reset = action.params.reset;\r\n    const containerHeight = action.params.containerHeight;\r\n    const bottom = containerHeight - current.xaxis.heightXAxis;\r\n    const minMainHeight = 250;\r\n    const heightNewSubchart = Math.min(150, (bottom - minMainHeight) / (current.subCharts.length - 1 + 1));\r\n    const top = current.subCharts.length === 0 || reset ? 0 : bottom - Math.round(heightNewSubchart);\r\n    const style = !!indicator\r\n      ? { strokeColor: [getGraphColors(graphColorsLight, 0)] }\r\n      : { strokeColor: getGraphColors(graphColorsLight, 0) };\r\n\r\n    if (current.subCharts.length === 0 || !!reset) {\r\n      console.log(chartSeries.length);\r\n      return {\r\n        ...current,\r\n        xaxis: {\r\n          ...current.xaxis,\r\n          totalTranslatedX:\r\n            -(chartSeries.length + 5 - (current.containerSize.width - 1) / current.xaxis.scaledWidthPerTick) *\r\n            current.xaxis.scaledWidthPerTick,\r\n        },\r\n        subCharts: [\r\n          createSubChartModel(\r\n            top,\r\n            bottom,\r\n            chartSeries as ChartDataset[],\r\n            chartName,\r\n            style as ChartGraphStateType[\"style\"] | IndicatorGraphStateType[\"style\"]\r\n          ),\r\n        ],\r\n      };\r\n    } else {\r\n      const mainHeight = current.subCharts[0].bottom - current.subCharts[0].top;\r\n      const maxHeight =\r\n        mainHeight - heightNewSubchart < minMainHeight\r\n          ? (bottom - minMainHeight - heightNewSubchart) / (current.subCharts.length - 1)\r\n          : null;\r\n\r\n      const subchart = createSubChartModel(\r\n        top,\r\n        bottom,\r\n        chartSeries as ChartDataset[],\r\n        chartName,\r\n        style as ChartGraphStateType[\"style\"] | IndicatorGraphStateType[\"style\"],\r\n        indicator\r\n      );\r\n      const newGraph = subchart.yaxis[0].graphs[0];\r\n\r\n      if (isIndicatorGraph(newGraph) && newGraph.data[newGraph.data.length - 1].prices.length > 1)\r\n        (newGraph as unknown as IndicatorGraphStateType).style.strokeColor = newGraph.data[\r\n          newGraph.data.length - 1\r\n        ].prices.map((x, idx) => getGraphColors(graphColorsLight, idx));\r\n\r\n      return {\r\n        ...current,\r\n        subCharts: [\r\n          ...current.subCharts.map((subChart, subChartIdx) => {\r\n            if (subChartIdx === 0) {\r\n              subChart.bottom = Math.max(subChart.bottom - heightNewSubchart, minMainHeight);\r\n              subChart.top = 0;\r\n            } else if (subChartIdx === current.subCharts.length - 1) {\r\n              subChart.top = current.subCharts[subChartIdx - 1].bottom;\r\n              subChart.bottom = top;\r\n            } else {\r\n              subChart.top = current.subCharts[subChartIdx - 1].bottom;\r\n              subChart.bottom = !!maxHeight\r\n                ? Math.round(subChart.top + maxHeight)\r\n                : subChart.bottom - heightNewSubchart;\r\n            }\r\n            return subChart;\r\n          }),\r\n          subchart,\r\n        ],\r\n      };\r\n    }\r\n  } else if (isRemoveSubchartAction(action)) {\r\n    const subchartIdx = action.params.subchartIdx;\r\n    const dHeight = current.subCharts[subchartIdx].bottom - current.subCharts[subchartIdx].top;\r\n    const dHeightEach = Math.floor(dHeight / (current.subCharts.length - 1));\r\n    const dHeightRest = dHeight % (current.subCharts.length - 1);\r\n    return {\r\n      ...current,\r\n      subCharts: [\r\n        ...current.subCharts.slice(0, subchartIdx).map((subchartSliced, subchartSlicedIdx) => ({\r\n          ...subchartSliced,\r\n          top: subchartSliced.top === 0 ? 0 : subchartSliced.top + dHeightRest + (subchartIdx - 2) * dHeightEach,\r\n          bottom:\r\n            subchartSlicedIdx === 0\r\n              ? subchartSliced.bottom + dHeightEach + dHeightRest\r\n              : subchartSliced.bottom + dHeightEach + dHeightRest + (subchartIdx - 1) * dHeightEach,\r\n        })),\r\n        ...current.subCharts.slice(subchartIdx + 1).map((subchartSliced, subchartSlicedIdx) => ({\r\n          ...subchartSliced,\r\n          top: subchartSliced.top - (subchartSlicedIdx + 1) * dHeightEach,\r\n          bottom:\r\n            subchartSlicedIdx === current.subCharts.slice(subchartIdx + 1).length - 1\r\n              ? subchartSliced.bottom\r\n              : subchartSliced.bottom - (subchartSlicedIdx + 1) * dHeightEach,\r\n        })),\r\n      ],\r\n    };\r\n  } else if (isRemoveGraphAction(action)) {\r\n    const { subchartIdx, yaxisIdx, graphIdx } = action.params;\r\n    if (graphIdx === 0 && current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs.length === 1) {\r\n      // do same like removeSubchart\r\n      const dHeight = current.subCharts[subchartIdx].bottom - current.subCharts[subchartIdx].top;\r\n      const dHeightEach = Math.floor(dHeight / (current.subCharts.length - 1));\r\n      const dHeightRest = dHeight % (current.subCharts.length - 1);\r\n      return {\r\n        ...current,\r\n        subCharts: [\r\n          ...current.subCharts.slice(0, subchartIdx).map((subchartSliced, subchartSlicedIdx) => ({\r\n            ...subchartSliced,\r\n            top: subchartSliced.top === 0 ? 0 : subchartSliced.top + dHeightRest + (subchartIdx - 2) * dHeightEach,\r\n            bottom:\r\n              subchartSlicedIdx === 0\r\n                ? subchartSliced.bottom + dHeightEach + dHeightRest\r\n                : subchartSliced.bottom + dHeightEach + dHeightRest + (subchartIdx - 1) * dHeightEach,\r\n          })),\r\n          ...current.subCharts.slice(subchartIdx + 1).map((subchartSliced, subchartSlicedIdx) => ({\r\n            ...subchartSliced,\r\n            top: subchartSliced.top - (subchartSlicedIdx + 1) * dHeightEach,\r\n            bottom:\r\n              subchartSlicedIdx === current.subCharts.slice(subchartIdx + 1).length - 1\r\n                ? subchartSliced.bottom\r\n                : subchartSliced.bottom - (subchartSlicedIdx + 1) * dHeightEach,\r\n          })),\r\n        ],\r\n      };\r\n    } else {\r\n      return {\r\n        ...current,\r\n        subCharts: [\r\n          ...current.subCharts.slice(0, subchartIdx),\r\n          {\r\n            ...current.subCharts[subchartIdx],\r\n            yaxis: [\r\n              ...current.subCharts[subchartIdx].yaxis.slice(0, yaxisIdx),\r\n              {\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx],\r\n                graphs: [\r\n                  ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs.slice(0, graphIdx),\r\n                  // { ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx] },\r\n                  ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs.slice(graphIdx + 1),\r\n                ],\r\n              },\r\n              ...current.subCharts[subchartIdx].yaxis.slice(yaxisIdx + 1),\r\n            ],\r\n          },\r\n          ...current.subCharts.slice(subchartIdx + 1),\r\n        ],\r\n      };\r\n    }\r\n  } else if (isClearChartAction(action)) {\r\n    const mode = action.params.mode;\r\n    if (mode === \"all\") {\r\n      return {\r\n        ...current,\r\n        subCharts: [\r\n          {\r\n            ...current.subCharts[0],\r\n            yaxis: [{ ...current.subCharts[0].yaxis[0], graphs: [current.subCharts[0].yaxis[0].graphs[0]], tools: [] }],\r\n          },\r\n        ],\r\n      };\r\n    } else if (mode === \"indicators\") {\r\n      return {\r\n        ...current,\r\n        subCharts: [\r\n          {\r\n            ...current.subCharts[0],\r\n            yaxis: [{ ...current.subCharts[0].yaxis[0], graphs: [current.subCharts[0].yaxis[0].graphs[0]] }],\r\n            top: 0,\r\n            bottom: current.containerSize.height - 1 - current.xaxis.heightXAxis,\r\n          },\r\n        ],\r\n      };\r\n    } else if (mode === \"tools\") {\r\n      return {\r\n        ...current,\r\n        subCharts: current.subCharts.map((subchart, subchartIdx) => ({\r\n          ...subchart,\r\n          yaxis: subchart.yaxis.map((yaxis, yaxisIdx) => ({ ...yaxis, tools: [] })),\r\n        })),\r\n      };\r\n    }\r\n  } else if (isAddGraphAction(action)) {\r\n    const chartSeries = action.params.chartSeries;\r\n    const chartName = action.params.chartName;\r\n    const indicator = !!action.params.indicator ? action.params.indicator : null;\r\n    const subchartIdx = action.params.subchartIdx;\r\n    // const style = {\r\n    //   strokeColor: getGraphColors(graphColorsLight, current.subCharts[subchartIdx].yaxis[0].graphs.length),\r\n    // };\r\n    const style = !!indicator\r\n      ? { strokeColor: [getGraphColors(graphColorsLight, current.subCharts[subchartIdx].yaxis[0].graphs.length)] }\r\n      : { strokeColor: getGraphColors(graphColorsLight, current.subCharts[subchartIdx].yaxis[0].graphs.length) };\r\n\r\n    const newGraph = !!indicator\r\n      ? createIndicatorGraphModel(\r\n          chartSeries as ChartDataSeries,\r\n          chartName,\r\n          indicator,\r\n          style as unknown as IndicatorGraphStateType[\"style\"]\r\n        )\r\n      : createChartGraphModel(chartSeries as ChartDataSeries, chartName, style as ChartGraphStateType[\"style\"]);\r\n    const graph = newGraph as GraphStateType;\r\n    if (isIndicatorGraph(graph) && graph.data[newGraph.data.length - 1].prices.length > 1)\r\n      (graph as unknown as IndicatorGraphStateType).style.strokeColor = graph.data[newGraph.data.length - 1].prices.map(\r\n        (x, idx) => getGraphColors(graphColorsLight, idx)\r\n      );\r\n\r\n    return {\r\n      ...current,\r\n      subCharts: [\r\n        ...current.subCharts.map((subChart, subChartIdx) => {\r\n          if (subChartIdx === subchartIdx)\r\n            return {\r\n              ...subChart,\r\n              yaxis: [{ ...subChart.yaxis[0], graphs: [...subChart.yaxis[0].graphs, { ...(newGraph as any) }] }],\r\n            };\r\n          else return subChart;\r\n        }),\r\n      ],\r\n    };\r\n  } else if (isDrawAction(action)) {\r\n    const xy = action.params.xy;\r\n    const subchartIdx = action.params.subchartIdx;\r\n    const defaultDrawState: ChartStateType[\"draw\"] = { isDrawing: false, pixXy: [] };\r\n    const nPoints = !action.params.type\r\n      ? 0\r\n      : [\"hline\", \"vline\"].includes(action.params.type)\r\n      ? 1\r\n      : [\"trendline\"].includes(action.params.type)\r\n      ? 2\r\n      : 0;\r\n    // console.log(\"HI\", xy, subchartIdx, nPoints, action);\r\n\r\n    if (!nPoints || !action.params.type) {\r\n      return { ...current, draw: defaultDrawState };\r\n    }\r\n    // init draw command -> switch to draw mode\r\n    else if (!xy && !!action.params.type) {\r\n      return { ...current, draw: { isDrawing: true, pixXy: [], type: action.params.type } };\r\n    }\r\n    return current;\r\n  } else if (isSetBackgroundColorAction(action)) {\r\n    const color = action.params.color;\r\n    return { ...current, backgroundColor: color };\r\n  } else if (isSetGridStrokeColorAction(action)) {\r\n    const color = action.params.color;\r\n    return {\r\n      ...current,\r\n      grid: { ...current.grid, style: { ...current.grid.style, strokeColor: color } },\r\n    };\r\n  } else if (isSetAxisFillColorAction(action)) {\r\n    const color = action.params.color;\r\n    return {\r\n      ...current,\r\n      xaxis: {\r\n        ...current.xaxis,\r\n        style: { ...current.xaxis.style, fillColor: color },\r\n      },\r\n      yaxis: { ...current.yaxis, style: { ...current.yaxis.style, fillColor: color } },\r\n    };\r\n  } else if (isSetAxisStrokeColorAction(action)) {\r\n    const color = action.params.color;\r\n    return {\r\n      ...current,\r\n      xaxis: {\r\n        ...current.xaxis,\r\n        style: { ...current.xaxis.style, strokeColor: color },\r\n      },\r\n      yaxis: { ...current.yaxis, style: { ...current.yaxis.style, strokeColor: color } },\r\n    };\r\n  } else if (isSetAxisTextColorAction(action)) {\r\n    const color = action.params.color;\r\n    return {\r\n      ...current,\r\n      xaxis: {\r\n        ...current.xaxis,\r\n        style: { ...current.xaxis.style, fontColor: color },\r\n      },\r\n      yaxis: { ...current.yaxis, style: { ...current.yaxis.style, fontColor: color } },\r\n    };\r\n  } else if (isToggleXaxisGridAction(action)) {\r\n    return {\r\n      ...current,\r\n      grid: { ...current.grid, useGridX: !current.grid.useGridX },\r\n    };\r\n  } else if (isToggleYaxisGridAction(action)) {\r\n    return {\r\n      ...current,\r\n      grid: { ...current.grid, useGridY: !current.grid.useGridY },\r\n    };\r\n  } else if (isToggleFullscreenAction(action)) {\r\n    return { ...current, fullscreen: !current.fullscreen };\r\n  } else if (isDarkModeToggleAction(action)) {\r\n    const newDarkMode = !current.darkMode;\r\n    return {\r\n      ...current,\r\n      darkMode: newDarkMode,\r\n      backgroundColor: newDarkMode ? defaultDarkState.backgroundColor : defaultState.backgroundColor,\r\n      grid: {\r\n        ...current.grid,\r\n        style: {\r\n          ...current.grid.style,\r\n          strokeColor: newDarkMode ? defaultDarkState.grid.style.strokeColor : defaultState.grid.style.strokeColor,\r\n        },\r\n      },\r\n    };\r\n  } else if (isSetLineChartStrokeColor(action)) {\r\n    const subchartIdx = action.params.subchartIdx;\r\n    const yaxisIdx = action.params.yaxisIdx;\r\n    const graphIdx = action.params.graphIdx;\r\n    const color = action.params.color;\r\n    const graph = current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx];\r\n    return {\r\n      ...current,\r\n      subCharts: [\r\n        ...current.subCharts.slice(0, subchartIdx),\r\n        {\r\n          ...current.subCharts[subchartIdx],\r\n          yaxis: [\r\n            {\r\n              ...current.subCharts[subchartIdx].yaxis[yaxisIdx],\r\n              graphs: [\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs.slice(0, graphIdx),\r\n                {\r\n                  ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx],\r\n                  style: {\r\n                    ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx].style,\r\n                    strokeColor: [color],\r\n                  },\r\n                },\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs.slice(graphIdx + 1),\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n        ...current.subCharts.slice(subchartIdx + 1),\r\n      ],\r\n    };\r\n  } else if (\r\n    isSetCandleChartUpColor(action) ||\r\n    isSetCandleChartDownColor(action) ||\r\n    isSetCandleChartStrokeColor(action)\r\n  ) {\r\n    const subchartIdx = action.params.subchartIdx;\r\n    const yaxisIdx = action.params.yaxisIdx;\r\n    const graphIdx = action.params.graphIdx;\r\n    const color = action.params.color;\r\n    const prop = isSetCandleChartUpColor(action)\r\n      ? \"candleUpColor\"\r\n      : isSetCandleChartDownColor(action)\r\n      ? \"candleDownColor\"\r\n      : isSetCandleChartStrokeColor(action)\r\n      ? \"candleStrokeColor\"\r\n      : null;\r\n    if (!prop) return current;\r\n    return {\r\n      ...current,\r\n      subCharts: [\r\n        ...current.subCharts.slice(0, subchartIdx),\r\n        {\r\n          ...current.subCharts[subchartIdx],\r\n          yaxis: [\r\n            {\r\n              ...current.subCharts[subchartIdx].yaxis[yaxisIdx],\r\n              graphs: [\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs.slice(0, graphIdx),\r\n                {\r\n                  ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx],\r\n                  style: {\r\n                    ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx].style,\r\n                    [prop]: color,\r\n                  },\r\n                },\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs.slice(graphIdx + 1),\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n        ...current.subCharts.slice(subchartIdx + 1),\r\n      ],\r\n    };\r\n  } else if (isSetToolStrokeColorAction(action) || isSetToolAnchorColor(action)) {\r\n    const subchartIdx = action.params.subchartIdx;\r\n    const yaxisIdx = action.params.yaxisIdx;\r\n    const graphIdx = action.params.toolIdx;\r\n    const color = action.params.color;\r\n    const prop = isSetToolStrokeColorAction(action)\r\n      ? \"strokeColor\"\r\n      : isSetToolAnchorColor(action)\r\n      ? \"anchorColor\"\r\n      : null;\r\n    if (!prop) return current;\r\n    return {\r\n      ...current,\r\n      subCharts: [\r\n        ...current.subCharts.slice(0, subchartIdx),\r\n        {\r\n          ...current.subCharts[subchartIdx],\r\n          yaxis: [\r\n            {\r\n              ...current.subCharts[subchartIdx].yaxis[yaxisIdx],\r\n              tools: [\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].tools.slice(0, graphIdx),\r\n                {\r\n                  ...current.subCharts[subchartIdx].yaxis[yaxisIdx].tools[graphIdx],\r\n                  style: {\r\n                    ...current.subCharts[subchartIdx].yaxis[yaxisIdx].tools[graphIdx].style,\r\n                    [prop]: color,\r\n                  },\r\n                },\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].tools.slice(graphIdx + 1),\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n        ...current.subCharts.slice(subchartIdx + 1),\r\n      ],\r\n    };\r\n  } else if (isSetIndicatorParam(action)) {\r\n    const subchartIdx = action.params.subchartIdx;\r\n    const yaxisIdx = action.params.yaxisIdx;\r\n    const graphIdx = action.params.graphIdx;\r\n    const paramIdx = action.params.paramIdx;\r\n    const val = action.params.val;\r\n\r\n    const indicatorGraph = current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx];\r\n\r\n    if (!isIndicatorGraph(indicatorGraph)) return current;\r\n    const fn = indicatorGraph.indicator.indicatorFn;\r\n    const srcData = current.subCharts[0].yaxis[0].graphs[0].data as ChartDataSeries;\r\n    let params = indicatorGraph.indicator.params.map((val) => val.val);\r\n    params[paramIdx] = val;\r\n    const indicatorData = fn(srcData, indicatorGraph.name, ...params);\r\n    // console.log(\r\n    //   \"HI!! HII!\",\r\n    //   val,\r\n    //   subchartIdx,\r\n    //   yaxisIdx,\r\n    //   graphIdx,\r\n    //   paramIdx,\r\n    //   isIndicatorGraph(indicatorGraph),\r\n    //   params,\r\n    //   indicatorData,\r\n    //   {\r\n    //     ...indicatorGraph.indicator,\r\n    //     params: [\r\n    //       ...indicatorGraph.indicator.params.slice(0, paramIdx),\r\n    //       {\r\n    //         ...indicatorGraph.indicator.params[paramIdx],\r\n    //         val: val,\r\n    //       },\r\n    //       ...indicatorGraph.indicator.params.slice(paramIdx + 1),\r\n    //     ],\r\n    //   }\r\n    // );\r\n    // const newIndicatorGraph = { ...indicatorGraph };\r\n    // newIndicatorGraph.data = indicatorData;\r\n    // newIndicatorGraph.indicator.params[paramIdx].val = val;\r\n    return {\r\n      ...current,\r\n      subCharts: [\r\n        ...current.subCharts.slice(0, subchartIdx),\r\n        {\r\n          ...current.subCharts[subchartIdx],\r\n          yaxis: [\r\n            {\r\n              ...current.subCharts[subchartIdx].yaxis[yaxisIdx],\r\n              graphs: [\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs.slice(0, graphIdx),\r\n                {\r\n                  ...indicatorGraph,\r\n                  data: indicatorData,\r\n                  indicator: {\r\n                    ...indicatorGraph.indicator,\r\n                    params: [\r\n                      ...indicatorGraph.indicator.params.slice(0, paramIdx),\r\n                      {\r\n                        ...indicatorGraph.indicator.params[paramIdx],\r\n                        val: val,\r\n                      },\r\n                      ...indicatorGraph.indicator.params.slice(paramIdx + 1),\r\n                    ],\r\n                  },\r\n                } as any,\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].graphs.slice(graphIdx + 1),\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n        ...current.subCharts.slice(subchartIdx + 1),\r\n      ],\r\n    };\r\n  } else if (isSetHlineYlevelAction(action)) {\r\n    const subchartIdx = action.params.subchartIdx;\r\n    const yaxisIdx = action.params.yaxisIdx;\r\n    const toolIdx = action.params.toolIdx;\r\n    const val = action.params.val as number;\r\n    const anchorX = current.subCharts[subchartIdx].yaxis[yaxisIdx].tools[toolIdx].xy[0][0];\r\n    const newAnchor: [number, number] = [anchorX, val];\r\n    return {\r\n      ...current,\r\n      subCharts: [\r\n        ...current.subCharts.slice(0, subchartIdx),\r\n        {\r\n          ...current.subCharts[subchartIdx],\r\n          yaxis: [\r\n            {\r\n              ...current.subCharts[subchartIdx].yaxis[yaxisIdx],\r\n              tools: [\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].tools.slice(0, toolIdx),\r\n                { ...current.subCharts[subchartIdx].yaxis[yaxisIdx].tools[toolIdx], xy: [newAnchor] },\r\n                ...current.subCharts[subchartIdx].yaxis[yaxisIdx].tools.slice(toolIdx + 1),\r\n              ],\r\n            },\r\n          ],\r\n        },\r\n        ...current.subCharts.slice(subchartIdx + 1),\r\n      ],\r\n    };\r\n  } else if (isUpdateInteractionState(action)) {\r\n    // const nSubcharts = current.subCharts.length;\r\n    return {\r\n      ...current,\r\n      pointer: action.params.newState.pointer,\r\n      containerSize: action.params.newState.containerSize,\r\n      // xaxis: { ...current.xaxis, ...action.params.newState.xaxis },\r\n      subCharts: action.params.newState.subCharts,\r\n      draw: { ...current.draw, ...action.params.newState.draw },\r\n      xaxis: { ...current.xaxis, ...action.params.newState.xaxis },\r\n    };\r\n  }\r\n\r\n  return current;\r\n};\r\n","import { ReducerActionTaskType, ReducerActionType } from \"./CChartStateReducer\";\r\nimport { ChartDataSeries, DataSeries } from \"../Types/CChartTypes\";\r\n\r\nimport {\r\n  AdditionalIndicatorGraphStateType,\r\n  ChartStateType,\r\n  CalculatedChartStateType,\r\n  TypedDispatcher,\r\n} from \"../Types/CChartStateTypes\";\r\nconst addSubchart = (\r\n  chartSeries: DataSeries,\r\n  chartName: string,\r\n  containerHeight: number,\r\n  Dispatch: TypedDispatcher<\"addSubchart\">,\r\n  indicator?: AdditionalIndicatorGraphStateType[\"indicator\"],\r\n  reset?: boolean\r\n) => {\r\n  const action: ReducerActionType<\"addSubchart\"> = {\r\n    task: \"addSubchart\",\r\n    params: { chartSeries, chartName, indicator, containerHeight, reset },\r\n  };\r\n  Dispatch(action);\r\n};\r\n\r\nconst addGraph = (\r\n  chartSeries: DataSeries,\r\n  chartName: string,\r\n  subchartIdx: number,\r\n  Dispatch: TypedDispatcher<\"addGraph\">,\r\n  indicator?: AdditionalIndicatorGraphStateType[\"indicator\"]\r\n) => {\r\n  const action: ReducerActionType<\"addGraph\"> = {\r\n    task: \"addGraph\",\r\n    params: { subchartIdx, chartSeries, indicator, chartName },\r\n  };\r\n  (Dispatch as React.Dispatch<ReducerActionType<\"addGraph\">>)(action);\r\n};\r\n\r\nexport const pixToX = (pixX: number, translated: number, widthPerTick: number) => {\r\n  return (pixX - translated) / widthPerTick;\r\n};\r\n\r\nexport const getChartMethods = (\r\n  ChartState: ChartStateType,\r\n  containerHeight: number,\r\n  Dispatch: TypedDispatcher<ReducerActionTaskType>\r\n): CalculatedChartStateType[\"methods\"] => ({\r\n  addGraph: (\r\n    chartSeries: ChartDataSeries,\r\n    chartName: string,\r\n    subchartIdx: number,\r\n    indicator?: AdditionalIndicatorGraphStateType[\"indicator\"]\r\n  ) => addGraph(chartSeries, chartName, subchartIdx, Dispatch, indicator),\r\n  addSubchart: (\r\n    chartSeries: DataSeries,\r\n    chartName: string,\r\n    indicator?: AdditionalIndicatorGraphStateType[\"indicator\"],\r\n    reset?: boolean\r\n  ) => addSubchart(chartSeries, chartName, containerHeight, Dispatch, indicator, reset),\r\n  getSubchart: (subchartIdx: number) => ChartState.subCharts[subchartIdx],\r\n  getYaxis: (subchartIdx: number, yaxisIdx: number) => ChartState.subCharts[subchartIdx].yaxis[yaxisIdx],\r\n  getGraph: (subchartIdx: number, yaxisIdx: number, graphIdx: number) =>\r\n    ChartState.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx],\r\n  xToPix: (x: number, translatedX?: number) => {\r\n    const { widthPerTick, totalTranslatedX } = ChartState.xaxis;\r\n    const translatedXint = translatedX !== undefined ? translatedX : totalTranslatedX;\r\n    return x * widthPerTick + translatedXint;\r\n  },\r\n  pixToX: (pixX: number, translatedX?: number) => {\r\n    const { widthPerTick, totalTranslatedX } = ChartState.xaxis;\r\n    const translatedXint = translatedX !== undefined ? translatedX : totalTranslatedX;\r\n    return (pixX - translatedXint) / widthPerTick;\r\n  },\r\n  yToPix: (y: number, subchartIdx: number, yaxisIdx: number, translatedY?: number) => {\r\n    const { heightPerPt, decimals, translatedY: stateTranslatedY } = ChartState.subCharts[subchartIdx].yaxis[yaxisIdx];\r\n    const translatedYint = translatedY !== undefined ? translatedY : stateTranslatedY;\r\n    return ChartState.subCharts[subchartIdx].bottom - y * Math.pow(10, decimals) * heightPerPt + translatedYint;\r\n  },\r\n  pixToY: (pixY: number, subchartIdx: number, yaxisIdx: number, translatedY?: number) => {\r\n    const { heightPerPt, decimals, translatedY: stateTranslatedY } = ChartState.subCharts[subchartIdx].yaxis[yaxisIdx];\r\n    const translatedYint = translatedY !== undefined ? translatedY : stateTranslatedY;\r\n    return ((ChartState.subCharts[subchartIdx].bottom + translatedYint - pixY) / heightPerPt) * Math.pow(10, -decimals);\r\n  },\r\n});\r\n","// import { pixToX } from \"../CChart\";\r\nimport { getDateString } from \"../Time/CChartDateTime\";\r\nimport { getOptimalPeriod, isNewPeriod } from \"../Time/CChartPeriod\";\r\nimport { InteractiveXaxisType, ChartGraphStateType, ChartStateType } from \"../Types/CChartStateTypes\";\r\nimport { ChartPeriodType } from \"../Types/CChartTimeTypes\";\r\n\r\nexport const pureXToPix = (x: number, translated: number, widthPerTick: number) => {\r\n  return x * widthPerTick + translated;\r\n};\r\nexport const purePixToX = (pixX: number, translated: number, widthPerTick: number) => {\r\n  return (pixX - translated) / widthPerTick;\r\n};\r\n\r\nexport const getInteractiveXaxisState = (\r\n  currentXaxis: InteractiveXaxisType & { scaleInitWidthPerTick: number | null; scaleInitTranslatedX: number },\r\n  onDrag: ChartStateType[\"pointer\"][\"drag\"],\r\n  wheel: ChartStateType[\"pointer\"][\"wheel\"],\r\n  onMove: ChartStateType[\"pointer\"][\"move\"],\r\n  initWidthTickX: number,\r\n  shallUpdateDrag: boolean,\r\n  clickedChart: boolean,\r\n  clickedXaxis: boolean,\r\n  canvasWidth: number,\r\n  nDatasets: number,\r\n): InteractiveXaxisType & { scaleInitWidthPerTick: number | null; scaleInitTranslatedX: number } => {\r\n  const isWheeling = !!wheel?.isWheeling;\r\n  const wheeldY = wheel?.delta[1];\r\n  const initWheelMousePos = onMove?.xy;\r\n\r\n  const scaleFn = (pixX: number) => {\r\n    const delta =\r\n      Math.round(\r\n        Math.min(\r\n          (Math.max(pixX + 640, 0) * (initWidthTickX - 0.5)) / 640 - (initWidthTickX - 0.5),\r\n          -initWidthTickX + canvasWidth / 3\r\n        ) / 0.5\r\n      ) * 0.5;\r\n    return delta;\r\n  };\r\n\r\n  // console.log(currentXaxis.xEnd - currentXaxis.xStart, currentXaxis.xStart, currentXaxis.xEnd);\r\n  if (!!shallUpdateDrag) {\r\n    const init = onDrag?.initial;\r\n    if (!init) return currentXaxis;\r\n    if (clickedChart && !wheeldY) {\r\n      const totalTranslatedX = !!onDrag?.delta\r\n        ? Math.max(\r\n            Math.min(\r\n              onDrag.delta[0] + currentXaxis.totalTranslatedX,\r\n              canvasWidth - 2 * currentXaxis.scaledWidthPerTick\r\n            ),\r\n            -( (nDatasets - 3) * currentXaxis.scaledWidthPerTick)\r\n          )\r\n        : currentXaxis.totalTranslatedX;\r\n      return { ...currentXaxis, totalTranslatedX };\r\n    } else if (clickedXaxis && !wheeldY) {\r\n      let scaleInitWidthPerTick: number | null = !currentXaxis.scaleInitWidthPerTick\r\n        ? currentXaxis.scaledWidthPerTick\r\n        : currentXaxis.scaleInitWidthPerTick;\r\n      const scaleInitTranslatedX = !currentXaxis.scaleInitTranslatedX\r\n        ? currentXaxis.totalTranslatedX\r\n        : currentXaxis.scaleInitTranslatedX;\r\n      // shall not scale lower than tickWidth of 0.5\r\n      let totalScaleX = !!onDrag?.delta ? currentXaxis.totalScaleX + onDrag?.delta[0] : currentXaxis.totalScaleX;\r\n      totalScaleX = Math.min(\r\n        Math.max(totalScaleX, -640),\r\n        ((-initWidthTickX + canvasWidth / 3 + initWidthTickX - 0.5) * 640) / (initWidthTickX - 0.5) - 640\r\n      );\r\n      const scaledWidthPerTick = initWidthTickX + scaleFn(totalScaleX);\r\n      const translatedXonStart = scaleInitTranslatedX;\r\n      const initPixX = init[0];\r\n      const initXexact = (init[0] - translatedXonStart) / (scaleInitWidthPerTick as number);\r\n      const newPos = initXexact * scaledWidthPerTick + translatedXonStart;\r\n\r\n      const totalTranslatedX = scaleInitTranslatedX - newPos + initPixX;\r\n      if (!onDrag?.isDragging) {\r\n        scaleInitWidthPerTick = null;\r\n      }\r\n      return {\r\n        ...currentXaxis,\r\n        scaleInitWidthPerTick,\r\n        scaleInitTranslatedX,\r\n        totalScaleX,\r\n        scaledWidthPerTick,\r\n        totalTranslatedX,\r\n      };\r\n    }\r\n  } else if (!!isWheeling && !!wheeldY) {\r\n    let scaleInitWidthPerTick: number | null = currentXaxis.scaledWidthPerTick;\r\n    const scaleInitTranslatedX = currentXaxis.totalTranslatedX;\r\n\r\n    // shall not scale lower than tickWidth of 0.5\r\n    let totalScaleX = currentXaxis.totalScaleX + wheeldY / 10;\r\n    totalScaleX = Math.min(\r\n      Math.max(totalScaleX, -640),\r\n      ((-initWidthTickX + canvasWidth / 3 + initWidthTickX - 0.5) * 640) / (initWidthTickX - 0.5) - 640\r\n    );\r\n    const scaledWidthPerTick = initWidthTickX + scaleFn(totalScaleX);\r\n    const translatedXonStart = scaleInitTranslatedX;\r\n    const initPixX = !!initWheelMousePos ? initWheelMousePos[0] : 0;\r\n    const initXexact =\r\n      ((!!initWheelMousePos ? initWheelMousePos[0] : 0) - translatedXonStart) / (scaleInitWidthPerTick as number);\r\n    const newPos = Math.round(initXexact) * scaledWidthPerTick + currentXaxis.totalTranslatedX; //translatedXonStart;\r\n\r\n    const totalTranslatedX = (scaleInitTranslatedX as number) - newPos + initPixX;\r\n    if (!isWheeling) {\r\n      scaleInitWidthPerTick = null;\r\n    }\r\n    return {\r\n      ...currentXaxis,\r\n      scaleInitWidthPerTick,\r\n      scaleInitTranslatedX,\r\n      totalScaleX,\r\n      scaledWidthPerTick,\r\n      totalTranslatedX,\r\n    };\r\n  }\r\n  return currentXaxis;\r\n};\r\n\r\nexport const calculateCurrentXaxis = (\r\n  widthPerTick: number,\r\n  translatedPixX: number,\r\n  containerWidth: number,\r\n  widthYAxis: number,\r\n  mainGraph: ChartGraphStateType | null\r\n): Omit<\r\n  ChartStateType[\"xaxis\"],\r\n  | \"style\"\r\n  | \"heightXAxis\"\r\n  | \"heightTickMarkLines\"\r\n  | \"totalTranslatedX\"\r\n  | \"totalScaleX\"\r\n  | \"scaledWidthPerTick\"\r\n  | \"scaleInitWidthPerTick\"\r\n  | \"scaleInitTranslatedX\"\r\n> => {\r\n  const xAxisTicks: { x: number; dateString: string }[] = [];\r\n\r\n  const xStart = Math.max(Math.ceil(-translatedPixX / widthPerTick), 0);\r\n  const nMainData = mainGraph?.data.length;\r\n  const pixXStart = Math.max(Math.ceil(-translatedPixX / widthPerTick), 0) * widthPerTick + translatedPixX;\r\n  let pixXend = 0,\r\n    xEnd = 0;\r\n  const startNoDataPeriod = Math.abs(Math.min(Math.ceil(-translatedPixX / widthPerTick), 0));\r\n  let endNoDataPeriod = 0;\r\n  let noDataPeriodPortion = 0;\r\n  let optPeriodRes = null;\r\n  if (!!containerWidth && !!widthYAxis && !!nMainData) {\r\n    // pixXend = Math.min(containerWidth - widthYAxis, nMainData * widthPerTick + translatedPixX);\r\n    // xEnd = Math.min(Math.floor((pixXend - translatedPixX) / widthPerTick), nMainData - 1);\r\n    // endNoDataPeriod = Math.max(\r\n    //   Math.floor((containerWidth - widthYAxis - translatedPixX) / widthPerTick) - nMainData,\r\n    //   0\r\n    // );\r\n    pixXend = Math.min(containerWidth, nMainData * widthPerTick + translatedPixX);\r\n    xEnd = Math.min(Math.floor((pixXend - translatedPixX) / widthPerTick), nMainData - 1);\r\n    endNoDataPeriod = Math.max(Math.floor((containerWidth - translatedPixX) / widthPerTick) - nMainData, 0);\r\n\r\n    noDataPeriodPortion = (startNoDataPeriod + endNoDataPeriod) / (xEnd - xStart + startNoDataPeriod + endNoDataPeriod);\r\n    \r\n    if (!!mainGraph) {\r\n      optPeriodRes = getOptimalPeriod(\r\n        mainGraph.data,\r\n        xStart,\r\n        xEnd,\r\n        mainGraph.meta,\r\n        noDataPeriodPortion,\r\n        Object.assign({}, mainGraph.dateStat)\r\n      );\r\n// console.log(mainGraph, optPeriodRes, mainGraph?.meta.chartPeriod);\r\n      if (!!optPeriodRes && !!mainGraph.meta.chartPeriod) {\r\n        let pixXi = pixXStart;\r\n        let xi = xStart;\r\n        while (pixXi < pixXend) {\r\n          const periodToDraw = isNewPeriod(mainGraph.data[xi].date, mainGraph.dateStat, mainGraph.meta.chartPeriod, {\r\n            ...(optPeriodRes as ChartPeriodType),\r\n          });\r\n          if (!periodToDraw) {\r\n            pixXi += widthPerTick;\r\n            xi++;\r\n            continue;\r\n          }\r\n          const dateString = getDateString(mainGraph.data[xi].date, periodToDraw);\r\n          xAxisTicks.push({ x: pixXi, dateString: dateString.toString() });\r\n          pixXi += widthPerTick;\r\n          xi++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    xStart: xStart,\r\n    pixXStart: pixXStart,\r\n    xEnd: xEnd,\r\n    pixXEnd: pixXend,\r\n    widthPerTick,\r\n    startNoDataPeriod,\r\n    endNoDataPeriod,\r\n    noDataPeriodPortion,\r\n    xAxisTicks,\r\n    optPeriodRes,\r\n  };\r\n};\r\n","import { CalculatedChartStateType, ChartStateType, isIndicatorGraph } from \"../Types/CChartStateTypes\";\r\nimport { DataSeries, Dataset, isCandleChartDataset, isIndicatorDataset } from \"../Types/CChartTypes\";\r\nimport { getDecimals, isNullish } from \"../utils\";\r\n\r\nexport const pureYToPix = (y: number, pixYBottom: number, decimals: number, translatedY: number, pixPerPt: number) => {\r\n  return pixYBottom - y * Math.pow(10, decimals) * pixPerPt + translatedY;\r\n};\r\nexport const purePixToY = (\r\n  pixY: number,\r\n  pixYBottom: number,\r\n  decimals: number,\r\n  translatedY: number,\r\n  pixPerPt: number\r\n) => {\r\n  return ((pixYBottom + translatedY - pixY) / pixPerPt) * Math.pow(10, -decimals);\r\n};\r\n\r\nexport const snapPixYToPrices = (\r\n  pixY: number,\r\n  dataset: Dataset,\r\n  subcharts: ChartStateType[\"subCharts\"] | null,\r\n  subchartIdx: number,\r\n  yaxisIdx: number,\r\n  snapTolerance?: number\r\n) => {\r\n  const snapTol = !!snapTolerance ? snapTolerance : 10;\r\n  if (isNullish(pixY) || isNullish(subcharts) || isNullish(subchartIdx) || isNullish(yaxisIdx) || isNullish(dataset))\r\n    return null;\r\n  const prices = [];\r\n  if (isIndicatorDataset(dataset)) {\r\n    if (!!dataset.prices[0]) prices.push(dataset.prices[0]);\r\n  } else {\r\n    if (isCandleChartDataset(dataset)) prices.push(dataset.open, dataset.high, dataset.low, dataset.close);\r\n    else prices.push(dataset.close);\r\n  }\r\n  if (prices.length === 0) return null;\r\n\r\n  let snapRes: { y: string; pixY: number }[] = [];\r\n  prices.forEach((price, priceIdx) => {\r\n    const yPixPrice = pureYToPix(\r\n      price,\r\n      subcharts[subchartIdx].bottom,\r\n      subcharts[subchartIdx].yaxis[yaxisIdx].decimals,\r\n      subcharts[subchartIdx].yaxis[yaxisIdx].translatedY,\r\n      subcharts[subchartIdx].yaxis[yaxisIdx].heightPerPt\r\n    );\r\n    if (yPixPrice >= pixY - snapTol && yPixPrice <= pixY + snapTol) {\r\n      snapRes.push({ y: price.toFixed(getDecimals(price)), pixY: yPixPrice });\r\n    }\r\n  });\r\n\r\n  if (!!snapRes)\r\n    return snapRes.sort((a, b) => {\r\n      if (Math.abs(a.pixY - pixY) < Math.abs(b.pixY - pixY)) return -1;\r\n      else if (Math.abs(a.pixY - pixY) > Math.abs(b.pixY - pixY)) return 1;\r\n      return 0;\r\n    });\r\n  return null;\r\n  // for (let i = 0; i < prices.length; i++) {\r\n  //   const price = prices[i];\r\n  //   const yPixPrice = pureYToPix(\r\n  //     price,\r\n  //     subcharts[subchartIdx].bottom,\r\n  //     subcharts[subchartIdx].yaxis[yaxisIdx].decimals,\r\n  //     subcharts[subchartIdx].yaxis[yaxisIdx].translatedY,\r\n  //     subcharts[subchartIdx].yaxis[yaxisIdx].heightPerPt\r\n  //   );\r\n  //   if (yPixPrice >= pixY - snapTol && yPixPrice <= pixY + snapTol) {\r\n  //     snapRes.push({ y: price.toFixed(getDecimals(price)), pixY: yPixPrice });\r\n  //   }\r\n  // }\r\n  // if (snapRes.length > 0) {\r\n  // }\r\n};\r\n\r\nexport function GetYOptInterval(max: number, min: number, dec: number, targetSteps: number) {\r\n  let initIntervalStep = 1 / Math.pow(10, dec);\r\n  let curIntervalStep = initIntervalStep;\r\n  let optIntervalStep = curIntervalStep;\r\n  const optimizationFunction = (steps: number) => Math.abs((max - min) / steps - targetSteps);\r\n  let optimizer = optimizationFunction(curIntervalStep); // - targetSteps);\r\n\r\n  let i = 0;\r\n  while (curIntervalStep < max - min) {\r\n    for (let j = 0; j <= 2; j++) {\r\n      const factor = j === 0 ? 1 : j === 1 ? 2.5 : 5.0;\r\n      let curOptimizerRes = optimizationFunction(curIntervalStep * factor);\r\n      if (curOptimizerRes < optimizer) {\r\n        optimizer = curOptimizerRes;\r\n        optIntervalStep = curIntervalStep * factor;\r\n      }\r\n    }\r\n    i++;\r\n    curIntervalStep = initIntervalStep * Math.pow(10, i);\r\n  }\r\n  return parseFloat(optIntervalStep.toFixed(dec));\r\n}\r\n\r\nexport const calculateCurrentGraphs = (\r\n  subcharts: ChartStateType[\"subCharts\"] | undefined,\r\n  widthPerTick: number,\r\n  xStart: number,\r\n  xEnd: number,\r\n  pixXstart: number,\r\n  pixXend: number\r\n): CalculatedChartStateType[\"subCharts\"] | null => {\r\n  if (!subcharts) return null;\r\n  if (subcharts.length === 0) return null;\r\n\r\n  const calculatedSubcharts = subcharts;\r\n\r\n  calculatedSubcharts.forEach((subchart, subchartIdx) => {\r\n    const mainYaxis: { pixY: number; label: string }[] = [];\r\n    subchart.yaxis.forEach((yaxis, yaxisIdx) => {\r\n      let yMinExactAllGraphs: number | null = null;\r\n      let yMaxExactAllGraphs: number | null = null;\r\n      let maxDecimals: number = 0;\r\n      yaxis.graphs.forEach((graphM, graphIdx) => {\r\n        const graph = calculatedSubcharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx];\r\n        const data = graph.data;\r\n        graph.datasets.last = {\r\n          data: data[xEnd],\r\n          x: xEnd,\r\n          pixX: pixXend,\r\n          dateString: \"\",\r\n        };\r\n        graph.datasets.first = {\r\n          data: data[xStart],\r\n          x: xStart,\r\n          pixX: pixXstart,\r\n          dateString: \"\",\r\n        };\r\n        const curData = graph.data.filter((val, idx) => idx >= xStart && idx <= xEnd) as DataSeries;\r\n        graph.curData = curData;\r\n        graph.yMaxExact =\r\n          isIndicatorGraph(graph) && !!graph?.indicator?.default?.fixedYScale\r\n            ? graph?.indicator?.default?.fixedYScale[1]\r\n            : Math.max(\r\n                ...curData.map((dataset) => {\r\n                  if (isIndicatorDataset(dataset)) {\r\n                    const max = Math.max(...(dataset.prices.filter((price) => price !== null) as number[]));\r\n                    if (!max && max !== 0) return 0;\r\n                    return max;\r\n                  }\r\n                  if (isCandleChartDataset(dataset)) return dataset.high;\r\n                  return dataset.close;\r\n                })\r\n              );\r\n        graph.yMinExact =\r\n          isIndicatorGraph(graph) && !!graph?.indicator?.default?.fixedYScale\r\n            ? graph?.indicator?.default?.fixedYScale[0]\r\n            : Math.min(\r\n                ...curData.map((dataset) => {\r\n                  if (isIndicatorDataset(dataset)) {\r\n                    const min = Math.min(...(dataset.prices.filter((price) => price !== null) as number[]));\r\n                    if (!min && min !== 0) return 0;\r\n                    return min;\r\n                  }\r\n                  if (isCandleChartDataset(dataset)) return dataset.low;\r\n                  return dataset.close;\r\n                })\r\n              );\r\n        if (yMinExactAllGraphs === null || graph.yMinExact < yMinExactAllGraphs) yMinExactAllGraphs = graph.yMinExact;\r\n        if (yMaxExactAllGraphs === null || graph.yMaxExact > yMaxExactAllGraphs) yMaxExactAllGraphs = graph.yMaxExact;\r\n        if (graph.decimals > maxDecimals) maxDecimals = graph.decimals;\r\n      });\r\n\r\n      // target scale interval should be 75px\r\n      const intervalsTarget = Math.max(Math.round((subchart.bottom - subchart.top) / 75), 3);\r\n      yMaxExactAllGraphs = yMaxExactAllGraphs || 0;\r\n      yMinExactAllGraphs = yMinExactAllGraphs || 0;\r\n      const decimals = maxDecimals;\r\n\r\n      const optIntervalY = GetYOptInterval(yMaxExactAllGraphs, yMinExactAllGraphs, decimals, intervalsTarget);\r\n      yaxis.optIntervalY = optIntervalY;\r\n\r\n      let yMaxAllGraphs: null | number = null;\r\n      let yMinAllGraphs: null | number = null;\r\n      yaxis.graphs.forEach((graph, graphIdx) => {\r\n        graph.yMax = Math.ceil(graph.yMaxExact / optIntervalY) * optIntervalY;\r\n        graph.yMin = Math.floor(graph.yMinExact / optIntervalY) * optIntervalY;\r\n        if (yMaxAllGraphs === null || graph.yMax > yMaxAllGraphs) yMaxAllGraphs = graph.yMax;\r\n        if (yMinAllGraphs === null || graph.yMin < yMinAllGraphs) yMinAllGraphs = graph.yMin;\r\n      });\r\n\r\n      const heightPerPt =\r\n        (subchart.bottom - subchart.top) / ((yMaxAllGraphs || 0) - (yMinAllGraphs || 0)) / Math.pow(10, decimals);\r\n      yaxis.heightPerPt = heightPerPt;\r\n      yaxis.translatedY = -pureYToPix(yMinAllGraphs || 0, subchart.bottom, decimals, 0, heightPerPt) + subchart.bottom;\r\n      let y_bottom = purePixToY(subchart.bottom, subchart.bottom, decimals, yaxis.translatedY, yaxis.heightPerPt);\r\n      let i = pureYToPix(\r\n        Math.ceil(y_bottom / optIntervalY) * optIntervalY,\r\n        subchart.bottom,\r\n        decimals,\r\n        yaxis.translatedY,\r\n        heightPerPt \r\n      );\r\n      const iStart = i; \r\n      while (i >= subchart.top) {\r\n        let yi = purePixToY(i, subchart.bottom, yaxis.decimals, yaxis.translatedY, yaxis.heightPerPt);\r\n        let yvalstr = (Math.round(yi * Math.pow(10, decimals)) / Math.pow(10, decimals)).toString();\r\n        if (i>subchart.top+10 && i <subchart.bottom-10)\r\n        mainYaxis.push({ pixY: i, label: yvalstr });\r\n        i -= (heightPerPt * optIntervalY) / Math.pow(10, -decimals);\r\n      }\r\n      yaxis.drawTicks = mainYaxis;\r\n    });\r\n  });\r\n  return calculatedSubcharts;\r\n};\r\n","import { Vector2 } from \"react-use-gesture/dist/types\";\r\nimport { getDateString } from \"../Time/CChartDateTime\";\r\nimport { getOptimalPeriod, isNewPeriod } from \"../Time/CChartPeriod\";\r\nimport {\r\n  CalculatedChartStateType,\r\n  ChartGraphStateType,\r\n  ChartStateType,\r\n  DrawingTool,\r\n  InteractivePointerType,\r\n  InteractiveXaxisType,\r\n  isChartGraph,\r\n  SubchartStateType,\r\n} from \"../Types/CChartStateTypes\";\r\nimport { ChartPeriodType } from \"../Types/CChartTimeTypes\";\r\nimport { purePixToX, pureXToPix } from \"./CChartStateXaxis\";\r\nimport { purePixToY, pureYToPix, snapPixYToPrices } from \"./CChartStateYaxis\";\r\n\r\nexport const getSubchartIdxByVector = (\r\n  pixXy: [number, number] | undefined,\r\n  subcharts: CalculatedChartStateType[\"subCharts\"]\r\n): number | null => {\r\n  if (!pixXy || !subcharts) return null;\r\n  for (let i = 0; i < subcharts.length; i++) {\r\n    const subchart = subcharts[i];\r\n    if (pixXy[1] >= subchart.top && pixXy[1] < subchart.bottom) return i;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const getSubchartIdxByBottom = (\r\n  pixXy: [number, number] | undefined,\r\n  subcharts: CalculatedChartStateType[\"subCharts\"]\r\n): number | null => {\r\n  if (!pixXy) return null;\r\n  for (let i = 0; i < subcharts.length; i++) {\r\n    const subchart = subcharts[i];\r\n    if (pixXy[1] >= subchart.bottom - 10 && pixXy[1] < subchart.bottom + 10) return i;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst getToolsByXy = (\r\n  pixXy: [number, number] | undefined,\r\n  subcharts: ChartStateType[\"subCharts\"],\r\n  xaxis: InteractiveXaxisType\r\n): [number, number, number, number][] => {\r\n  if (!pixXy || !subcharts || !xaxis) return [];\r\n  const subchartIdx = getSubchartIdxByVector(pixXy, subcharts);\r\n  if (subchartIdx === null) return [];\r\n\r\n  let toolsIdx: [number, number, number, number][] = [];\r\n  const translatedX = xaxis.totalTranslatedX;\r\n  const widthPerTick = xaxis.scaledWidthPerTick;\r\n  subcharts[subchartIdx].yaxis.forEach((singleYaxis, singleYaxisIdx) => {\r\n    const translatedY = singleYaxis.translatedY;\r\n    const heightPerPt = singleYaxis.heightPerPt;\r\n    singleYaxis.tools.forEach((tool, toolIdx) => {\r\n      tool.xy.forEach((anchorXy, anchorIdx) => {\r\n        if (\r\n          pixXy[0] >= pureXToPix(anchorXy[0], translatedX, widthPerTick) - 10 &&\r\n          pixXy[0] <= pureXToPix(anchorXy[0], translatedX, widthPerTick) + 10 &&\r\n          pixXy[1] >=\r\n            pureYToPix(\r\n              anchorXy[1],\r\n              subcharts[subchartIdx].bottom,\r\n              subcharts[subchartIdx].yaxis[singleYaxisIdx].decimals,\r\n              translatedY,\r\n              heightPerPt\r\n            ) -\r\n              10 &&\r\n          pixXy[1] <=\r\n            pureYToPix(\r\n              anchorXy[1],\r\n              subcharts[subchartIdx].bottom,\r\n              subcharts[subchartIdx].yaxis[singleYaxisIdx].decimals,\r\n              translatedY,\r\n              heightPerPt\r\n            ) +\r\n              10\r\n        ) {\r\n          toolsIdx.push([subchartIdx, singleYaxisIdx, toolIdx, anchorIdx]);\r\n        }\r\n      });\r\n    });\r\n  });\r\n  return toolsIdx;\r\n};\r\n\r\nexport const getDragActionType = (\r\n  dragInitXy: [number, number] | undefined,\r\n  subcharts: SubchartStateType[],\r\n  xaxis: InteractiveXaxisType,\r\n  isEditing: boolean,\r\n  isDrawing: boolean,\r\n  canvasWidth: number,\r\n  canvasHeight: number\r\n):\r\n  | null\r\n  | { type: \"translate\" | \"scale\" }\r\n  | { type: \"resizeSubchart\"; res: number; initBottom: number }\r\n  | { type: \"drawTool\"; init: [number, number] }\r\n  | { type: \"editTool\"; res: [number, number, number, number][]; init: [number, number] } => {\r\n  if (!dragInitXy) return null;\r\n  if (isEditing) return null;\r\n\r\n  if (isDrawing) {\r\n    // const editToolPath = getToolsByXy(dragInitXy, subcharts, xaxis); //only initially -> tool xy is changed by editing but dragInitXy isnt adjusted!\r\n    return {\r\n      type: \"drawTool\",\r\n      // res: editToolPath,\r\n      init: dragInitXy,\r\n    };\r\n  }\r\n\r\n  const editToolPath = getToolsByXy(dragInitXy, subcharts, xaxis); //only initially -> tool xy is changed by editing but dragInitXy isnt adjusted!\r\n  if (editToolPath.length > 0)\r\n    return {\r\n      type: \"editTool\",\r\n      res: editToolPath,\r\n      init: subcharts[editToolPath[0][0]].yaxis[editToolPath[0][1]].tools[editToolPath[0][2]].xy[editToolPath[0][3]],\r\n    };\r\n  const resizeSubchartIdx = getSubchartIdxByBottom(dragInitXy, subcharts); // same as above - only initially\r\n  if (resizeSubchartIdx !== null && resizeSubchartIdx !== subcharts.length-1)\r\n    return { type: \"resizeSubchart\", res: resizeSubchartIdx, initBottom: subcharts[resizeSubchartIdx].bottom };\r\n\r\n  const clickedChart =\r\n    dragInitXy[0] >= 0 && dragInitXy[0] < 0 + canvasWidth && dragInitXy[1] >= 0 && dragInitXy[1] < 0 + canvasHeight;\r\n  if (clickedChart) return { type: \"translate\" };\r\n  const clickedXaxis = dragInitXy[0] >= 0 && dragInitXy[0] < 0 + canvasWidth && dragInitXy[1] >= 0 + canvasHeight;\r\n  if (clickedXaxis) return { type: \"scale\" };\r\n  return null;\r\n};\r\n\r\nexport const editToolPosition = (\r\n  dragActionType: { type: \"editTool\"; res: [number, number, number, number][]; init: [number, number] },\r\n  subcharts: ChartStateType[\"subCharts\"],\r\n  xaxis: InteractiveXaxisType,\r\n  pointer: ChartStateType[\"pointer\"]\r\n): ChartStateType[\"subCharts\"] => {\r\n  if (dragActionType.type !== \"editTool\" || dragActionType.res.length === 0 || !dragActionType.init) return subcharts;\r\n  // if (drag.isDragging) {\r\n  const curPixX = !!pointer.chartPointer.move.pixXSnap ? pointer.chartPointer.move.pixXSnap : pointer.drag.xy[0];\r\n  const curPixY =\r\n    pointer.chartPointer.move.snapDatasets.length > 0 && !!pointer.chartPointer.move.snapDatasets[0].pixYSnap\r\n      ? pointer.chartPointer.move.snapDatasets[0].pixYSnap\r\n      : pointer.drag.xy[1];\r\n  const initX = pureXToPix(\r\n    Math.round(purePixToX(pointer.drag.initial[0], xaxis.totalTranslatedX, xaxis.scaledWidthPerTick)),\r\n    xaxis.totalTranslatedX,\r\n    xaxis.scaledWidthPerTick\r\n  );\r\n  const subIdx = dragActionType.res[0][0];\r\n  const yaxisIdx = dragActionType.res[0][1];\r\n\r\n  let datasets: {\r\n    y: number;\r\n    pixY: number;\r\n  }[] = [];\r\n  let yAdjusted = { y: dragActionType.init[1], pixY: pointer.drag.initial[1] };\r\n  subcharts[subIdx].yaxis[yaxisIdx].graphs.forEach((graph, graphIdx) => {\r\n    const localInitY = snapPixYToPrices(pointer.drag.initial[1], graph.data[initX], subcharts, subIdx, yaxisIdx);\r\n    if (!!localInitY && localInitY.length > 0) datasets.push({ ...localInitY[0], y: parseFloat(localInitY[0].y) });\r\n  });\r\n  if (datasets.length > 0) {\r\n    yAdjusted = { y: datasets[0].y, pixY: datasets[0].pixY };\r\n  }\r\n\r\n  const newPixX =\r\n    pureXToPix(dragActionType.init[0], xaxis.totalTranslatedX, xaxis.scaledWidthPerTick) + curPixX - initX;\r\n  const newPixY =\r\n    pureYToPix(\r\n      dragActionType.init[1],\r\n      subcharts[subIdx].bottom,\r\n      subcharts[subIdx].yaxis[yaxisIdx].decimals,\r\n      subcharts[subIdx].yaxis[yaxisIdx].translatedY,\r\n      subcharts[subIdx].yaxis[yaxisIdx].heightPerPt\r\n    ) +\r\n    curPixY -\r\n    yAdjusted.pixY;\r\n  const newX = purePixToX(newPixX, xaxis.totalTranslatedX, xaxis.scaledWidthPerTick);\r\n  const newY = purePixToY(\r\n    newPixY,\r\n    subcharts[subIdx].bottom,\r\n    subcharts[subIdx].yaxis[yaxisIdx].decimals,\r\n    subcharts[subIdx].yaxis[yaxisIdx].translatedY,\r\n    subcharts[subIdx].yaxis[yaxisIdx].heightPerPt\r\n  );\r\n  // console.log(curPixX, curPixY, newPixX, newPixY, newX, newY);\r\n  // console.log(\r\n  //   \"2nd:\",\r\n  //   pureXToPix(\r\n  //     Math.round(purePixToX(pointer.drag.initial[0], xaxis.totalTranslatedX, xaxis.scaledWidthPerTick)),\r\n  //     xaxis.totalTranslatedX,\r\n  //     xaxis.scaledWidthPerTick\r\n  //   ),\r\n  //   purePixToX(pointer.drag.initial[0], 0, 0),\r\n  //   pointer.drag.initial[0]\r\n  // );\r\n  const [toolsSubIdx, toolsYaxisIdx, toolIdx, anchorIdx] = dragActionType.res[0];\r\n  const editedSubcharts: ChartStateType[\"subCharts\"] = [\r\n    ...subcharts.slice(0, toolsSubIdx),\r\n    {\r\n      ...subcharts[toolsSubIdx],\r\n      yaxis: [\r\n        ...subcharts[toolsSubIdx].yaxis.slice(0, toolsYaxisIdx),\r\n        {\r\n          ...subcharts[toolsSubIdx].yaxis[toolsYaxisIdx],\r\n          tools: [\r\n            ...subcharts[toolsSubIdx].yaxis[toolsYaxisIdx].tools.slice(0, toolIdx),\r\n            {\r\n              ...subcharts[toolsSubIdx].yaxis[toolsYaxisIdx].tools[toolIdx],\r\n              xy: [\r\n                ...subcharts[toolsSubIdx].yaxis[toolsYaxisIdx].tools[toolIdx].xy.slice(0, anchorIdx),\r\n                [newX, newY],\r\n                ...subcharts[toolsSubIdx].yaxis[toolsYaxisIdx].tools[toolIdx].xy.slice(anchorIdx + 1),\r\n              ],\r\n            },\r\n            ...subcharts[toolsSubIdx].yaxis[toolsYaxisIdx].tools.slice(toolIdx + 1),\r\n          ],\r\n        },\r\n        ...subcharts[toolsSubIdx].yaxis.slice(toolsYaxisIdx + 1),\r\n      ],\r\n    },\r\n    ...subcharts.slice(toolsSubIdx + 1),\r\n  ];\r\n  return editedSubcharts;\r\n  // }\r\n  // return subcharts;\r\n};\r\n\r\nexport const resizeSubchart = (\r\n  dragActionType: { type: \"resizeSubchart\"; res: number; initBottom: number },\r\n  subcharts: ChartStateType[\"subCharts\"],\r\n  drag: ChartStateType[\"pointer\"][\"drag\"]\r\n): ChartStateType[\"subCharts\"] => {\r\n  if (dragActionType.type !== \"resizeSubchart\" || dragActionType === null) return subcharts;\r\n  // if (drag.isDragging) {\r\n  const subchartIdx = dragActionType.res;\r\n  const newBottom = Math.min(\r\n    Math.max(dragActionType.initBottom + drag.xy[1] - drag.initial[1], subcharts[subchartIdx].top + 10),\r\n    subcharts[subchartIdx + 1].bottom - 10\r\n  );\r\n  // console.log(newBottom);\r\n  return [\r\n    ...subcharts.slice(0, subchartIdx),\r\n    { ...subcharts[subchartIdx], bottom: newBottom },\r\n    { ...subcharts[subchartIdx + 1], top: newBottom },\r\n    ...subcharts.slice(subchartIdx + 2),\r\n  ];\r\n  // }\r\n  // return subcharts;\r\n};\r\n\r\nexport const addToolAnchor = (\r\n  // dragActionType: { type: \"drawTool\"},\r\n  drawToolType: \"hline\" | \"vline\" | \"trendline\" | undefined,\r\n  // subcharts: ChartStateType[\"subCharts\"],\r\n  draw: ChartStateType[\"draw\"],\r\n  pointer: ChartStateType[\"pointer\"]\r\n): ChartStateType[\"draw\"] => {\r\n  const defaultDrawState: ChartStateType[\"draw\"] = { isDrawing: false, pixXy: [] };\r\n\r\n  const curPixX = !!pointer.chartPointer.move.pixXSnap ? pointer.chartPointer.move.pixXSnap : pointer.drag.xy[0];\r\n  const curPixY =\r\n    pointer.chartPointer.move.snapDatasets.length > 0 && !!pointer.chartPointer.move.snapDatasets[0].pixYSnap\r\n      ? pointer.chartPointer.move.snapDatasets[0].pixYSnap\r\n      : pointer.drag.xy[1];\r\n  const dragpixXy: [number, number] = [curPixX, curPixY];\r\n  if (!drawToolType || !draw || !dragpixXy) return defaultDrawState;\r\n  // add temporary anchor point\r\n  return { ...draw, pixXy: [...draw.pixXy, dragpixXy] };\r\n};\r\n\r\nexport const addTool = (\r\n  subcharts: ChartStateType[\"subCharts\"],\r\n  xaxis: InteractiveXaxisType,\r\n  draw: ChartStateType[\"draw\"],\r\n  drag: ChartStateType[\"pointer\"][\"drag\"]\r\n): ChartStateType[\"subCharts\"] => {\r\n  const subchartIdx = getSubchartIdxByVector(drag.initial, subcharts);\r\n  // console.log(subchartIdx, xaxis, draw, draw.type);\r\n  if (subchartIdx === null || !xaxis || !draw || !drag || !draw.type) return subcharts;\r\n  const pixXyArr = draw.pixXy;\r\n  const xyArr = pixXyArr.map((pixXy, pixXyIdx) => [\r\n    purePixToX(pixXy[0], xaxis.totalTranslatedX, xaxis.scaledWidthPerTick),\r\n    purePixToY(\r\n      pixXy[1],\r\n      subcharts[subchartIdx].bottom,\r\n      subcharts[subchartIdx].yaxis[0].decimals,\r\n      subcharts[subchartIdx].yaxis[0].translatedY,\r\n      subcharts[subchartIdx].yaxis[0].heightPerPt\r\n    ),\r\n  ]);\r\n\r\n  return [\r\n    ...subcharts.slice(0, subchartIdx),\r\n    {\r\n      ...subcharts[subchartIdx],\r\n      yaxis: [\r\n        {\r\n          ...subcharts[subchartIdx].yaxis[0],\r\n          tools: [\r\n            ...subcharts[subchartIdx].yaxis[0].tools,\r\n            { xy: xyArr, type: draw.type, style: { strokeColor: \"blue\", anchorColor: \"#333\" } } as DrawingTool,\r\n          ],\r\n        },\r\n        ...subcharts[subchartIdx].yaxis.slice(1),\r\n      ],\r\n    },\r\n    ...subcharts.slice(subchartIdx + 1),\r\n  ];\r\n};\r\n\r\nexport const calculateXPointer = (\r\n  widthPerTick: number,\r\n  translatedPixX: number,\r\n  xaxis: InteractiveXaxisType,\r\n  mainGraph: ChartGraphStateType,\r\n  onMove?: ChartStateType[\"pointer\"][\"move\"]\r\n) => {\r\n  const defaultXpointer = null;\r\n\r\n  if (!mainGraph || !onMove) return defaultXpointer;\r\n  const xIdx = Math.round(purePixToX(onMove?.xy[0] as any, translatedPixX, widthPerTick));\r\n  if (xIdx < 0 || xIdx > mainGraph.data.length - 1) return { xPointerUnlimited: xIdx };\r\n  const xPointer = Math.abs(Math.round(xIdx));\r\n  let xPointerDateStr = \"\";\r\n  const optPeriodRes = getOptimalPeriod(\r\n    mainGraph.data,\r\n    xaxis.xStart,\r\n    xaxis.xEnd,\r\n    mainGraph.meta,\r\n    xaxis.noDataPeriodPortion,\r\n    Object.assign({}, mainGraph.dateStat)\r\n  );\r\n  // console.log(mainGraph, onMove, optPeriodRes, mainGraph.meta.chartPeriod);\r\n  if (!optPeriodRes || !mainGraph.meta.chartPeriod) return defaultXpointer;\r\n\r\n  const periodToDraw = isNewPeriod(mainGraph.data[xPointer].date, mainGraph.dateStat, mainGraph.meta.chartPeriod, {\r\n    ...(optPeriodRes as ChartPeriodType),\r\n  });\r\n  xPointerDateStr = getDateString(\r\n    mainGraph.data[xPointer].date,\r\n    !!periodToDraw ? periodToDraw : mainGraph.meta.chartPeriod.chartPeriodName\r\n  );\r\n  const pixXPointer = pureXToPix(xPointer, translatedPixX, widthPerTick);\r\n  return { xPointer, xPointerDateStr, pixXPointer, xPointerUnlimited: xIdx };\r\n};\r\n\r\nexport const calculateCurrentPointerDataset = (\r\n  subcharts: CalculatedChartStateType[\"subCharts\"] | null,\r\n  xpointer: number | null,\r\n  xpointerUnlimited: number,\r\n  xPointerDateString: string,\r\n  pixXPointer: number,\r\n  onMove: CalculatedChartStateType[\"pointer\"][\"move\"],\r\n  onDragEnd: CalculatedChartStateType[\"pointer\"][\"dragPointerUp\"]\r\n): InteractivePointerType[\"chartPointer\"] | undefined => {\r\n  const xy = onMove?.xy;\r\n  if (!onMove || !subcharts || !xy) return;\r\n\r\n  const getSubchartIdx = (xy: Vector2) => {\r\n    let subchartIdx: number = -1;\r\n    for (let i = 0; i < subcharts.length; i++) {\r\n      const subchart = subcharts[i];\r\n      if (xy[1] >= subchart.top && xy[1] < subchart.bottom) subchartIdx = i;\r\n    }\r\n    return subchartIdx;\r\n  };\r\n  const subchartIdx = getSubchartIdx(xy);\r\n  if (subchartIdx === -1) return;\r\n  const clickedSubchartIdx = !!onDragEnd && !!onDragEnd.xy ? getSubchartIdx(onDragEnd.xy) : null;\r\n\r\n  const snapDatasets: InteractivePointerType[\"chartPointer\"][\"move\"][\"snapDatasets\"] = [];\r\n\r\n  if (xpointer !== null)\r\n    subcharts[subchartIdx].yaxis.forEach((singleYaxis, singleYaxisIdx) => {\r\n      singleYaxis.graphs.forEach((graph, graphIdx) => {\r\n        let ySnap: string | null = null;\r\n        let pixYSnap: number | null = null;\r\n\r\n        const snapPriceRes = snapPixYToPrices(\r\n          onMove?.xy[1],\r\n          graph.data[xpointer],\r\n          subcharts,\r\n          subchartIdx,\r\n          singleYaxisIdx\r\n        );\r\n        if (!!snapPriceRes && snapPriceRes.length > 0) {\r\n          pixYSnap = snapPriceRes[0].pixY;\r\n          ySnap = snapPriceRes[0].y;\r\n        }\r\n\r\n        snapDatasets.push({\r\n          yaxisIdx: singleYaxisIdx,\r\n          graphIdx: graphIdx,\r\n          data: graph.data[xpointer],\r\n          y: purePixToY(\r\n            onMove?.xy[1],\r\n            subcharts[subchartIdx].bottom,\r\n            singleYaxis.decimals,\r\n            singleYaxis.translatedY,\r\n            singleYaxis.heightPerPt\r\n          ),\r\n          ySnap: ySnap,\r\n          pixYSnap: pixYSnap,\r\n          dateString: xPointerDateString,\r\n        });\r\n      });\r\n    });\r\n\r\n  const calcPointerDataset = {\r\n    move: {\r\n      pixX: onMove?.xy[0],\r\n      pixXSnap: pixXPointer,\r\n      pixY: onMove?.xy[1],\r\n      x: xpointer,\r\n      xUnlimited: xpointerUnlimited,\r\n      subchartIdx, //onMove\r\n      snapDatasets: snapDatasets,\r\n      xDateString: xPointerDateString,\r\n    },\r\n    click: {\r\n      clickedSubchartIdx: clickedSubchartIdx, //onDragEnd\r\n    },\r\n  };\r\n  return calcPointerDataset;\r\n};\r\n","import React, { DOMElement } from \"react\";\r\nimport { useGesture } from \"react-use-gesture\";\r\nimport { chartStateReducer, ReducerActionTaskType, ReducerActionType } from \"./CChartStateReducer\";\r\n\r\nimport { getChartMethods } from \"./CChartStateMethods\";\r\nimport { calculateCurrentXaxis, getInteractiveXaxisState } from \"./CChartStateXaxis\";\r\nimport { calculateCurrentGraphs, purePixToY, pureYToPix } from \"./CChartStateYaxis\";\r\nimport { calculateXPointer, calculateCurrentPointerDataset } from \"./CChartStateInteractions\";\r\nimport { purePixToX, pureXToPix } from \"./CChartStateXaxis\";\r\nimport {\r\n  CalculatedChartStateType,\r\n  ChartPreStateRefType,\r\n  ChartStateType,\r\n  InteractiveXaxisType,\r\n  isChartGraph,\r\n  InteractivePointerType,\r\n  userInteractsSubchartStateType,\r\n  UseGestureStateType,\r\n  isIndicatorGraph,\r\n} from \"../Types/CChartStateTypes\";\r\nimport { addTool, addToolAnchor, editToolPosition, getDragActionType, resizeSubchart } from \"./CChartStateInteractions\";\r\nimport { includesOne, isNullish } from \"../utils\";\r\nimport { CChartProps, ChartDataSeries } from \"../Types/CChartTypes\";\r\nimport { useTheme } from \"@material-ui/core\";\r\nimport { UseGestureConfig } from \"react-use-gesture/dist/types\";\r\nvar dequal = require(\"fast-deep-equal\");\r\n\r\nexport const defaultState: ChartStateType = {\r\n  xaxis: {\r\n    heightXAxis: 50,\r\n    heightTickMarkLines: 20,\r\n    totalScaleX: 0,\r\n    totalTranslatedX: 0,\r\n    scaledWidthPerTick: 10,\r\n    xStart: 0,\r\n    xEnd: 0,\r\n    pixXStart: 0,\r\n    pixXEnd: 0,\r\n    startNoDataPeriod: 0,\r\n    endNoDataPeriod: 0,\r\n    noDataPeriodPortion: 0,\r\n    optPeriodRes: null,\r\n    widthPerTick: 20,\r\n    xAxisTicks: [],\r\n    style: {\r\n      fillColor: \"#fff\",\r\n      strokeColor: \"#000\",\r\n      fontColor: \"#000\",\r\n      fontSize: 14,\r\n      fontName: \"Arial\",\r\n    },\r\n  },\r\n  grid: {\r\n    useGridX: true,\r\n    useGridY: true,\r\n    style: {\r\n      strokeColor: \"rgba(51,51,51, 0.33)\",\r\n      strokeStyle: \"\",\r\n    },\r\n  },\r\n  yaxis: {\r\n    widthYAxis: 80,\r\n    widthTickmarkLines: 5,\r\n    style: {\r\n      fillColor: \"#fff\",\r\n      strokeColor: \"#000\",\r\n      fontColor: \"#000\",\r\n      fontSize: 14,\r\n      fontName: \"Arial\",\r\n    },\r\n  },\r\n  backgroundColor: \"#fff\",\r\n  darkMode: false,\r\n  border: \"#000\",\r\n  fullscreen: false,\r\n  subCharts: [],\r\n  draw: {\r\n    isDrawing: false,\r\n    pixXy: [],\r\n  },\r\n  containerSize: { top: 0, left: 0, width: 300, height: 300, init: false },\r\n  pointer: {\r\n    isHovering: false,\r\n    move: { isMoving: false, xy: [0, 0] },\r\n    wheel: { isWheeling: false, delta: [0, 0] },\r\n    dragPointerUp: {\r\n      isDragPointerUp: false,\r\n      xy: [0, 0],\r\n      first: false,\r\n      last: false,\r\n      initial: [0, 0],\r\n      movementInitial: [0, 0],\r\n    },\r\n    drag: {\r\n      isDragging: false,\r\n      xy: [0, 0],\r\n      first: false,\r\n      last: false,\r\n      initial: [0, 0],\r\n      movementInitial: [0, 0],\r\n      delta: [0, 0],\r\n    },\r\n    chartPointer: {\r\n      move: {\r\n        x: 0,\r\n        pixX: 0,\r\n        pixY: 0,\r\n        snapDatasets: [],\r\n        subchartIdx: 0,\r\n        xDateString: \"\",\r\n        pixXSnap: 0,\r\n        xUnlimited: 0,\r\n      },\r\n      click: { clickedSubchartIdx: null },\r\n    },\r\n  },\r\n};\r\nexport const defaultDarkState: ChartStateType = {\r\n  ...defaultState,\r\n  backgroundColor: \"#333\",\r\n  grid: { ...defaultState.grid, style: { ...defaultState.grid.style, strokeColor: \"#666\" } },\r\n  border: \"#666\",\r\n  yaxis: {...defaultState.yaxis, style:{ ...defaultState.yaxis.style, fontColor: \"#bbb\"}}\r\n};\r\n\r\nexport const useChartState = (\r\n  HtmlElementRef: React.RefObject<HTMLElement>,\r\n  settings: {\r\n    initState?: CChartProps[\"style\"];\r\n    maxUpdatesPerSec?: number;\r\n    initWidthPerTick?: number;\r\n    width?: number;\r\n    height?: number;\r\n    viewMode?: \"static\" | \"responsive\" | \"fullscreen\";\r\n  }\r\n): [CalculatedChartStateType, React.Dispatch<ReducerActionType<ReducerActionTaskType>>] => {\r\n  // const theme = useTheme();\r\n  // const darkMode = theme?.palette?.type === \"dark\";\r\n  // const darkMode = settings.darkMode;\r\n  // console.log(!!darkMode);\r\n\r\n  const initDarkMode = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n  const defaultStateInt: ChartStateType =\r\n    (!!initDarkMode && settings.initState?.darkMode === undefined) || !!settings?.initState?.darkMode\r\n      ? defaultDarkState\r\n      : defaultState;\r\n\r\n  const maxUpdatesPerSec = !!settings.maxUpdatesPerSec ? settings.maxUpdatesPerSec : 15;\r\n  const initWidthPerTick = !!settings.initWidthPerTick ? settings.initWidthPerTick : 10;\r\n  const viewModeInternal =\r\n    settings.viewMode === \"static\" && (!settings.height || !settings.width)\r\n      ? \"responsive\"\r\n      : !!settings.viewMode\r\n      ? settings.viewMode\r\n      : \"responsive\";\r\n  // const isResponsive = settings.width === undefined && settings.height === undefined ? true : false;\r\n  const safeYaxis = !!settings.initState?.yaxis ? settings.initState.yaxis : {};\r\n  for (const [key, value] of Object.entries(safeYaxis)) {\r\n    if (isNullish(value)) delete safeYaxis[key as keyof typeof safeYaxis];\r\n  }\r\n  const safeXaxis = !!settings.initState?.xaxis ? settings.initState.xaxis : {};\r\n  for (const [key, value] of Object.entries(safeXaxis)) {\r\n    if (isNullish(value)) delete safeXaxis[key as keyof typeof safeXaxis];\r\n  }\r\n  const safeGrid = !!settings.initState?.grid ? settings.initState.grid : {};\r\n  for (const [key, value] of Object.entries(safeGrid)) {\r\n    if (isNullish(value)) delete safeGrid[key as keyof typeof safeGrid];\r\n  }\r\n\r\n  const initState: ChartStateType = {\r\n    ...defaultStateInt,\r\n    ...settings.initState,\r\n    grid: { ...defaultStateInt.grid, ...settings.initState?.grid } as ChartStateType[\"grid\"],\r\n    yaxis: { ...defaultStateInt.yaxis, ...safeYaxis } as ChartStateType[\"yaxis\"],\r\n    xaxis: { ...defaultStateInt.xaxis, ...safeXaxis } as ChartStateType[\"xaxis\"],\r\n  };\r\n  const [ChartState, Dispatch] = React.useReducer<\r\n    (prevState: ChartStateType, action: ReducerActionType<ReducerActionTaskType>) => ChartStateType\r\n  >(chartStateReducer, initState);\r\n\r\n  const PreStateRef = React.useRef<ChartPreStateRefType>({\r\n    containerSize: defaultStateInt.containerSize,\r\n    pointer: defaultStateInt.pointer,\r\n    xaxis: {\r\n      totalScaleX: 0,\r\n      totalTranslatedX: 0,\r\n      scaledWidthPerTick: 10,\r\n      xStart: 0,\r\n      xEnd: 0,\r\n      pixXStart: 0,\r\n      pixXEnd: 0,\r\n      startNoDataPeriod: 0,\r\n      endNoDataPeriod: 0,\r\n      noDataPeriodPortion: 0,\r\n      optPeriodRes: null,\r\n      widthPerTick: 10,\r\n      xAxisTicks: [],\r\n    },\r\n    tmp: {\r\n      scaleInitWidthPerTick: null,\r\n      scaleInitTranslatedX: 0,\r\n      dragActionType: null,\r\n      amtLastSubcharts: 0,\r\n      lastMainChartData: [],\r\n    },\r\n    lastUpdate: new Date(),\r\n    shallUpdate: [],\r\n    userInteractedChartState: null,\r\n  });\r\n\r\n  const containerHeight = ChartState.containerSize.height - 1;\r\n\r\n  /** Pointer Event Handler defined using react-use-gesture -> pointer state is stored in PreStateRef */\r\n  const useDragOptions: UseGestureConfig = {\r\n    domTarget: HtmlElementRef,\r\n    transform: ([x, y]) => [x - ChartState.containerSize.left, y - ChartState.containerSize.top],\r\n    // eventOptions: { capture: true,  },\r\n    drag: { useTouch: true, experimental_preventWindowScrollY: true },\r\n    move: {},\r\n  };\r\n  useGesture(\r\n    {\r\n      onDrag: (dragState: UseGestureStateType[\"drag\"]) => {\r\n        const deltaX =\r\n          !!PreStateRef.current.pointer.drag?.delta && !!PreStateRef.current.shallUpdate.includes(\"drag\")\r\n            ? PreStateRef.current.pointer.drag?.delta[0] + dragState.delta[0]\r\n            : dragState.delta[0];\r\n        const deltaY =\r\n          !!PreStateRef.current.pointer.drag?.delta && !!PreStateRef.current.shallUpdate.includes(\"drag\")\r\n            ? PreStateRef.current.pointer.drag?.delta[1] + dragState.delta[1]\r\n            : dragState.delta[1];\r\n\r\n        const { xy, initial, movement: movementInitial, first, last, active: isDragging } = dragState;\r\n        PreStateRef.current = {\r\n          ...PreStateRef.current,\r\n          pointer: {\r\n            ...PreStateRef.current.pointer,\r\n            drag: { isDragging, xy, initial, movementInitial, last, first, delta: [deltaX, deltaY] },\r\n          },\r\n          shallUpdate: [...PreStateRef.current.shallUpdate, \"drag\"],\r\n          lastUpdate: PreStateRef.current.lastUpdate,\r\n        };\r\n      },\r\n      onMove: (moveState: UseGestureStateType[\"move\"]) => {\r\n        PreStateRef.current = {\r\n          ...PreStateRef.current,\r\n          pointer: {\r\n            ...PreStateRef.current.pointer,\r\n            move: { isMoving: moveState.active, xy: moveState.xy },\r\n          },\r\n          shallUpdate: [...PreStateRef.current.shallUpdate, \"pointerMove\"],\r\n        };\r\n      },\r\n      onHover: (hoverState: UseGestureStateType[\"hover\"]) => {\r\n        PreStateRef.current = {\r\n          ...PreStateRef.current,\r\n          pointer: {\r\n            ...PreStateRef.current.pointer,\r\n            isHovering: hoverState.active,\r\n          },\r\n          shallUpdate: [...PreStateRef.current.shallUpdate, \"pointerMove\"],\r\n        };\r\n      },\r\n      onWheel: (wheelState: UseGestureStateType[\"wheel\"]) => {\r\n        const deltaX =\r\n          !!PreStateRef.current.pointer.wheel?.delta && !!PreStateRef.current.shallUpdate.includes(\"wheel\")\r\n            ? PreStateRef.current.pointer.wheel?.delta[0] + wheelState.delta[0]\r\n            : wheelState.delta[0];\r\n        const deltaY =\r\n          !!PreStateRef.current.pointer.wheel?.delta && !!PreStateRef.current.shallUpdate.includes(\"wheel\")\r\n            ? PreStateRef.current.pointer.wheel?.delta[1] + wheelState.delta[1]\r\n            : wheelState.delta[1];\r\n        PreStateRef.current = {\r\n          ...PreStateRef.current,\r\n          pointer: {\r\n            ...PreStateRef.current.pointer,\r\n            wheel: { delta: [deltaX, deltaY], isWheeling: wheelState.active },\r\n          },\r\n          shallUpdate: [...PreStateRef.current.shallUpdate, \"wheel\"],\r\n        };\r\n      },\r\n      onDragEnd: (dragState: UseGestureStateType[\"dragEnd\"]) => {\r\n        const { xy, initial, first, last, movement: movementInitial } = dragState;\r\n        PreStateRef.current = {\r\n          ...PreStateRef.current,\r\n          pointer: {\r\n            ...PreStateRef.current.pointer,\r\n            dragPointerUp: { isDragPointerUp: true, xy, initial, movementInitial, last, first },\r\n          },\r\n          shallUpdate: [...PreStateRef.current.shallUpdate, \"dragEnd\"],\r\n        };\r\n      },\r\n    },\r\n    useDragOptions\r\n  );\r\n\r\n  /** window resize event handler  */\r\n  React.useEffect(() => {\r\n    // console.log(\"HI!\");\r\n    if (!HtmlElementRef || !HtmlElementRef.current) return;\r\n    // console.log(\"noch da!\");\r\n    if (ChartState.fullscreen || viewModeInternal === \"fullscreen\") {\r\n      // console.log(\"immrt noch!\");\r\n      HtmlElementRef.current.style.position = \"fixed\";\r\n      HtmlElementRef.current.style.width = \"100%\";\r\n      HtmlElementRef.current.style.height = \"100%\";\r\n      HtmlElementRef.current.style.top = \"0px\";\r\n       HtmlElementRef.current.style.zIndex = \"2000\";\r\n      const { clientWidth: width, clientHeight: height } = HtmlElementRef.current;\r\n      PreStateRef.current = {\r\n        ...PreStateRef.current,\r\n        shallUpdate: [...PreStateRef.current.shallUpdate, \"containerResize\"],\r\n        containerSize: { top: 0, left: 0, width, height, init: true },\r\n      };\r\n      // return;\r\n    } else {\r\n      const { top, left } = HtmlElementRef.current.getBoundingClientRect();\r\n      const { clientWidth: width, clientHeight: height } = HtmlElementRef.current;\r\n      HtmlElementRef.current.style.position = \"relative\";\r\n      HtmlElementRef.current.style.width =\r\n        !!settings.width && viewModeInternal === \"static\" ? settings.width + \"px\" : \"100%\";\r\n      HtmlElementRef.current.style.height =\r\n        !!settings.height && viewModeInternal === \"static\" ? settings.height + \"px\" : \"100%\";\r\n      HtmlElementRef.current.style.top = \"0px\";\r\n      PreStateRef.current = {\r\n        ...PreStateRef.current,\r\n        shallUpdate: [...PreStateRef.current.shallUpdate, \"containerResize\"],\r\n        containerSize: { top, left, width, height, init: true },\r\n      };\r\n    }\r\n    // listen only when container shall be responsive -> neither width or height are set by CChart\r\n    if (!!settings.height && !!settings.width && viewModeInternal === \"static\") return;\r\n    const handleWindowResize = (e: Event) => {\r\n      if (!HtmlElementRef || !HtmlElementRef.current) return;\r\n      if (ChartState.fullscreen || viewModeInternal === \"fullscreen\") {\r\n        const { clientWidth: width, clientHeight: height } = HtmlElementRef.current;\r\n        PreStateRef.current = {\r\n          ...PreStateRef.current,\r\n          shallUpdate: [...PreStateRef.current.shallUpdate, \"containerResize\"],\r\n          containerSize: { top: 0, left: 0, width, height, init: true },\r\n        };\r\n        // return;\r\n      } else {\r\n        const { top, left } = HtmlElementRef.current.getBoundingClientRect();\r\n        const { clientWidth: width, clientHeight: height } = HtmlElementRef.current;\r\n        // HtmlElementRef.current.style.position = \"relative\";\r\n        // HtmlElementRef.current.style.width = width + \"px\";\r\n        // HtmlElementRef.current.style.height = height + \"px\";\r\n        // HtmlElementRef.current.style.top = \"0px\";\r\n        PreStateRef.current = {\r\n          ...PreStateRef.current,\r\n          shallUpdate: [...PreStateRef.current.shallUpdate, \"containerResize\"],\r\n          containerSize: { top, left, width, height, init: true },\r\n        };\r\n      }\r\n    };\r\n    // console.log(\"updated! onResize E handler\");\r\n    if (!!HtmlElementRef.current.parentElement)\r\n      HtmlElementRef.current.parentElement.addEventListener(\"resize\", () => {\r\n        \"HI!!!!!\";\r\n      });\r\n    window.addEventListener(\"resize\", handleWindowResize);\r\n    window.addEventListener(\"orientationchange\", handleWindowResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleWindowResize);\r\n      window.removeEventListener(\"orientationchange\", handleWindowResize);\r\n    };\r\n  }, [\r\n    HtmlElementRef,\r\n    settings.width,\r\n    settings.height,\r\n    ChartState.fullscreen,\r\n    viewModeInternal,\r\n    HtmlElementRef?.current?.clientWidth,\r\n    HtmlElementRef?.current?.clientHeight,\r\n  ]);\r\n\r\n  const userInteractedSubcharts: userInteractsSubchartStateType = ChartState.subCharts.map((subchart) => ({\r\n    // top: subchart.top,\r\n    // bottom: subchart.bottom,\r\n    yaxis: subchart.yaxis.map((singleYaxis) => ({\r\n      decimals: singleYaxis.decimals,\r\n      graphs: singleYaxis.graphs.map((graph) => {\r\n        const addIndicatorDeps = isIndicatorGraph(graph) ? { ...graph.indicator } : {};\r\n\r\n        return {\r\n          // data: graph.data,\r\n          decimals: graph.decimals,\r\n          name: graph.name,\r\n          style: graph.style,\r\n          type: graph.type,\r\n          ...addIndicatorDeps,\r\n        };\r\n      }),\r\n      tools: singleYaxis.tools.map((tool) => ({ type: tool.type, params: tool.params, style: tool.style })),\r\n    })),\r\n  }));\r\n  const userInteractedXaxis = {\r\n    heightXAxis: ChartState.xaxis.heightXAxis,\r\n    heightTickMarkLines: ChartState.xaxis.heightTickMarkLines,\r\n    style: ChartState.xaxis.style,\r\n  };\r\n  const userInteractedChartState = {\r\n    xaxis: userInteractedXaxis,\r\n    subcharts: userInteractedSubcharts,\r\n  };\r\n\r\n  if (!dequal(PreStateRef.current.userInteractedChartState, userInteractedChartState)) {\r\n    PreStateRef.current.userInteractedChartState = userInteractedChartState;\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const onTimer = () => {\r\n      const PreState = PreStateRef.current;\r\n      const DragEndState = PreState.pointer.dragPointerUp;\r\n      const DragState = PreState.pointer.drag;\r\n      if (PreState.shallUpdate.length > 0) {\r\n        const widthYaxis = ChartState.yaxis.widthYAxis;\r\n        const widthChart = PreState.containerSize.width - 1;\r\n        const heightChart = PreState.containerSize.height - 1;\r\n        const heightXaxis = ChartState.xaxis.heightXAxis;\r\n        let calcSubcharts = ChartState.subCharts;\r\n        let calcXaxis: InteractiveXaxisType = PreState.xaxis;\r\n        let currentPointer: InteractivePointerType[\"chartPointer\"] | undefined;\r\n        let calcDraw = ChartState.draw;\r\n        let dragActionType;\r\n        if (!PreState.shallUpdate.includes(\"dragEnd\")) PreState.pointer.dragPointerUp.isDragPointerUp = false;\r\n        if (includesOne(PreState.shallUpdate, \"containerResize\") && ChartState.subCharts.length > 0) {\r\n          const dHeight =\r\n            PreState.containerSize.height -\r\n            1 -\r\n            ChartState.xaxis.heightXAxis -\r\n            ChartState.subCharts[ChartState.subCharts.length - 1].bottom;\r\n          const minMainHeight = 250;\r\n          const dHproportionalTmp = Math.floor(dHeight / ChartState.subCharts.length);\r\n          const newMainSizeTmp = ChartState.subCharts[0].bottom - ChartState.subCharts[0].top + dHproportionalTmp;\r\n          const restMainLimit = newMainSizeTmp < minMainHeight ? minMainHeight - newMainSizeTmp : 0;\r\n          const dHeightMain = dHproportionalTmp + restMainLimit;\r\n          const dHeightSingleSubchart =\r\n            ChartState.subCharts.length > 1\r\n              ? Math.floor((dHeight - dHeightMain) / (ChartState.subCharts.length - 1))\r\n              : 0;\r\n          const rest =\r\n            ChartState.subCharts.length > 1 ? (dHeight - dHeightMain) % (ChartState.subCharts.length - 1) : 0;\r\n          let currentRest = rest;\r\n          let lastBottom: number = 0;\r\n          let correctRest = 0;\r\n          calcSubcharts = calcSubcharts.map((subchart, subchartIdx) => {\r\n            if (subchartIdx === 0) {\r\n              lastBottom = subchart.bottom + 1 * dHeightMain;\r\n              return { ...subchart, bottom: subchart.bottom + 1 * dHeightMain };\r\n            } else {\r\n              const tempRest =\r\n                Math.sign(currentRest) > 0 && currentRest > 0 && currentRest !== 0\r\n                  ? -1\r\n                  : Math.sign(currentRest) < 0 && currentRest < 0 && currentRest !== 0\r\n                  ? +1\r\n                  : 0;\r\n              currentRest += tempRest;\r\n              correctRest += tempRest;\r\n              const newTop = lastBottom;\r\n              // why math.abs -> rest of Math.floor(x/n)\r\n              lastBottom = subchart.bottom + subchartIdx * dHeightSingleSubchart + dHeightMain + Math.abs(correctRest);\r\n\r\n              return {\r\n                ...subchart,\r\n                top: newTop,\r\n                bottom: subchart.bottom + subchartIdx * dHeightSingleSubchart + dHeightMain + Math.abs(correctRest),\r\n              };\r\n            }\r\n          });\r\n\r\n          // console.log(dHeight, dHeightMain, dHeightSingleSubchart, rest, PreState.containerSize.height);\r\n          PreStateRef.current.userInteractedChartState = null;\r\n        }\r\n        if (\r\n          includesOne(PreState.shallUpdate, \"drag\", \"wheel\", \"containerResize\", \"deps\") ||\r\n          !!PreState.tmp.dragActionType\r\n        ) {\r\n          // drag actions\r\n\r\n          const dragInit = DragState?.initial;\r\n          // if (!PreState.shallUpdate.includes(\"drag\")) {\r\n          dragActionType = getDragActionType(\r\n            dragInit,\r\n            calcSubcharts,\r\n            calcXaxis,\r\n            !!PreState.tmp.dragActionType,\r\n            ChartState.draw.isDrawing,\r\n            widthChart - widthYaxis,\r\n            heightChart - heightXaxis\r\n          );\r\n          if (\r\n            !PreState.tmp.dragActionType &&\r\n            !!dragActionType &&\r\n            [\"resizeSubchart\"].includes(dragActionType.type) // \"editTool\", \"drawTool\"\r\n          ) {\r\n            PreState.tmp.dragActionType = dragActionType;\r\n          }\r\n          if (!!PreState.tmp.dragActionType) {\r\n            if (!!PreState.pointer.drag.isDragging) {\r\n              if (PreState.tmp.dragActionType?.type === \"resizeSubchart\") {\r\n                calcSubcharts = resizeSubchart(PreState.tmp.dragActionType, calcSubcharts, PreState.pointer.drag);\r\n              }\r\n            }\r\n\r\n            if (!PreState.pointer.drag.isDragging) {\r\n              if (![\"drawTool\", \"editTool\"].includes(PreState.tmp.dragActionType?.type)) {\r\n                if (PreState.tmp.dragActionType?.type === \"resizeSubchart\") {\r\n                  // resize with ChartState.subcharts[i].bottom (when resizing began!) for the last time\r\n\r\n                  calcSubcharts = resizeSubchart(PreState.tmp.dragActionType, calcSubcharts, PreState.pointer.drag);\r\n                  // and trigger update of ChartState.subCharts for the effect hook\r\n                  PreState.userInteractedChartState = null;\r\n                  PreState.tmp.dragActionType = null;\r\n                }\r\n              }\r\n            }\r\n            // }\r\n          }\r\n\r\n          if (\r\n            (!!dragActionType && [\"scale\", \"translate\"].includes(dragActionType.type)) ||\r\n            includesOne(PreState.shallUpdate, \"containerResize\", \"deps\")\r\n          ) {\r\n            // if (PreState.shallUpdate.includes(\"deps\"))\r\n            //   console.log(\r\n            //     \"MAINDATA: \",\r\n            //     PreState.tmp.lastMainChartData ===\r\n            //       (ChartState.subCharts?.[0]?.yaxis?.[0]?.graphs?.[0]?.data as ChartDataSeries) ?? null\r\n            //   );\r\n\r\n            // if new chart is added or replacing current chart or chart is reset/cleared -> initial translatedX to end of chart is calculated in reducer\r\n            if (\r\n              ((PreState.tmp.amtLastSubcharts !== ChartState.subCharts.length && ChartState.subCharts.length === 1) ||\r\n                PreState.tmp.lastMainChartData !==\r\n                  (ChartState.subCharts?.[0]?.yaxis?.[0]?.graphs?.[0]?.data as ChartDataSeries)) ??\r\n              null\r\n            ) {\r\n              // console.log(\"DIFFERENZ: \", PreState.tmp.amtLastSubcharts, ChartState.subCharts.length);\r\n\r\n              PreState.xaxis.totalTranslatedX = ChartState.xaxis.totalTranslatedX;\r\n            }\r\n            const { scaleInitTranslatedX, scaleInitWidthPerTick } = PreState.tmp;\r\n            let mainGraph = !!calcSubcharts?.[0]?.yaxis?.[0]?.graphs?.[0]\r\n              ? calcSubcharts?.[0].yaxis[0].graphs[0]\r\n              : null;\r\n            if (!!mainGraph) if (!isChartGraph(mainGraph)) mainGraph = null;\r\n\r\n            PreState.xaxis = getInteractiveXaxisState(\r\n              { ...PreState.xaxis, scaleInitTranslatedX, scaleInitWidthPerTick }, // + temp vars in ref! therefore ref not state\r\n              PreState.pointer.drag,\r\n              PreState.pointer.wheel,\r\n              PreState.pointer.move,\r\n              initWidthPerTick,\r\n              PreState.shallUpdate.includes(\"drag\"),\r\n              dragActionType?.type === \"translate\",\r\n              dragActionType?.type === \"scale\",\r\n              widthChart, //- widthYaxis\r\n              mainGraph?.data.length || 0\r\n            );\r\n            // const { scaleInitTranslatedX, scaleInitWidthPerTick, ...xaxisInteractiveState } = PreState.xaxis;\r\n\r\n            calcXaxis = {\r\n              ...calcXaxis,\r\n              ...PreState.xaxis,\r\n              ...calculateCurrentXaxis(\r\n                PreState.xaxis.scaledWidthPerTick,\r\n                PreState.xaxis.totalTranslatedX,\r\n                PreState.containerSize.width,\r\n                ChartState.yaxis.widthYAxis,\r\n                mainGraph\r\n              ),\r\n            };\r\n          }\r\n          if (\r\n            (!!dragActionType && [\"scale\", \"translate\", \"resizeSubchart\"].includes(dragActionType.type)) ||\r\n            !!PreState.tmp.dragActionType ||\r\n            includesOne(PreState.shallUpdate, \"containerResize\", \"deps\")\r\n          ) {\r\n            // graphs (and yaxis) - depends on drag actions (translate, scale, resizeSubchart)\r\n            const calcCurrentSubchart = calculateCurrentGraphs(\r\n              calcSubcharts,\r\n              PreState.xaxis.scaledWidthPerTick,\r\n              calcXaxis.xStart,\r\n              calcXaxis.xEnd,\r\n              calcXaxis.pixXStart,\r\n              calcXaxis.pixXEnd\r\n            );\r\n            if (!!calcCurrentSubchart) calcSubcharts = calcCurrentSubchart;\r\n          }\r\n        }\r\n        if (PreState.shallUpdate.includes(\"pointerMove\")) {\r\n          const xpointerRes = calculateXPointer(\r\n            calcXaxis.scaledWidthPerTick,\r\n            calcXaxis.totalTranslatedX,\r\n            calcXaxis,\r\n            calcSubcharts?.[0]?.yaxis?.[0]?.graphs?.[0] as any,\r\n            PreState.pointer.move\r\n          );\r\n\r\n          // if (!!xpointerRes) {\r\n          // console.log(xpointerRes);\r\n          const xpointer = xpointerRes?.xPointer !== undefined ? xpointerRes?.xPointer : null;\r\n          const xPointerUnl = xpointerRes?.xPointerUnlimited !== undefined ? xpointerRes.xPointerUnlimited : -1;\r\n          const xPointerDateString = xpointerRes?.xPointerDateStr || \"\";\r\n          const pixXPointer = xpointerRes?.pixXPointer || 0;\r\n          currentPointer = calculateCurrentPointerDataset(\r\n            calcSubcharts,\r\n            xpointer,\r\n            xPointerUnl,\r\n            xPointerDateString,\r\n            pixXPointer,\r\n            PreState.pointer.move,\r\n            PreState.pointer.dragPointerUp\r\n          );\r\n          // }\r\n          // ensure xUnlimited is added to chartstate\r\n\r\n          // currentPointer = {move: {xUnlimited: Math.round(\r\n          //   purePixToX(\r\n          //     PreState.pointer.move?.xy[0] as any,\r\n          //     PreState.xaxis.totalTranslatedX,\r\n          //     PreState.xaxis.widthPerTick\r\n          //   )\r\n          // );}}\r\n        }\r\n        if (\r\n          PreState.shallUpdate.includes(\"drag\") ||\r\n          (!!PreState.tmp?.dragActionType && [\"editTool\", \"drawTool\"].includes(PreState.tmp.dragActionType.type))\r\n        ) {\r\n          if (\r\n            !PreState.tmp.dragActionType &&\r\n            !!dragActionType &&\r\n            [\"editTool\", \"drawTool\"].includes(dragActionType.type)\r\n          ) {\r\n            PreState.tmp.dragActionType = dragActionType;\r\n          }\r\n          if (!!PreState.tmp.dragActionType) {\r\n            if (!!PreState.pointer.drag.isDragging) {\r\n              if (PreState.tmp.dragActionType?.type === \"editTool\") {\r\n                calcSubcharts = editToolPosition(\r\n                  PreState.tmp.dragActionType,\r\n                  calcSubcharts,\r\n                  calcXaxis,\r\n                  PreState.pointer\r\n                );\r\n              }\r\n            }\r\n            if (!PreState.pointer.drag.isDragging) {\r\n              if (PreState.tmp.dragActionType?.type === \"editTool\") {\r\n                //   console.log(PreState.tmp.dragActionType, PreState.pointer.drag);\r\n                calcSubcharts = editToolPosition(\r\n                  PreState.tmp.dragActionType,\r\n                  calcSubcharts,\r\n                  calcXaxis,\r\n                  PreState.pointer\r\n                );\r\n                // and trigger update of ChartState.subCharts for the effect hook\r\n                PreState.userInteractedChartState = null;\r\n                PreState.tmp.dragActionType = null;\r\n              } else if (DragEndState.isDragPointerUp && PreState.tmp.dragActionType?.type === \"drawTool\") {\r\n                const nPoints = !ChartState.draw.type\r\n                  ? 0\r\n                  : [\"hline\", \"vline\"].includes(ChartState.draw.type)\r\n                  ? 1\r\n                  : [\"trendline\"].includes(ChartState.draw.type)\r\n                  ? 2\r\n                  : 0;\r\n                // console.log(nPoints, ChartState.draw, ChartState.draw.isDrawing);\r\n                if (!nPoints) calcDraw = { isDrawing: false, pixXy: [] };\r\n                else {\r\n                  if (calcDraw.pixXy.length < nPoints - 1) {\r\n                    calcDraw = addToolAnchor(calcDraw.type, calcDraw, PreState.pointer);\r\n                    // console.log(\"drawing 0\", ChartState.draw, DragEndState);\r\n                  } else {\r\n                    calcDraw = addToolAnchor(calcDraw.type, calcDraw, PreState.pointer);\r\n                    calcSubcharts = addTool(calcSubcharts, calcXaxis, calcDraw, PreState.pointer.drag);\r\n                    calcDraw = { isDrawing: false, pixXy: [] };\r\n                    PreState.tmp.dragActionType = null;\r\n                    // console.log(\"drawing 1\", DragEndState);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        const { lastUpdate, shallUpdate, userInteractedChartState, xaxis, tmp, ...state } = PreState;\r\n        PreState.xaxis = { ...PreState.xaxis, ...calcXaxis };\r\n        if (!!currentPointer) PreState.pointer.chartPointer = currentPointer;\r\n        // PreState.subcharts = calcSubcharts;\r\n\r\n        Dispatch({\r\n          task: \"updateInteractionState\",\r\n          params: {\r\n            newState: {\r\n              ...state,\r\n              xaxis: calcXaxis as any,\r\n              subCharts: calcSubcharts,\r\n              draw: calcDraw,\r\n            },\r\n            // resizeSubchartObj,\r\n          },\r\n        } as ReducerActionType<\"updateInteractionState\">);\r\n\r\n        PreStateRef.current = {\r\n          ...PreState,\r\n          lastUpdate: new Date(),\r\n          shallUpdate: [],\r\n        };\r\n      }\r\n      PreState.tmp.amtLastSubcharts = ChartState.subCharts.length;\r\n      PreState.tmp.lastMainChartData =\r\n        (ChartState.subCharts?.[0]?.yaxis?.[0]?.graphs?.[0]?.data as ChartDataSeries) ?? null;\r\n    };\r\n    // onTimer(); // exec immmediately\r\n    console.log(\"updated Timer\");\r\n    PreStateRef.current.shallUpdate.push(\"deps\");\r\n    onTimer();\r\n    const handleTimer = window.setInterval(onTimer, 1000 / maxUpdatesPerSec);\r\n    return () => {\r\n      window.clearInterval(handleTimer);\r\n    };\r\n  }, [\r\n    maxUpdatesPerSec,\r\n    initWidthPerTick,\r\n    ChartState.draw.isDrawing,\r\n    ChartState.draw.pixXy,\r\n    ChartState.yaxis.widthYAxis,\r\n    ChartState.xaxis.heightXAxis,\r\n    PreStateRef.current.userInteractedChartState,\r\n    ChartState.fullscreen,\r\n  ]);\r\n\r\n  return [\r\n    {\r\n      ...ChartState,\r\n      methods: getChartMethods(ChartState, containerHeight, Dispatch),\r\n    },\r\n    Dispatch,\r\n  ];\r\n};\r\n","import React from \"react\";\r\nimport { Circle, Line } from \"react-konva\";\r\nimport { DrawingTool } from \"../Types/CChartStateTypes\";\r\n\r\nexport type CTrendlineProps = {\r\n  style?: DrawingTool[\"style\"];\r\n  pixXy: [[number, number], [number, number]];\r\n  mode: \"line\" | \"trendline\" | \"infiniteLine\";\r\n  subchartTop: number;\r\n  subchartBottom: number;\r\n};\r\n\r\nexport const CTrendline = (props: CTrendlineProps) => {\r\n  const { style, pixXy, mode, subchartTop, subchartBottom } = props;\r\n  if (pixXy.length !== 2) return null;\r\n  const strokeColor = !!style?.strokeColor ? style.strokeColor : \"red\";\r\n  const anchorColor = !!style?.anchorColor ? style.anchorColor : \"#333\";\r\n  const modeInt = [\"line\", \"trendline\", \"infiniteLine\"].includes(mode) ? mode : \"trendline\";\r\n  const pixXyAdjusted: [number, number][] = [];\r\n\r\n  if (pixXy[0][0] > pixXy[1][0]) {\r\n    pixXyAdjusted.push([...pixXy[1]], [...pixXy[0]]);\r\n  } else pixXyAdjusted.push([...pixXy[0]], [...pixXy[1]]);\r\n\r\n  if (modeInt === \"trendline\" || mode === \"infiniteLine\") {\r\n    const dx = pixXyAdjusted[1][0] - pixXyAdjusted[0][0];\r\n    const dy = pixXyAdjusted[1][1] - pixXyAdjusted[0][1];\r\n    const slope = dy / dx;\r\n    const pixYTarget = dy < 0 ? subchartTop : subchartBottom;\r\n    const b = pixXyAdjusted[0][1] - slope * pixXyAdjusted[0][0];\r\n    const pixXTarget = (pixYTarget - b) / slope;\r\n    pixXyAdjusted[1][0] = pixXTarget;\r\n    pixXyAdjusted[1][1] = pixYTarget;\r\n    if (mode === \"infiniteLine\") {\r\n      const pixYSrc = dy < 0 ? subchartBottom : subchartTop;\r\n      const pixXSrc = (pixYSrc - b) / slope;\r\n      pixXyAdjusted[0][0] = pixXSrc;\r\n      pixXyAdjusted[0][1] = pixYSrc;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Line\r\n        x={0}\r\n        y={0}\r\n        points={[pixXyAdjusted[0][0], pixXyAdjusted[0][1], pixXyAdjusted[1][0], pixXyAdjusted[1][1]]}\r\n        stroke={strokeColor}\r\n        strokeWidth={1}\r\n      />\r\n      <Circle x={pixXy[0][0]} y={pixXy[0][1]} radius={5} fill={anchorColor} />\r\n      <Circle x={pixXy[1][0]} y={pixXy[1][1]} radius={5} fill={anchorColor} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Circle, Line } from \"react-konva\";\r\nimport { DrawingTool } from \"../Types/CChartStateTypes\";\r\n\r\nexport type CVlineProps = {\r\n  style?: DrawingTool[\"style\"];\r\n  pixXy: [[number, number]];\r\n  mode: \"extendUp\" | \"extendDown\" | \"extendUpDown\" | \"*extendToSecondPoint\";\r\n  subchartTop: number;\r\n  subchartBottom: number;\r\n};\r\n\r\nexport const CVline = (props: CVlineProps) => {\r\n  const { style, pixXy, subchartTop, subchartBottom } = props;\r\n  if (pixXy.length !== 1) return null;\r\n  const strokeColor = !!style?.strokeColor ? style.strokeColor : \"red\";\r\n  const anchorColor = !!style?.anchorColor ? style.anchorColor : \"#333\";\r\n  //  TODO\r\n  // const modeInt = [\"extendUp\", \"extendDown\", \"extendUpDown\", \"*extendToSecondPoint\"].includes(mode)\r\n  //   ? mode\r\n  //   : \"extendUpDown\";\r\n  const pixXyAdjusted: [number, number][] = [];\r\n  pixXyAdjusted.push([pixXy[0][0], subchartTop], [pixXy[0][0], subchartBottom]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Line\r\n        x={0}\r\n        y={0}\r\n        points={[pixXyAdjusted[0][0], pixXyAdjusted[0][1], pixXyAdjusted[1][0], pixXyAdjusted[1][1]]}\r\n        stroke={strokeColor}\r\n        strokeWidth={1}\r\n      />\r\n      <Circle x={pixXy[0][0]} y={pixXy[0][1]} radius={5} fill={anchorColor} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Line, Circle } from \"react-konva\";\r\nimport { DrawingTool } from \"../Types/CChartStateTypes\";\r\n\r\nexport type CHlineProps = {\r\n  style?: DrawingTool[\"style\"];\r\n  pixXy: [[number, number]];\r\n  mode: \"extendRight\" | \"extendLeft\" | \"extendLeftRight\" | \"*extendToSecondPoint\";\r\n  pixXstart: number;\r\n  pixXend: number;\r\n};\r\n\r\nexport const CHline = (props: CHlineProps) => {\r\n  const { style, pixXy, pixXstart, pixXend } = props;\r\n  if (pixXy.length !== 1) return null;\r\n  const strokeColor = !!style?.strokeColor ? style.strokeColor : \"red\";\r\n  const anchorColor = !!style?.anchorColor ? style.anchorColor : \"#333\";\r\n  // TODO\r\n  // const modeInt = [\"extendRight\", \"extendLeft\", \"extendLeftRight\", \"*extendToSecondPoint\"].includes(mode)\r\n  //   ? mode\r\n  //   : \"extendLeftRight\";\r\n  const pixXyAdjusted: [number, number][] = [];\r\n  pixXyAdjusted.push([pixXstart, pixXy[0][1]], [pixXend, pixXy[0][1]]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Line\r\n        x={0}\r\n        y={0}\r\n        points={[pixXyAdjusted[0][0], pixXyAdjusted[0][1], pixXyAdjusted[1][0], pixXyAdjusted[1][1]]}\r\n        stroke={strokeColor}\r\n        strokeWidth={1}\r\n      />\r\n      <Circle x={pixXy[0][0]} y={pixXy[0][1]} radius={5} fill={anchorColor} />\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { createMuiTheme, responsiveFontSizes, Theme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nexport const ConditionalMuiThemeProvider: React.FC<{ disableTheme?: boolean; theme: Theme }> = (props) => {\r\n  const { disableTheme, theme } = props;\r\n  // if (!!disableTheme) return props.children;\r\n  // else return <ThemeProvider></ThemeProvider>;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!disableTheme ? <ThemeProvider theme={theme}>{props.children}</ThemeProvider> : props.children}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport const muiTheme = responsiveFontSizes(\r\n  createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: \"#009688\",\r\n      },\r\n      secondary: {\r\n        main: \"#f50057\",\r\n      },\r\n      type: \"light\",\r\n    },\r\n    typography: {\r\n      h1: { fontWeight: 600, fontSize: \"3rem\", lineHeight: 1.167 },\r\n      h2: { fontWeight: 600, fontSize: \"2.5rem\", lineHeight: 1.167 },\r\n      h3: { fontWeight: 600, fontSize: \"2rem\", lineHeight: 1.167 },\r\n      h4: { fontWeight: 600, fontSize: \"1.88rem\", lineHeight: 1.167 },\r\n      h5: { fontWeight: 600, fontSize: \"1.44rem\", lineHeight: 1.167 },\r\n      h6: { fontWeight: 600, fontSize: \"1.25rem\", lineHeight: 1.167 },\r\n      fontFamily: \"'Quattrocento Sans', sans-serif\",\r\n    },\r\n  })\r\n);\r\n\r\nexport const muiDarkTheme = responsiveFontSizes(\r\n  createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: \"#009688\",\r\n      },\r\n      secondary: {\r\n        main: \"#f50057\",\r\n      },\r\n      type: \"dark\",\r\n    },\r\n    typography: {\r\n      h1: { fontWeight: 600, fontSize: \"3rem\", lineHeight: 1.167 },\r\n      h2: { fontWeight: 600, fontSize: \"2.5rem\", lineHeight: 1.167 },\r\n      h3: { fontWeight: 600, fontSize: \"2rem\", lineHeight: 1.167 },\r\n      h4: { fontWeight: 600, fontSize: \"1.88rem\", lineHeight: 1.167 },\r\n      h5: { fontWeight: 600, fontSize: \"1.44rem\", lineHeight: 1.167 },\r\n      h6: { fontWeight: 600, fontSize: \"1.25rem\", lineHeight: 1.167, fontFamily: \"'Open Sans', sans-serif\" },\r\n      fontFamily: \"'Quattrocento Sans', sans-serif\",\r\n    },\r\n  })\r\n);\r\n\r\n// export const ThemeContext = React.createContext<Theme>(muiTheme);\r\n","import {\r\n  Button,\r\n  Grid,\r\n  ListItem,\r\n  List,\r\n  Paper,\r\n  Typography,\r\n  useMediaQuery,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { mdiChartLine, mdiChartBellCurve, mdiPencilRuler, mdiTune, mdiStarShooting } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport React from \"react\";\r\nimport { Stage, Layer, Rect, Line, Shape } from \"react-konva\";\r\nimport { CCandleChart } from \"../Charts/CCandleChart\";\r\nimport { CalculatedChartStateType } from \"../Types/CChartStateTypes\";\r\nimport { CChartMenuStateType } from \"./ChartMenu\";\r\n\r\nexport const ChartMenuHome = (props: {\r\n  ChartState: CalculatedChartStateType;\r\n  onNavigate: (target: CChartMenuStateType[\"location\"]) => void;\r\n}) => {\r\n  const { ChartState, onNavigate } = props;\r\n\r\n  const isMinSm = useMediaQuery(\"(min-width:600px)\");\r\n  const previewSize = !isMinSm ? 248 : 320;\r\n  const { widthYAxis, widthTickmarkLines } = ChartState.yaxis;\r\n  const { heightXAxis, heightTickMarkLines } = ChartState.xaxis;\r\n  const containerWidth = ChartState.containerSize.width - 1;\r\n  const containerHeight = ChartState.containerSize.height - 1;\r\n  const xAxis = ChartState.xaxis.xAxisTicks;\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Grid container>\r\n        <Grid item> */}\r\n      <List>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            onNavigate?.(\"chart\");\r\n          }}\r\n        >\r\n          <ListItemIcon\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 5,\r\n              marginRight: 10,\r\n              background: theme.palette.secondary.main,\r\n              minWidth: 48,\r\n              height: 48,\r\n            }}\r\n          >\r\n            <Icon path={mdiChartLine} size={2} color={theme.palette.secondary.contrastText} />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Chart\" primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }} />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            onNavigate?.(\"indicators\");\r\n          }}\r\n        >\r\n          <ListItemIcon\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 5,\r\n              marginRight: 10,\r\n              background: theme.palette.secondary.main,\r\n              minWidth: 48,\r\n              height: 48,\r\n            }}\r\n          >\r\n            <Icon path={mdiChartBellCurve} size={2} color={theme.palette.secondary.contrastText} />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Indicators\" primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }} />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            onNavigate?.(\"tools\");\r\n          }}\r\n        >\r\n          <ListItemIcon\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 5,\r\n              marginRight: 10,\r\n              background: theme.palette.secondary.main,\r\n              minWidth: 48,\r\n              height: 48,\r\n            }}\r\n          >\r\n            <Icon path={mdiPencilRuler} size={2} color={theme.palette.secondary.contrastText} />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Tools\" primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }} />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            onNavigate?.(\"settings\");\r\n          }}\r\n        >\r\n          <ListItemIcon\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 5,\r\n              marginRight: 10,\r\n              background: theme.palette.secondary.main,\r\n              minWidth: 48,\r\n              height: 48,\r\n            }}\r\n          >\r\n            <Icon path={mdiTune} size={2} color={theme.palette.secondary.contrastText} />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Settings\" primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }} />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            onNavigate?.(\"quickys\");\r\n          }}\r\n        >\r\n          <ListItemIcon\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 5,\r\n              marginRight: 10,\r\n              background: theme.palette.secondary.main,\r\n              minWidth: 48,\r\n              height: 48,\r\n            }}\r\n          >\r\n            <Icon path={mdiStarShooting} size={2} color={theme.palette.secondary.contrastText} />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Quick Tasks\"\r\n            primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }}\r\n          />\r\n        </ListItem>\r\n      </List>\r\n      {/* </Grid>\r\n      </Grid> */}\r\n    </React.Fragment>\r\n    // <Grid container alignItems=\"center\">\r\n    //   <Grid\r\n    //     container\r\n    //     item\r\n    //     spacing={2}\r\n    //     alignItems=\"center\"\r\n    //     justify=\"center\"\r\n    //     //   style={{justifyContent: \"flex-end\"}}\r\n    //     //   style={{ maxWidth: !isMinSm ? 400 : \"auto\" }}\r\n    //     //   wrap=\"nowrap\"\r\n    //     xs={12}\r\n    //     sm={4}\r\n    //     style={{ paddingBottom: 24 }}\r\n    //   >\r\n    //     <Grid item sm={12} xs={6}>\r\n    //       <div style={{ margin: !isMinSm ? \"0px 0px 0px auto\" : 0, width: 128 }}>\r\n    //         <Button\r\n    //           color=\"secondary\"\r\n    //           variant=\"contained\"\r\n    //           style={{ width: 96, height: 96, textTransform: \"none\", borderRadius: 5 }}\r\n    //         >\r\n    //           <div style={{ position: \"relative\", top: 0 }}>\r\n    //             <div>\r\n    //               <Icon path={mdiChartLine} size=\"75px\" />\r\n    //             </div>\r\n    //             <Typography\r\n    //               style={{ width: \"100%\", marginTop: -12, display: \"block\", color: \"#fff\", fontWeight: 600 }}\r\n    //               // color=\"secondary\"\r\n    //               variant=\"body1\"\r\n    //               component=\"div\"\r\n    //             >\r\n    //               <div style={{ margin: \"0px auto\", width: \"max-content\" }}>Chart</div>\r\n    //             </Typography>\r\n    //           </div>\r\n    //         </Button>\r\n    //       </div>\r\n    //     </Grid>\r\n    //     <Grid item sm={12} xs={6}>\r\n    //       <div style={{ width: \"max-content\" }}>\r\n    //         <Button\r\n    //           color=\"secondary\"\r\n    //           variant=\"contained\"\r\n    //           style={{ width: 96, height: 96, textTransform: \"none\", borderRadius: 5 }}\r\n    //           onClick={() => {\r\n    //             onNavigate?.(\"indicators\");\r\n    //           }}\r\n    //         >\r\n    //           <div style={{ position: \"relative\", top: 0 }}>\r\n    //             <div>\r\n    //               <Icon path={mdiChartBellCurve} size=\"72px\" />\r\n    //             </div>\r\n    //             <Typography\r\n    //               style={{ width: \"100%\", marginTop: -12, display: \"block\", color: \"#fff\", fontWeight: 600 }}\r\n    //               // color=\"secondary\"\r\n    //               variant=\"body1\"\r\n    //               component=\"div\"\r\n    //             >\r\n    //               <div style={{ margin: \"0px auto\", width: \"max-content\" }}>Indicators</div>\r\n    //             </Typography>\r\n    //           </div>\r\n    //         </Button>\r\n    //       </div>\r\n    //     </Grid>\r\n    //     <Grid item sm={12} xs={6}>\r\n    //       <div style={{ margin: !isMinSm ? \"0px 0px 0px auto\" : 0, width: 128 }}>\r\n    //         <Button\r\n    //           color=\"secondary\"\r\n    //           variant=\"contained\"\r\n    //           style={{ width: 96, height: 96, textTransform: \"none\", borderRadius: 5 }}\r\n    //           onClick={() => onNavigate?.(\"tools\")}\r\n    //         >\r\n    //           <div style={{ position: \"relative\", top: 0 }}>\r\n    //             <div>\r\n    //               <Icon path={mdiPencilRuler} size=\"72px\" />\r\n    //             </div>\r\n    //             <Typography\r\n    //               style={{ width: \"100%\", marginTop: -12, display: \"block\", color: \"#fff\", fontWeight: 600 }}\r\n    //               // color=\"secondary\"\r\n    //               variant=\"body1\"\r\n    //               component=\"div\"\r\n    //             >\r\n    //               <div style={{ margin: \"0px auto\", width: \"max-content\" }}>Tools</div>\r\n    //             </Typography>\r\n    //           </div>\r\n    //         </Button>\r\n    //       </div>\r\n    //     </Grid>\r\n    //     <Grid item sm={12} xs={6}>\r\n    //       {/* <div style={{ margin: \"0px auto\", width: \"max-content\" }}> */}\r\n    //       <Button\r\n    //         color=\"secondary\"\r\n    //         variant=\"contained\"\r\n    //         style={{ width: 96, height: 96, textTransform: \"none\", borderRadius: 5 }}\r\n    //         onClick={() => onNavigate?.(\"settings\")}\r\n    //       >\r\n    //         <div style={{ position: \"relative\", top: 0 }}>\r\n    //           <div>\r\n    //             <Icon path={mdiTune} size=\"72px\" />\r\n    //           </div>\r\n    //           <Typography\r\n    //             style={{ width: \"100%\", marginTop: -12, display: \"block\", color: \"#fff\", fontWeight: 600 }}\r\n    //             // color=\"secondary\"\r\n    //             variant=\"body1\"\r\n    //             component=\"div\"\r\n    //           >\r\n    //             <div style={{ margin: \"0px auto\", width: \"max-content\" }}>Settings</div>\r\n    //           </Typography>\r\n    //         </div>\r\n    //       </Button>\r\n    //       {/* </div> */}\r\n    //     </Grid>\r\n    //     <Grid item sm={12} xs={6}>\r\n    //       {/* <div style={{ margin: \"0px auto\", width: \"max-content\" }}> */}\r\n    //       <Button\r\n    //         color=\"secondary\"\r\n    //         variant=\"contained\"\r\n    //         style={{ width: 96, height: 96, textTransform: \"none\", borderRadius: 5 }}\r\n    //         onClick={() => onNavigate?.(\"settings\")}\r\n    //       >\r\n    //         <div style={{ position: \"relative\", top: 0 }}>\r\n    //           <div>\r\n    //             <Icon path={mdiStarShooting} size=\"72px\" />\r\n    //           </div>\r\n    //           <Typography\r\n    //             style={{ width: \"100%\", marginTop: -12, display: \"block\", color: \"#fff\", fontWeight: 600 }}\r\n    //             // color=\"secondary\"\r\n    //             variant=\"body1\"\r\n    //             component=\"div\"\r\n    //           >\r\n    //             <div style={{ margin: \"0px auto\", width: \"max-content\" }}>Shortcuts</div>\r\n    //           </Typography>\r\n    //         </div>\r\n    //       </Button>\r\n    //       {/* </div> */}\r\n    //     </Grid>\r\n    //   </Grid>\r\n    //   {!!null ? (\r\n    //     <Grid item xs={12} sm={6}>\r\n    //       <Paper style={{ width: previewSize, height: previewSize, margin: \"0 auto\", border: \"1px solid #666\" }}>\r\n    //         <Stage //konva container\r\n    //           width={previewSize}\r\n    //           height={previewSize}\r\n    //           listening={false}\r\n\r\n    //           // style={{ boxSizing: \"border-box\" }}\r\n    //         >\r\n    //           {/*  Canvas Layer 3 - chart and example */}\r\n\r\n    //           <Layer\r\n    //             scale={{\r\n    //               x: previewSize / ChartState.containerSize.width,\r\n    //               y: previewSize / ChartState.containerSize.height,\r\n    //             }}\r\n    //           >\r\n    //             {/* <Rect\r\n    //           x={20 + ChartState.pointer.totalTranslatedX}\r\n    //           y={50 + ChartState.pointer.totalTranslatedY}\r\n    //           width={100}\r\n    //           height={100}\r\n    //           fill=\"red\"\r\n    //           shadowBlur={10}\r\n    //         /> */}\r\n    //             {0 in ChartState.subCharts ? <CCandleChart fullState={ChartState} /> : null}\r\n    //           </Layer>\r\n    //           {/*  Canvas Layer 5 (before 0) - axis bg rects + future chartbgcolor? */}\r\n    //           <Layer\r\n    //             scale={{\r\n    //               x: previewSize / ChartState.containerSize.width,\r\n    //               y: previewSize / ChartState.containerSize.height,\r\n    //             }}\r\n    //           >\r\n    //             <Rect\r\n    //               x={0 + 0.5}\r\n    //               y={containerHeight - heightXAxis + 0.5}\r\n    //               width={containerWidth}\r\n    //               height={heightXAxis}\r\n    //               fill={ChartState.xaxis.style.fillColor}\r\n    //               stroke={ChartState.xaxis.style.strokeColor}\r\n    //               strokeWidth={1}\r\n    //             />\r\n    //             {ChartState.subCharts.map((subchart, subchartIdx) => (\r\n    //               <React.Fragment key={subchartIdx}>\r\n    //                 <Rect\r\n    //                   // key={`subchartPrimaryYaxis-${subchartIdx}`}\r\n    //                   x={containerWidth - widthYAxis + 0.5}\r\n    //                   y={subchart.top + 0.5}\r\n    //                   width={widthYAxis}\r\n    //                   height={subchart.bottom - subchart.top}\r\n    //                   // fill={ChartState.xaxis.style.fillColor}\r\n    //                   stroke={ChartState.xaxis.style.strokeColor}\r\n    //                   strokeWidth={1}\r\n    //                 />\r\n    //                 <Rect\r\n    //                   // key={`subchartBorder-${subchartIdx}`}\r\n    //                   x={0 + 0.5}\r\n    //                   y={subchart.top + 0.5}\r\n    //                   width={containerWidth - widthYAxis}\r\n    //                   height={subchart.bottom - subchart.top}\r\n    //                   stroke={ChartState.xaxis.style.strokeColor}\r\n    //                   strokeWidth={1}\r\n    //                 />\r\n    //               </React.Fragment>\r\n    //             ))}\r\n    //           </Layer>\r\n    //           {/*  Canvas Layer 6 before 1 - x axis */}\r\n    //           <Layer\r\n    //             scale={{\r\n    //               x: previewSize / ChartState.containerSize.width,\r\n    //               y: previewSize / ChartState.containerSize.height,\r\n    //             }}\r\n    //           >\r\n    //             {xAxis.map((xaxisTick, xaxisTickIdx) => {\r\n    //               return (\r\n    //                 <React.Fragment key={xaxisTickIdx}>\r\n    //                   <Line\r\n    //                     x={xaxisTick.x}\r\n    //                     y={ChartState.containerSize.height - 1 - heightXAxis + 0.5}\r\n    //                     points={[0, 0, 0, heightTickMarkLines]}\r\n    //                     stroke={ChartState.xaxis.style.strokeColor}\r\n    //                     strokeWidth={1}\r\n    //                   />\r\n    //                   {!!ChartState.grid.useGridX ? (\r\n    //                     <Line\r\n    //                       x={xaxisTick.x}\r\n    //                       y={0 + 0.5}\r\n    //                       points={[0, 0, 0, ChartState.containerSize.height - 1 - heightXAxis + 0.5]}\r\n    //                       stroke={ChartState.grid.style.strokeColor}\r\n    //                       strokeWidth={1}\r\n    //                     />\r\n    //                   ) : null}\r\n    //                   <Shape\r\n    //                     sceneFunc={(context, shape) => {\r\n    //                       // context.fillS\r\n    //                       const ctx = context._context;\r\n    //                       ctx.font = ChartState.xaxis.style.fontSize + \"px \" + ChartState.xaxis.style.fontName;\r\n    //                       ctx.fillStyle = ChartState.xaxis.style.fontColor;\r\n    //                       ctx.textAlign = \"center\";\r\n    //                       ctx.textBaseline = \"top\";\r\n    //                       ctx.fillText(\r\n    //                         xaxisTick.dateString,\r\n    //                         xaxisTick.x,\r\n    //                         ChartState.containerSize.height - 1 - heightXAxis + 0.5 + 20 + 5 // additional 5px distance to end of tickmark\r\n    //                       );\r\n    //                       // (!) Konva specific method, it is very important\r\n    //                       context.fillStrokeShape(shape);\r\n    //                     }}\r\n    //                     // fill=\"#333\"\r\n    //                     // stroke={ChartState.options.xAxis.style.fontColor}\r\n    //                     // strokeWidth={1}\r\n    //                   />\r\n    //                 </React.Fragment>\r\n    //               );\r\n    //             })}\r\n    //           </Layer>\r\n    //           {/*  Canvas Layer 7 before 2 - y axis */}\r\n    //           <Layer\r\n    //             scale={{\r\n    //               x: previewSize / ChartState.containerSize.width,\r\n    //               y: previewSize / ChartState.containerSize.height,\r\n    //             }}\r\n    //           >\r\n    //             {ChartState.subCharts.map((subchart, subchartIdx) => {\r\n    //               return subchart.yaxis.map((singleYaxis, singleYaxisIdx) => {\r\n    //                 const yAxisTicks = singleYaxis.drawTicks;\r\n\r\n    //                 // const yAxisTicks =\r\n    //                 //   subchartIdx === 0 ? subchart.yaxis[0] : subchart.yaxis[0].slice(0, subchart.yaxis[0].length - 1);\r\n    //                 return yAxisTicks.map((yaxisTick, yaxisTickIdx) => {\r\n    //                   return (\r\n    //                     <React.Fragment key={yaxisTick.label}>\r\n    //                       <Line\r\n    //                         x={ChartState.containerSize.width - 1 - widthYAxis + 0.5}\r\n    //                         y={yaxisTick.pixY + 0.5}\r\n    //                         points={[0, 0, widthTickmarkLines, 0]}\r\n    //                         stroke={ChartState.xaxis.style.strokeColor}\r\n    //                         strokeWidth={1}\r\n    //                       />\r\n    //                       {!!ChartState.grid.useGridY ? (\r\n    //                         <Line\r\n    //                           x={0 + 0.5}\r\n    //                           y={yaxisTick.pixY + 0.5}\r\n    //                           points={[0, 0, ChartState.containerSize.width - 1 + 0.5, 0]}\r\n    //                           stroke={ChartState.grid.style.strokeColor}\r\n    //                           strokeWidth={1}\r\n    //                         />\r\n    //                       ) : null}\r\n    //                       <Shape\r\n    //                         sceneFunc={(context, shape) => {\r\n    //                           // context.fillS\r\n    //                           const ctx = context._context;\r\n    //                           ctx.font = ChartState.yaxis.style.fontSize + \"px \" + ChartState.yaxis.style.fontName;\r\n    //                           ctx.fillStyle = ChartState.yaxis.style.fontColor;\r\n    //                           ctx.textAlign = \"left\";\r\n    //                           ctx.textBaseline = \"middle\";\r\n    //                           ctx.fillText(\r\n    //                             yaxisTick.label,\r\n    //                             ChartState.containerSize.width - 1 - widthYAxis + widthTickmarkLines + 5 + 0.5,\r\n    //                             yaxisTick.pixY // additional 5px distance to end of tickmark\r\n    //                           );\r\n    //                           // (!) Konva specific method, it is very important\r\n    //                           context.fillStrokeShape(shape);\r\n    //                         }}\r\n    //                       />\r\n    //                     </React.Fragment>\r\n    //                   );\r\n    //                 });\r\n    //               });\r\n    //             })}\r\n    //           </Layer>\r\n    //         </Stage>\r\n    //       </Paper>\r\n    //     </Grid>\r\n    //   ) : null}\r\n    // </Grid>\r\n  );\r\n};\r\n","import { createChartGraphModel } from \"./CChartModel\";\r\nimport {\r\n  DataSeries,\r\n  ChartDataset,\r\n  IndicatorDataset,\r\n  isCandleChartDataset,\r\n  isVolumeDataset,\r\n  IndicatorDataSeries,\r\n  ChartDataSeries,\r\n  isLineChartDataset,\r\n  isIndicatorDataset,\r\n} from \"./Types/CChartTypes\";\r\nimport { AdditionalIndicatorGraphStateType, isChartGraph } from \"./Types/CChartStateTypes\";\r\n\r\nexport const iSMACalc = (\r\n  srcChartData: DataSeries,\r\n  srcChartName: string,\r\n  period: number = 20,\r\n  applyOn: \"open\" | \"close\" | \"high\" | \"low\" = \"close\"\r\n): IndicatorDataSeries => {\r\n  const indicatorData: IndicatorDataSeries =\r\n    srcChartData.map((srcDataset, srcDatasetIdx) => {\r\n      if (srcDatasetIdx < period - 1) return { prices: [null], date: srcDataset.date };\r\n      let singleSmaAcc = 0;\r\n      srcChartData.slice(srcDatasetIdx - period + 1, srcDatasetIdx + 1).forEach((selSrcDataset) => {\r\n        if (isLineChartDataset(selSrcDataset)) singleSmaAcc += selSrcDataset.close;\r\n        else if (isIndicatorDataset(selSrcDataset))\r\n          singleSmaAcc += !!selSrcDataset.prices[0] ? selSrcDataset.prices[0] : 0;\r\n      });\r\n      return { prices: [singleSmaAcc / period], date: srcDataset.date };\r\n    }) || [];\r\n  return indicatorData;\r\n  // const indicatorData: IndicatorDataset[] = [];\r\n  // for (let i = 0; i < srcChartData.length; i++) {\r\n  //   if (i < period - 1) {\r\n  //     indicatorData.push({ prices: [null], date: srcChartData[i].date });\r\n  //     continue;\r\n  //   }\r\n  //   let singleSmaAcc = 0;\r\n  //   for (let j = i - period + 1; j <= i; j++) {\r\n  //     singleSmaAcc += srcChartData[j].close;\r\n  //   }\r\n  //   indicatorData.push({ prices: [singleSmaAcc / period], date: srcChartData[i].date });\r\n  // }\r\n  // return indicatorData;\r\n};\r\n\r\nexport const iSMA: AdditionalIndicatorGraphStateType[\"indicator\"] = {\r\n  indicatorFn: iSMACalc,\r\n  name: \"SMA\",\r\n  params: [{ name: \"period\", val: 10 }],\r\n  default: { params: [{ name: \"period\", val: 10 }], newSubchart: false },\r\n  type: \"line\",\r\n};\r\n\r\nexport const iEMACalc = (\r\n  srcChartData: DataSeries,\r\n  srcChartName: string,\r\n  period: number = 20,\r\n  applyOn: \"open\" | \"close\" | \"high\" | \"low\" = \"close\"\r\n): IndicatorDataSeries => {\r\n  const indicatorData: IndicatorDataSeries = [];\r\n  for (let i = 0; i < srcChartData.length; i++) {\r\n    if (i < period - 1) {\r\n      indicatorData.push({ prices: [null], date: srcChartData[i].date });\r\n      continue;\r\n    } else if (i === period - 1) {\r\n      let initSMA = 0;\r\n      for (let j = 0; j < period; j++) {\r\n        const dataset = srcChartData[j];\r\n        const price = isLineChartDataset(dataset)\r\n          ? dataset.close\r\n          : isIndicatorDataset(dataset)\r\n          ? dataset.prices[0] || 0\r\n          : 0;\r\n        initSMA += price;\r\n      }\r\n      initSMA /= period;\r\n      indicatorData.push({ prices: [initSMA], date: srcChartData[i].date });\r\n    } else {\r\n      const multiplier = 2 / (period + 1);\r\n      const dataset = srcChartData[i];\r\n      const price = isLineChartDataset(dataset)\r\n        ? dataset.close\r\n        : isIndicatorDataset(dataset)\r\n        ? dataset.prices[0] || 0\r\n        : 0;\r\n      const ema =\r\n        (price - (indicatorData[i - 1].prices[0] as number)) * multiplier + (indicatorData[i - 1].prices[0] as number);\r\n      indicatorData.push({ prices: [ema], date: srcChartData[i].date });\r\n    }\r\n  }\r\n  return indicatorData;\r\n};\r\nexport const iEMA: AdditionalIndicatorGraphStateType[\"indicator\"] = {\r\n  indicatorFn: iEMACalc,\r\n  name: \"EMA\",\r\n  params: [{ name: \"period\", val: 10 }],\r\n  default: { params: [{ name: \"period\", val: 10 }], newSubchart: false },\r\n  type: \"line\",\r\n};\r\n\r\nexport const iATRCalc = (\r\n  srcChartData: ChartDataset[],\r\n  srcChartName: string,\r\n  period: number = 20,\r\n  applyOn: \"open\" | \"close\" | \"high\" | \"low\" = \"close\"\r\n): IndicatorDataSeries => {\r\n  const indicatorData: IndicatorDataset[] = [];\r\n  for (let i = 0; i < srcChartData.length; i++) {\r\n    if (i < period) {\r\n      indicatorData.push({ prices: [null], date: srcChartData[i].date });\r\n      continue;\r\n    }\r\n    let singleValAcc = 0;\r\n    for (let j = i - period + 1; j <= i; j++) {\r\n      const dataset = srcChartData[j];\r\n      const dataset1 = srcChartData[j - 1];\r\n      let singleAtr = 0;\r\n      if (isCandleChartDataset(dataset) && isCandleChartDataset(dataset1)) {\r\n        const hl = dataset.high - dataset.low;\r\n        const hc1 = Math.abs(dataset.high - dataset1.close);\r\n        const lc1 = Math.abs(dataset.low - dataset1.close);\r\n        singleAtr = Math.max(hl, hc1, lc1);\r\n      } else {\r\n        const dc = Math.abs(dataset.close - dataset1.close);\r\n      }\r\n      singleValAcc += singleAtr;\r\n    }\r\n    indicatorData.push({ prices: [singleValAcc / period], date: srcChartData[i].date });\r\n  }\r\n  return indicatorData;\r\n};\r\nexport const iATR: AdditionalIndicatorGraphStateType[\"indicator\"] = {\r\n  indicatorFn: iATRCalc,\r\n  name: \"ATR\",\r\n  params: [{ name: \"period\", val: 14 }],\r\n  default: { params: [{ name: \"period\", val: 14 }], newSubchart: true },\r\n  type: \"line\",\r\n};\r\n\r\nexport const iRSICalc = (\r\n  srcChartData: ChartDataset[],\r\n  srcChartName: string,\r\n  period: number = 20,\r\n  applyOn: \"open\" | \"close\" | \"high\" | \"low\" = \"close\"\r\n): IndicatorDataSeries => {\r\n  const indicatorData: IndicatorDataset[] = [];\r\n  let calcData: { lastUpEma: number; lastDwnEma: number } | null = null;\r\n  for (let i = 0; i < srcChartData.length; i++) {\r\n    if (i < period) {\r\n      indicatorData.push({ prices: [null], date: srcChartData[i].date });\r\n      if (i === 0) continue;\r\n    }\r\n    const dataset = srcChartData[i];\r\n    const dataset1 = srcChartData[i - 1];\r\n    const dClose = dataset.close - dataset1.close;\r\n    const up = dClose > 0 ? dClose : 0;\r\n    const dwn = dClose < 0 ? -dClose : 0;\r\n    const w = 1 / period;\r\n    if (i === 1) {\r\n      calcData = { lastUpEma: up, lastDwnEma: dwn };\r\n    }\r\n    if (!calcData || i < period) {\r\n      continue;\r\n    }\r\n    const upSmoothed = up * w + (1 - w) * calcData.lastUpEma;\r\n    calcData.lastUpEma = upSmoothed;\r\n    const dwnSmoothed = dwn * w + (1 - w) * calcData.lastDwnEma;\r\n    calcData.lastDwnEma = dwnSmoothed;\r\n    const rsi = dwnSmoothed === 0 ? 100 : 100 - 100 / (1 + upSmoothed / dwnSmoothed);\r\n    if (i < period) indicatorData.push({ prices: [null], date: srcChartData[i].date });\r\n    else indicatorData.push({ prices: [rsi], date: srcChartData[i].date });\r\n  }\r\n  return indicatorData;\r\n};\r\nexport const iRSI: AdditionalIndicatorGraphStateType[\"indicator\"] = {\r\n  indicatorFn: iRSICalc,\r\n  name: \"RSI\",\r\n  params: [{ name: \"period\", val: 14 }],\r\n  default: { params: [{ name: \"period\", val: 14 }], newSubchart: true, decimals: 2, fixedYScale: [0, 100] },\r\n  type: \"line\",\r\n};\r\n\r\nexport const iOBVCalc = (srcChartData: ChartDataset[]): IndicatorDataSeries => {\r\n  const indicatorData: IndicatorDataset[] = [];\r\n  for (let i = 0; i < srcChartData.length; i++) {\r\n    const dataset = srcChartData[i];\r\n    if (i === 0 && isVolumeDataset(dataset)) {\r\n      indicatorData.push({ prices: [dataset.volume], date: dataset.date });\r\n      continue;\r\n    }\r\n    const dataset1 = srcChartData[i - 1];\r\n    if (!isVolumeDataset(dataset) || !isVolumeDataset(dataset1)) {\r\n      indicatorData.push({ prices: [null], date: srcChartData[i].date });\r\n      continue;\r\n    }\r\n    const obv = dataset.volume + dataset1.volume;\r\n    indicatorData.push({ prices: [obv], date: srcChartData[i].date });\r\n  }\r\n  return indicatorData;\r\n};\r\nexport const iOBV: AdditionalIndicatorGraphStateType[\"indicator\"] = {\r\n  name: \"OBV\",\r\n  type: \"line\",\r\n  params: [],\r\n  default: { params: [], newSubchart: true, decimals: 0 },\r\n  indicatorFn: iOBVCalc,\r\n};\r\n\r\nexport const iVolumeCalc = (srcChartData: ChartDataset[]): IndicatorDataSeries => {\r\n  const indicatorData: IndicatorDataset[] = [];\r\n  for (let i = 0; i < srcChartData.length; i++) {\r\n    const dataset = srcChartData[i];\r\n    if (isVolumeDataset(dataset)) {\r\n      indicatorData.push({ prices: [dataset.volume], date: dataset.date });\r\n    } else {\r\n      indicatorData.push({ prices: [0], date: dataset.date });\r\n    }\r\n  }\r\n  return indicatorData;\r\n};\r\nexport const iVolume: AdditionalIndicatorGraphStateType[\"indicator\"] = {\r\n  indicatorFn: iVolumeCalc,\r\n  name: \"Volume\",\r\n  params: [],\r\n  default: { params: [], newSubchart: true, decimals: 0 },\r\n  type: \"bars\",\r\n};\r\n\r\nexport const iMACDCalc = (\r\n  srcChartData: ChartDataset[],\r\n  srcChartName: string,\r\n  periodEmaShort: number = 12,\r\n  periodEmaLong: number = 26,\r\n  periodSignal: number = 9,\r\n  applyOn: \"open\" | \"close\" | \"high\" | \"low\" = \"close\"\r\n): IndicatorDataSeries => {\r\n  const indicatorData: IndicatorDataSeries = [];\r\n  const emaShort = iEMACalc(srcChartData, srcChartName, periodEmaShort);\r\n  const emaLong = iEMACalc(srcChartData, srcChartName, periodEmaLong);\r\n\r\n  const macd: IndicatorDataSeries = emaShort.map((val, valIdx) => {\r\n    const emaLongVal = emaLong[valIdx].prices[0];\r\n    const emaShortVal = val.prices[0];\r\n    const macd = emaShortVal === null || emaLongVal === null ? null : emaShortVal - emaLongVal;\r\n    return {\r\n      prices: [macd],\r\n      date: srcChartData[valIdx].date,\r\n      priceLabels: [\"EMA\"],\r\n    };\r\n  });\r\n  //   // const emaIn = ema.map((ema1, ema1Idx) => ({ close: ema1.prices[0], date: ema1.date }));\r\n  const signal = iEMACalc(macd, srcChartName, periodSignal);\r\n  const macdComplete = macd.map((macdVal, macdIdx) => {\r\n    const macdValPrice = macdVal.prices[0];\r\n    const signalVal = signal[macdIdx].prices[0];\r\n    const macdHistogramm = macdValPrice === null || signalVal === null ? null : macdValPrice-signalVal; \r\n    return { ...macdVal, prices: [macdValPrice, signalVal, macdHistogramm] };\r\n  });\r\n  return macdComplete;\r\n};\r\n\r\nexport const iMACD: AdditionalIndicatorGraphStateType[\"indicator\"] = {\r\n  indicatorFn: iMACDCalc,\r\n  name: \"MACD\",\r\n  params: [\r\n    { name: \"period short\", val: 12 },\r\n    { name: \"period long\", val: 26 },\r\n    { name: \"signal period\", val: 9 },\r\n  ],\r\n  default: {\r\n    params: [\r\n      { name: \"period short\", val: 12 },\r\n      { name: \"period long\", val: 26 },\r\n      { name: \"signal period\", val: 9 },\r\n    ],\r\n    newSubchart: true,\r\n    // decimals: 0,\r\n  },\r\n  type: \"line\",\r\n};\r\n","import { makeStyles, Theme, createStyles, Typography, TypographyProps } from \"@material-ui/core\";\r\nimport { Variant } from \"@material-ui/core/styles/createTypography\";\r\nimport { TreeItemProps, TreeItem } from \"@material-ui/lab\";\r\n\r\nconst useTreeItemStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      color: theme.palette.text.secondary,\r\n      \"&:hover > $content\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n      },\r\n      \"&:focus > $content, &$selected > $content\": {\r\n        backgroundColor: `var(--tree-view-bg-color, ${theme.palette.grey[400]})`,\r\n        color: \"var(--tree-view-color)\",\r\n      },\r\n      \"&:focus > $content $label, &:hover > $content $label, &$selected > $content $label\": {\r\n        backgroundColor: \"transparent\",\r\n      },\r\n    },\r\n    content: {\r\n      color: theme.palette.text.secondary,\r\n      borderTopRightRadius: theme.spacing(2),\r\n      borderBottomRightRadius: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n      fontWeight: theme.typography.fontWeightMedium,\r\n      \"$expanded > &\": {\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n      },\r\n      width: \"auto\",\r\n    },\r\n    group: {\r\n      marginLeft: 0,\r\n      \"& $content\": {\r\n        paddingLeft: theme.spacing(2),\r\n      },\r\n    },\r\n    expanded: {},\r\n    selected: {},\r\n    label: {\r\n      fontWeight: \"inherit\",\r\n      color: \"inherit\",\r\n    },\r\n    labelRoot: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: theme.spacing(1, 0),\r\n    },\r\n    labelRootBtn: {\r\n      // display: \"flex\",\r\n      // alignItems: \"left\",\r\n      // padding: theme.spacing(0.5, 0),\r\n      width: \"max-content\",\r\n      paddingRight: 5\r\n    },\r\n    btnLabel: {\r\n      padding: 0,\r\n    },\r\n    labelIcon: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    labelText: {\r\n      fontWeight: \"inherit\",\r\n      flexGrow: 1,\r\n      paddingLeft: 3\r\n    },\r\n  })\r\n);\r\n\r\ndeclare module \"csstype\" {\r\n  interface Properties {\r\n    \"--tree-view-color\"?: string;\r\n    \"--tree-view-bg-color\"?: string;\r\n  }\r\n}\r\nexport type CTreeItemProps = TreeItemProps & {\r\n  bgColor?: string;\r\n  color?: string;\r\n  labelIcon?: JSX.Element;\r\n  labelInfo?: JSX.Element | string;\r\n  labelText: string | JSX.Element;\r\n  onLabelClick?: TreeItemProps[\"onLabelClick\"];\r\n  onIconClick?: TreeItemProps[\"onIconClick\"];\r\n  labelTypographyVariant?: Variant;\r\n  infoTypographyVariant?: Variant;\r\n  labelTypographyColor?: TypographyProps[\"color\"];\r\n  infoTypographyColor?: TypographyProps[\"color\"];\r\n};\r\n\r\nexport const CTreeItem = (props: CTreeItemProps) => {\r\n  const classes = useTreeItemStyles();\r\n  const {\r\n    labelText,\r\n    labelIcon: LabelIcon,\r\n    labelInfo,\r\n    color,\r\n    bgColor,\r\n    onLabelClick,\r\n    onIconClick,\r\n    labelTypographyVariant,\r\n    infoTypographyVariant,\r\n    labelTypographyColor,\r\n    infoTypographyColor,\r\n    ...other\r\n  } = props;\r\n\r\n  return (\r\n    <TreeItem\r\n      onLabelClick={onLabelClick}\r\n      onIconClick={onIconClick}\r\n      label={\r\n        <div className={classes.labelRoot}>\r\n          {LabelIcon}\r\n          <Typography\r\n            variant={labelTypographyVariant ?? \"body1\"}\r\n            className={classes.labelText}\r\n            color={labelTypographyColor ?? \"initial\"}\r\n          >\r\n            {labelText}\r\n          </Typography>\r\n          <Typography variant={infoTypographyVariant ?? \"caption\"} color={infoTypographyColor ?? \"initial\"}>\r\n            {labelInfo}\r\n          </Typography>\r\n        </div>\r\n      }\r\n      style={{\r\n        \"--tree-view-color\": color,\r\n        \"--tree-view-bg-color\": bgColor,\r\n        // boxSizing: \"content-box\",\r\n      }}\r\n      classes={{\r\n        root: classes.root,\r\n        content: classes.content,\r\n        expanded: classes.expanded,\r\n        selected: classes.selected,\r\n        group: classes.group,\r\n        label: classes.label,\r\n      }}\r\n      {...other}\r\n    />\r\n  );\r\n};\r\n","import { Button, Grid, IconButton, OutlinedInput, Popover, Slider, TextField, Typography } from \"@material-ui/core\";\r\nimport { mdiCheck, mdiExclamation, mdiHook } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport React from \"react\";\r\nimport { colorNameToHex, colorNameToRGB, hexToRgb } from \"./utils\";\r\n\r\n// const colors = [\r\n//   \"#000\", //black to white\r\n//   \"#666\",\r\n//   \"#bbb\",\r\n//   \"#fff\",\r\n//   \"#9013fe\", //violets\r\n//   \"#bd10e0\",\r\n//   \"#3f51b5\", // blues\r\n//   \"#0693E3\",\r\n//   \"#8ED1FC\",\r\n//   \"#008080\", // greens\r\n//   \"#00D084\",\r\n//   \"#7BDCB5\",\r\n//   \"#b80000\", // reds\r\n//   \"#f50057\",\r\n//   \"#f78da7\",\r\n//   \"#795548\", // brown to yellow\r\n//   \"#FF6900\",\r\n//   \"#FCB900\",\r\n// ];\r\nconst rgbaColor = [\r\n  \"0, 0, 0\", //black to whites\r\n  \"102, 102, 102\",\r\n  \"187, 187, 187\",\r\n  \"255, 255, 255\",\r\n  \"144, 19, 254\", // violets\r\n  \"189, 16, 224\",\r\n  \"63, 81, 181\", //blues\r\n  \"6, 147, 227\",\r\n  \"142, 209, 252\",\r\n  \"0, 128, 128\", // greens\r\n  \"0, 208, 132\",\r\n  \"123, 220, 181\",\r\n  \"184, 0, 0\", // red\r\n  \"245, 0, 87\",\r\n  \"247, 141, 167\",\r\n  \"121, 85, 72\", // brown to yellow\r\n  \"255, 105, 0\",\r\n  \"252, 185, 0\",\r\n];\r\n\r\n// const useStyles = makeStyles((theme: Theme) =>\r\n//   createStyles({\r\n//     root: {\r\n//       \"& > *\": {\r\n//         margin: theme.spacing(1),\r\n//         width: \"25ch\",\r\n//       },\r\n//     },\r\n//   })\r\n// );\r\n\r\nexport const ColorRect = (props: {\r\n  color: React.CSSProperties[\"background\"];\r\n  width?: number;\r\n  height?: number;\r\n  container?: any;\r\n}) => {\r\n  const { color, width = 15, height = 15, container = {} } = props;\r\n  return (\r\n    <div style={{ width: 24, height: 24, boxSizing: \"border-box\", padding: 4, ...container }}>\r\n      <div\r\n        style={{\r\n          border: \"2px solid #000\",\r\n          width: width,\r\n          height: height,\r\n          borderRadius: 3,\r\n          boxSizing: \"border-box\",\r\n          background: color,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type ColorpickerProps = {\r\n  color: React.CSSProperties[\"background\"];\r\n  onColorSelected: (color: string) => void;\r\n};\r\nexport const Colorpicker = (props: ColorpickerProps) => {\r\n  const { color, onColorSelected } = props;\r\n  const [Open, setOpen] = React.useState(false);\r\n  const [ColorHover, setColorHover] = React.useState<string | null>(null);\r\n\r\n  const InputRef = React.useRef<HTMLButtonElement>(null);\r\n\r\n  const isHex = /((^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$))/i.test(color as string);\r\n  const hexToRgbRes = !!isHex && typeof color === \"string\" ? hexToRgb(color) : null;\r\n  const isRgb =\r\n    typeof color === \"string\"\r\n      ? (color as string).match(\r\n          /^(rgb)(a?)[(]\\s*([\\d.]+\\s*%?)\\s*,\\s*([\\d.]+\\s*%?)\\s*,\\s*([\\d.]+\\s*%?)\\s*(?:,\\s*([\\d.]+)\\s*)?[)]$/\r\n        )\r\n      : null;\r\n  const isRgba = !!isRgb && 2 in isRgb && isRgb[2] === \"a\";\r\n  const rgbInternal =\r\n    !!isRgb && 3 in isRgb && 4 in isRgb && 5 in isRgb\r\n      ? [parseFloat(isRgb[3]), parseFloat(isRgb[4]), parseFloat(isRgb[5])]\r\n      : isHex && !!hexToRgbRes\r\n      ? [hexToRgbRes.r, hexToRgbRes.g, hexToRgbRes.b]\r\n      : [];\r\n  if (rgbInternal.length === 0) {\r\n    const colorNameRes = colorNameToRGB(color as string);\r\n    if (!!colorNameRes) rgbInternal.push(colorNameRes.r, colorNameRes.g, colorNameRes.b);\r\n  }\r\n\r\n  const alphaProp = !!isRgba && !!isRgb && 6 in isRgb ? parseFloat(isRgb[6]) * 100 : 100;\r\n  const [AlphaVal, setAlphaVal] = React.useState(alphaProp);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <IconButton\r\n        color=\"primary\"\r\n        style={{ padding: 0 }}\r\n        onClick={() => {\r\n          setOpen(true);\r\n        }}\r\n        ref={InputRef}\r\n      >\r\n        <ColorRect color={color} />\r\n      </IconButton>\r\n      <Popover\r\n        id={\"id\"}\r\n        open={Open}\r\n        anchorEl={InputRef.current}\r\n        onClose={() => {\r\n          setOpen(false);\r\n        }}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        }}\r\n        style={{ width: 250 + 50 }}\r\n      >\r\n        <Grid\r\n          container\r\n          alignContent=\"center\"\r\n          alignItems=\"center\"\r\n          justify=\"space-evenly\"\r\n          spacing={1}\r\n          style={{ margin: \"10px 15px 10px 15px\", width: 250 }}\r\n        >\r\n          {rgbaColor.map((clr, clrIdx) => (\r\n            <Grid item xs={2} key={clrIdx}>\r\n              <IconButton\r\n                color=\"default\"\r\n                style={{ padding: 0 }}\r\n                onMouseOver={(e) => {\r\n                  setColorHover(`rgba(${rgbaColor[clrIdx]},${AlphaVal})`);\r\n                }}\r\n                onMouseLeave={() => {\r\n                  setColorHover(null);\r\n                }}\r\n                onClick={() => {\r\n                  onColorSelected(\"rgba(\" + rgbaColor[clrIdx] + \",\" + AlphaVal / 100 + \")\");\r\n                  // setOpen(false);\r\n                }}\r\n              >\r\n                <ColorRect\r\n                  color={\"rgba(\" + clr + \",1)\"}\r\n                  width={24}\r\n                  height={24}\r\n                  container={{ width: \"auto\", height: \"auto\" }}\r\n                />\r\n              </IconButton>\r\n            </Grid>\r\n          ))}\r\n          <Grid item xs={3}>\r\n            <Typography>Alpha</Typography>\r\n          </Grid>\r\n          <Grid item xs={6} style={{ padding: \"0px 10px\" }}>\r\n            <Slider\r\n              value={AlphaVal}\r\n              onChange={(e, val) => {\r\n                setAlphaVal(Array.isArray(val) ? val[0] : val);\r\n                onColorSelected(\r\n                  `rgba(${rgbInternal[0]},${rgbInternal[1]},${rgbInternal[2]},${\r\n                    (Array.isArray(val) ? val[0] : val) / 100\r\n                  })`\r\n                );\r\n              }}\r\n            ></Slider>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              margin=\"none\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              inputProps={{ style: { padding: \"5px 5px 5px 10px\" } }}\r\n              value={AlphaVal}\r\n              onChange={(e) => {\r\n                let val = parseInt(e.target.value, 10);\r\n                if (isNaN(val)) val = 0;\r\n                if (val < 0 || val > 100) return;\r\n                setAlphaVal(val);\r\n                onColorSelected(`rgba(${rgbInternal[0]},${rgbInternal[1]},${rgbInternal[2]},${val / 100})`);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <div style={{ background: \"#bbb\", borderTop: \"1px solid #666\" }}>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            alignContent=\"center\"\r\n            justify=\"center\"\r\n            // spacing={.5}\r\n            style={{\r\n              paddingBottom: 5,\r\n\r\n              // width: \"100%\",\r\n              // padding: \"10px 10px 0px 15px\",\r\n              margin: \"10px 15px 0px 15px\",\r\n              width: 250,\r\n              // textAlign: \"center\",\r\n            }}\r\n            // style={{ margin: \"10px 10px 0px 15px\", width: 250 }}\r\n          >\r\n            <Grid item xs={2}>\r\n              <Typography component=\"div\" align=\"center\">\r\n                R\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={2}>\r\n              <Typography component=\"div\" align=\"center\">\r\n                G\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid item xs={2}>\r\n              <Typography component=\"div\" align=\"center\">\r\n                B\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <Typography component=\"div\" align=\"center\">\r\n                A\r\n              </Typography>\r\n            </Grid>\r\n\r\n            {/* <Grid item xs={2} style={{ padding: \"5px 0 0 0\" }}>\r\n            <TextField\r\n              value={!!ColorHover ? ColorHover : color}\r\n              margin=\"none\"\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              inputProps={{ style: { padding: 5, background: \"#bbb\" } }}\r\n            />\r\n          </Grid> */}\r\n            <Grid item xs={2} />\r\n            <Grid item xs={2}>\r\n              <ColorRect\r\n                color={!!ColorHover ? ColorHover : color}\r\n                width={24}\r\n                height={24}\r\n                container={{ width: \"auto\", height: \"auto\" }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            alignContent=\"center\"\r\n            justify=\"center\"\r\n            // spacing={.5}\r\n            style={{\r\n              paddingBottom: 15,\r\n              // borderTop: \"1px solid #666\",\r\n\r\n              // width: \"100%\",\r\n              // padding: \"10px 10px 0px 15px\",\r\n              paddingLeft: \"15px\",\r\n              // paddingRight: \"0px\",\r\n              // width: \"min-content\",\r\n              // textAlign: \"center\",\r\n            }}\r\n            // style={{ margin: \"10px 10px 0px 15px\", width: 250 }}\r\n          >\r\n            <Grid item xs={2}>\r\n              <TextField\r\n                value={!!rgbInternal ? rgbInternal[0] : color}\r\n                margin=\"none\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                inputProps={{\r\n                  style: { padding: 5, background: `rgba(184, 0, 0, ${AlphaVal / 100})` },\r\n                }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={2}>\r\n              <TextField\r\n                value={!!rgbInternal ? rgbInternal[1] : color}\r\n                margin=\"none\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                inputProps={{ style: { padding: 5, background: `rgba(0, 208, 132, ${AlphaVal / 100})` } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <TextField\r\n                value={!!rgbInternal ? rgbInternal[2] : color}\r\n                margin=\"none\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                inputProps={{ style: { padding: 5, background: `rgba(6, 147, 227, ${AlphaVal / 100})` } }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={2}>\r\n              <TextField\r\n                value={AlphaVal}\r\n                margin=\"none\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                inputProps={{ style: { padding: 5, background: `#bbb` } }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={1} />\r\n            <Grid item xs={3}>\r\n              <div style={{ textAlign: \"center\", margin: \"0px auto\" }}>\r\n                {/* <IconButton color=\"primary\" size=\"medium\" style={{ border: \"1px solid #666\", borderRadius: \"50%\", background: \"limegreen\" }}>\r\n                  <Icon path={mdiCheck} size={1} />\r\n                </IconButton> */}\r\n                <Button\r\n                  color=\"primary\"\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  style={{ minWidth: 0 }}\r\n                  onClick={() => setOpen(false)}\r\n                >\r\n                  OK\r\n                </Button>\r\n              </div>\r\n            </Grid>\r\n            {/* <Grid item xs={1} />  */}\r\n          </Grid>\r\n        </div>\r\n      </Popover>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { Icon } from \"@mdi/react\";\r\nimport { ToggleButton, ToggleButtonGroup, TreeView } from \"@material-ui/lab\";\r\nimport {\r\n  mdiMenuDown,\r\n  mdiMenuRight,\r\n  mdiDiameterVariant,\r\n  mdiChartBellCurve,\r\n  mdiArrowExpandVertical,\r\n  mdiPoll,\r\n  mdiHome,\r\n  mdiFilter,\r\n  mdiMagnify,\r\n  mdiAlphabetical,\r\n  mdiSortAlphabeticalAscending,\r\n  mdiDivingScubaTank,\r\n  mdiBorderColor,\r\n  mdiClose,\r\n  mdiIframeVariableOutline,\r\n} from \"@mdi/js\";\r\nimport React from \"react\";\r\nimport { iSMA, iEMA, iRSI, iMACD, iATR, iVolume, iOBV } from \"../CIndicator\";\r\nimport {\r\n  AdditionalIndicatorGraphStateType,\r\n  CalculatedChartStateType,\r\n  ChartStateHookType,\r\n  isChartGraph,\r\n  isIndicatorGraph,\r\n} from \"../Types/CChartStateTypes\";\r\nimport { ChartDataSeries } from \"../Types/CChartTypes\";\r\nimport { Grid, IconButton, TextField, Typography, useTheme } from \"@material-ui/core\";\r\nimport { CTreeItem } from \"../CTreeItem\";\r\nimport { CChartMenuStateType } from \"./ChartMenu\";\r\nimport { ReducerActionType } from \"../ChartState/CChartStateReducer\";\r\nimport { Colorpicker } from \"../Colorpicker\";\r\n\r\nconst onIndicatorLabelClick = (\r\n  indi: AdditionalIndicatorGraphStateType[\"indicator\"],\r\n  ChartState: CalculatedChartStateType\r\n) => {\r\n  if (indi.default.newSubchart)\r\n    return () => {\r\n      ChartState.methods.addSubchart(\r\n        ChartState.subCharts[0].yaxis[0].graphs[0].data as ChartDataSeries,\r\n        ChartState.subCharts[0].yaxis[0].graphs[0].name,\r\n        indi\r\n      );\r\n    };\r\n  else\r\n    return () => {\r\n      ChartState.methods.addGraph(\r\n        ChartState.subCharts[0].yaxis[0].graphs[0].data as ChartDataSeries,\r\n        ChartState.subCharts[0].yaxis[0].graphs[0].name,\r\n        0,\r\n        indi\r\n      );\r\n    };\r\n};\r\n\r\nexport const CIndicatorGraphTreeItem = (props: {\r\n  subchartIdx: number;\r\n  yaxisIdx: number;\r\n  graphIdx: number;\r\n  ChartState: CalculatedChartStateType;\r\n  ChartStateDispatch: ChartStateHookType[1];\r\n  handleToggleExpanded?: (id: string) => void;\r\n}) => {\r\n  const { subchartIdx, yaxisIdx, graphIdx, ChartState, ChartStateDispatch, handleToggleExpanded } = props;\r\n  const graphGeneric = ChartState.subCharts[subchartIdx].yaxis[yaxisIdx].graphs[graphIdx];\r\n  const graph = isIndicatorGraph(graphGeneric) ? graphGeneric : null;\r\n  const theme = useTheme();\r\n\r\n  if (!graph) return null;\r\n\r\n  return (\r\n    <CTreeItem\r\n      key={`graph-sub-${subchartIdx}-y-${yaxisIdx}-graph-${graphIdx}`}\r\n      nodeId={`graph-sub-${subchartIdx}-y-${yaxisIdx}-graph-${graphIdx}`}\r\n      labelText={graph.name}\r\n      bgColor={theme.palette.primary.light}\r\n      onLabelClick={() => {\r\n        const id = `graph-sub-${subchartIdx}-y-${yaxisIdx}-graph-${graphIdx}`;\r\n        handleToggleExpanded?.(id);\r\n      }}\r\n      labelIcon={\r\n        <div\r\n          style={{\r\n            background: theme.palette.primary.main,\r\n            width: 32,\r\n            height: 32,\r\n            border: \"1px solid #666\",\r\n            borderRadius: 5,\r\n            marginRight: 10,\r\n          }}\r\n        >\r\n          <Icon path={mdiChartBellCurve} size={\"32px\"} color={theme.palette.secondary.contrastText} />\r\n        </div>\r\n      }\r\n      labelInfo={\r\n        subchartIdx !== 0 || graphIdx !== 0 ? (\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              const action: ReducerActionType<\"removeGraph\"> = {\r\n                task: \"removeGraph\",\r\n                params: { subchartIdx, yaxisIdx: 0, graphIdx },\r\n              };\r\n              (ChartStateDispatch as React.Dispatch<ReducerActionType<\"removeGraph\">>)(action);\r\n            }}\r\n          >\r\n            <Icon path={mdiClose} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n          </IconButton>\r\n        ) : undefined\r\n      }\r\n    >\r\n      <CTreeItem\r\n        key={subchartIdx * 1000 + yaxisIdx * 100 + graphIdx}\r\n        nodeId={(subchartIdx * 1000 + yaxisIdx * 100 + graphIdx).toString()}\r\n        labelText=\"line stroke color\"\r\n        labelIcon={<Icon path={mdiBorderColor} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n        labelInfo={\r\n          <Colorpicker\r\n            color={ChartState.subCharts[subchartIdx].yaxis[0].graphs[graphIdx].style?.strokeColor?.[0]}\r\n            onColorSelected={(color) => {\r\n              const action: ReducerActionType<\"setLineChartStrokeColor\"> = {\r\n                task: \"setLineChartStrokeColor\",\r\n                params: { color: color, subchartIdx, yaxisIdx: 0, graphIdx },\r\n              };\r\n              (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setLineChartStrokeColor\">>)(action);\r\n            }}\r\n          />\r\n        }\r\n      />\r\n      {graph.indicator.params.map((param, paramIdx) => (\r\n        <CTreeItem\r\n          nodeId={`${2 + subchartIdx}00-${graphIdx}-${paramIdx}`}\r\n          labelText={param.name}\r\n          labelIcon={\r\n            <Icon path={mdiIframeVariableOutline} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n          }\r\n          labelInfo={\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"none\"\r\n              size=\"small\"\r\n              inputProps={{ style: { padding: 5, width: 50 } }}\r\n              defaultValue={param.val}\r\n              onChange={(e) => {\r\n                const val = parseFloat(e.target.value);\r\n\r\n                if (isNaN(val)) return;\r\n                const action: ReducerActionType<\"setIndicatorParam\"> = {\r\n                  task: \"setIndicatorParam\",\r\n                  params: { val, subchartIdx, yaxisIdx: 0, graphIdx, paramIdx },\r\n                };\r\n                (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setIndicatorParam\">>)(action);\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      ))}\r\n    </CTreeItem>\r\n  );\r\n};\r\n\r\nexport type IndicatorCategoryType = \"Average\" | \"Oszillator\" | \"Volatility\" | \"Volume\";\r\n\r\nexport const ChartMenuIndicators = (props: {\r\n  ChartState: CalculatedChartStateType;\r\n  onNavigate: (target: CChartMenuStateType[\"location\"]) => void;\r\n  open: CChartMenuStateType[\"location\"];\r\n  ChartStateDispatch: ChartStateHookType[1];\r\n}) => {\r\n  const { ChartState, onNavigate, open, ChartStateDispatch } = props;\r\n  const theme = useTheme();\r\n  const [FilterCat, setFilterCat] = React.useState(true);\r\n\r\n  const categorys: { name: IndicatorCategoryType; icon: string }[] = [\r\n    { name: \"Average\", icon: mdiDiameterVariant },\r\n    { name: \"Oszillator\", icon: mdiChartBellCurve },\r\n    { name: \"Volatility\", icon: mdiArrowExpandVertical },\r\n    { name: \"Volume\", icon: mdiPoll },\r\n  ];\r\n  const indicators: {\r\n    name: string;\r\n    indicator: AdditionalIndicatorGraphStateType[\"indicator\"];\r\n    category: IndicatorCategoryType;\r\n  }[] = [\r\n    { name: \"SMA\", indicator: iSMA, category: \"Average\" },\r\n    { name: \"EMA\", indicator: iEMA, category: \"Average\" },\r\n    { name: \"RSI\", indicator: iRSI, category: \"Oszillator\" },\r\n    { name: \"MACD\", indicator: iMACD, category: \"Oszillator\" },\r\n    { name: \"ATR\", indicator: iATR, category: \"Volatility\" },\r\n    { name: \"Volume\", indicator: iVolume, category: \"Volume\" },\r\n    { name: \"OBV\", indicator: iOBV, category: \"Volume\" },\r\n  ];\r\n\r\n  const amtIndicators = ChartState.subCharts\r\n    .map((subchart, subIdx) =>\r\n      subchart.yaxis.map((yaxis, yaxixsIdx) => yaxis.graphs.filter((fgraph) => fgraph.type === \"indicator\").length)\r\n    )\r\n    .flat()\r\n    .reduce((acc, cur) => acc + cur);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          right: 24, //see padding title bar\r\n          zIndex: 2,\r\n\r\n          // padding\r\n        }}\r\n      >\r\n        {amtIndicators > 0 ? (\r\n          <div style={{ paddingBottom: 5 }}>\r\n            <ToggleButtonGroup value={\"web\"} exclusive style={{ borderRadius: 500 }} size=\"small\">\r\n              <ToggleButton\r\n                // value=\"web\"\r\n                style={{\r\n                  borderBottomLeftRadius: 50,\r\n                  textTransform: \"none\",\r\n                  borderTopLeftRadius: 50,\r\n                  background: open === \"indicators\" ? theme.palette.secondary.light : theme.palette.background.paper,\r\n                }}\r\n                onClick={() => {\r\n                  onNavigate?.(\"indicators\");\r\n                }}\r\n              >\r\n                <Typography> Add</Typography>\r\n              </ToggleButton>\r\n              <ToggleButton\r\n                value=\"android\"\r\n                style={{\r\n                  borderBottomRightRadius: 50,\r\n                  borderTopRightRadius: 50,\r\n                  background:\r\n                    open === \"editIndicator\" ? theme.palette.secondary.light : theme.palette.background.paper,\r\n                }}\r\n                onClick={() => {\r\n                  onNavigate?.(\"editIndicator\");\r\n                }}\r\n              >\r\n                Edit\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        ) : null}\r\n        <div\r\n          style={{\r\n            background: theme.palette.secondary.light,\r\n            border: \"1px solid #666\",\r\n            borderRadius: 50,\r\n            padding: 5,\r\n          }}\r\n        >\r\n          <IconButton\r\n            size=\"small\"\r\n            style={{ border: \"1px solid #fff\", margin: \"0px 5px\" }}\r\n            onClick={() => alert(\"upcoming\")}\r\n          >\r\n            <Icon path={mdiMagnify} size={1} color={theme.palette.primary.contrastText} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            style={{ border: \"1px solid #fff\", margin: \"0px 5px 0px 0px\" }}\r\n            onClick={() => setFilterCat((current) => !current)}\r\n          >\r\n            <Icon\r\n              path={FilterCat ? mdiSortAlphabeticalAscending : mdiFilter}\r\n              size={1}\r\n              color={theme.palette.primary.contrastText}\r\n            />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n\r\n      <TreeView\r\n        //   className={classes.root}\r\n        //   defaultExpanded={[\"3\"]}\r\n        defaultCollapseIcon={\r\n          <Icon path={mdiMenuDown} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n        }\r\n        defaultExpandIcon={\r\n          <Icon path={mdiMenuRight} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n        }\r\n        defaultEndIcon={<div style={{ width: 24 }} />}\r\n        //   selected=\"1\"\r\n        //   onNodeSelect={() => {}}\r\n        disableSelection\r\n        // style={{height: 100, overflowY: \"scroll\"}}\r\n      >\r\n        {open === \"editIndicator\"\r\n          ? ChartState.subCharts.map((subchart, subchartIdx) =>\r\n              subchart.yaxis.map((yaxis, yaxisIdx) =>\r\n                yaxis.graphs.map((graph, graphIdx) =>\r\n                  isIndicatorGraph(graph) ? (\r\n                    <CIndicatorGraphTreeItem\r\n                      key={`editIndicator-sub-${subchartIdx}-yaxis-${yaxisIdx}-graph-${graphIdx}`}\r\n                      ChartState={ChartState}\r\n                      ChartStateDispatch={ChartStateDispatch}\r\n                      subchartIdx={subchartIdx}\r\n                      yaxisIdx={yaxisIdx}\r\n                      graphIdx={graphIdx}\r\n                      // handleToggleExpanded={handleT}\r\n                    />\r\n                  ) : null\r\n                )\r\n              )\r\n            )\r\n          : !!FilterCat\r\n          ? categorys.map((cat, catIdx) => (\r\n              <CTreeItem\r\n                key={`cat-${catIdx}`}\r\n                nodeId={catIdx.toString()}\r\n                labelText={cat.name}\r\n                bgColor={theme.palette.primary.light}\r\n                labelIcon={\r\n                  <div\r\n                    style={{\r\n                      border: \"1px solid #666\",\r\n                      borderRadius: 5,\r\n                      marginRight: 10,\r\n                      background: theme.palette.secondary.main,\r\n                      minWidth: 48,\r\n                      height: 48,\r\n                    }}\r\n                  >\r\n                    <Icon path={cat.icon} size={2} color={theme.palette.secondary.contrastText} />\r\n                  </div>\r\n                }\r\n              >\r\n                {indicators\r\n                  .filter((indi) => indi.category === cat.name)\r\n                  .sort((a, b) => (a.name > b.name ? 1 : -1))\r\n                  .map((indi, indiIdx) => (\r\n                    <CTreeItem\r\n                      key={`cat-${catIdx}-indi-${indiIdx}`}\r\n                      nodeId={((catIdx + 1) * 100 + (indiIdx + 1)).toString()}\r\n                      labelText={indi.name}\r\n                      //   labelIcon={<Icon path={mdiFileChartOutline} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n                      onLabelClick={onIndicatorLabelClick(indi.indicator, ChartState)}\r\n                    />\r\n                  ))}\r\n              </CTreeItem>\r\n            ))\r\n          : indicators\r\n              .sort((a, b) => (a.name > b.name ? 1 : -1))\r\n              .map((indi, indiIdx) => (\r\n                <CTreeItem\r\n                  key={`cat-indi-${indiIdx}`}\r\n                  nodeId={(indiIdx + 1).toString()}\r\n                  labelText={indi.name}\r\n                  //   labelIcon={<Icon path={mdiFileChartOutline} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n                  onLabelClick={onIndicatorLabelClick(indi.indicator, ChartState)}\r\n                />\r\n              ))}\r\n      </TreeView>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { Icon } from \"@mdi/react\";\r\nimport { ToggleButton, ToggleButtonGroup, TreeView } from \"@material-ui/lab\";\r\nimport {\r\n  mdiMenuDown,\r\n  mdiMenuRight,\r\n  mdiDiameterVariant,\r\n  mdiChartBellCurve,\r\n  mdiArrowExpandVertical,\r\n  mdiPoll,\r\n  mdiHome,\r\n  mdiFilter,\r\n  mdiMagnify,\r\n  mdiAlphabetical,\r\n  mdiSortAlphabeticalAscending,\r\n  mdiRuler,\r\n  mdiRulerSquareCompass,\r\n  mdiArrowSplitHorizontal,\r\n  mdiBorderColor,\r\n  mdiBullseye,\r\n  mdiHelp,\r\n  mdiMinus,\r\n} from \"@mdi/js\";\r\nimport React from \"react\";\r\n\r\nimport { CalculatedChartStateType, ChartStateHookType } from \"../Types/CChartStateTypes\";\r\nimport { ChartDataSeries } from \"../Types/CChartTypes\";\r\nimport { Grid, IconButton, TextField, Typography, useTheme } from \"@material-ui/core\";\r\nimport { CTreeItem } from \"../CTreeItem\";\r\nimport { ReducerActionType } from \"../ChartState/CChartStateReducer\";\r\nimport { Colorpicker } from \"../Colorpicker\";\r\nimport { CChartMenuStateType } from \"./ChartMenu\";\r\n\r\nconst onToolLabelClick = (\r\n  ChartStateDispatch: ChartStateHookType[1],\r\n  type: NonNullable<CalculatedChartStateType[\"draw\"][\"type\"]>\r\n) => {\r\n  const subchartIdx = 0;\r\n  const action: ReducerActionType<\"draw\"> = { task: \"draw\", params: { type, subchartIdx } };\r\n\r\n  (ChartStateDispatch as React.Dispatch<ReducerActionType<\"draw\">>)(action);\r\n};\r\n\r\nexport const CToolTreeItem = (props: {\r\n  subchartIdx: number;\r\n  yaxisIdx: number;\r\n  toolIdx: number;\r\n  ChartState: CalculatedChartStateType;\r\n  ChartStateDispatch: ChartStateHookType[1];\r\n  handleToggleExpanded?: (id: string) => void;\r\n}) => {\r\n  const { subchartIdx, yaxisIdx, toolIdx, ChartState, ChartStateDispatch, handleToggleExpanded } = props;\r\n  const toolIn = ChartState.subCharts?.[subchartIdx]?.yaxis?.[yaxisIdx]?.tools?.[toolIdx];\r\n  const tool = !!toolIn ? toolIn : null;\r\n  const theme = useTheme();\r\n  if (!tool) return null;\r\n\r\n  return (\r\n    <CTreeItem\r\n      key={`tool-${toolIdx}`}\r\n      nodeId={`tool-${subchartIdx}-${toolIdx}`}\r\n      labelText={\r\n        tool.type === \"hline\"\r\n          ? \"horizontal line\"\r\n          : tool.type === \"vline\"\r\n          ? \"vertical line\"\r\n          : tool.type === \"trendline\"\r\n          ? \"Trendline\"\r\n          : \"Tool\"\r\n      }\r\n      labelIcon={\r\n        <Icon\r\n          path={tool.type === \"hline\" || tool.type === \"vline\" || tool.type === \"trendline\" ? mdiMinus : mdiHelp}\r\n          size={1}\r\n          color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"}\r\n          rotate={tool.type === \"trendline\" ? -45 : tool.type === \"vline\" ? 90 : 0}\r\n        />\r\n      }\r\n      onLabelClick={() => {\r\n        const id = `tool-${subchartIdx}-${toolIdx}`;\r\n        handleToggleExpanded?.(id);\r\n      }}\r\n      bgColor={theme.palette.primary.light}\r\n    >\r\n      {tool.type === \"hline\" ? (\r\n        <CTreeItem\r\n          key={`tool-${subchartIdx}-y0-${toolIdx}-hlinelevel`}\r\n          nodeId={`tool-${subchartIdx}-y0-${toolIdx}-hlinelevel`}\r\n          labelText={\"Y-Level\"}\r\n          labelIcon={\r\n            <Icon path={mdiArrowSplitHorizontal} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n          }\r\n          labelInfo={\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"none\"\r\n              size=\"small\"\r\n              inputProps={{ style: { padding: 5, width: 50 } }}\r\n              defaultValue={tool.xy[0][1]}\r\n              onChange={(e) => {\r\n                const val = parseFloat(e.target.value);\r\n                if (isNaN(val)) return;\r\n                const action: ReducerActionType<\"setHlineYlevel\"> = {\r\n                  task: \"setHlineYlevel\",\r\n                  params: { val, subchartIdx, yaxisIdx: 0, toolIdx },\r\n                };\r\n                (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setHlineYlevel\">>)(action);\r\n              }}\r\n            />\r\n          }\r\n        />\r\n      ) : null}\r\n      <CTreeItem\r\n        key={`tool-${subchartIdx}-${toolIdx}-stroke`}\r\n        nodeId={`tool-${subchartIdx}-${toolIdx}-stroke`}\r\n        labelText={\"stroke color\"}\r\n        labelIcon={<Icon path={mdiBorderColor} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n        labelInfo={\r\n          <Colorpicker\r\n            color={tool.style.strokeColor}\r\n            onColorSelected={(color) => {\r\n              const action: ReducerActionType<\"setToolStrokeColor\"> = {\r\n                task: \"setToolStrokeColor\",\r\n                params: { color: color, subchartIdx, yaxisIdx: 0, toolIdx },\r\n              };\r\n              (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setToolStrokeColor\">>)(action);\r\n            }}\r\n          />\r\n        }\r\n      />\r\n      <CTreeItem\r\n        key={`tool-${subchartIdx}-${toolIdx}-anchorColor`}\r\n        nodeId={`tool-${subchartIdx}-${toolIdx}-anchorColor`}\r\n        labelText={\"anchor color\"}\r\n        labelIcon={<Icon path={mdiBullseye} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n        labelInfo={\r\n          <Colorpicker\r\n            color={tool.style.anchorColor}\r\n            onColorSelected={(color) => {\r\n              const action: ReducerActionType<\"setToolAnchorColor\"> = {\r\n                task: \"setToolAnchorColor\",\r\n                params: { color: color, subchartIdx, yaxisIdx: 0, toolIdx },\r\n              };\r\n              (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setToolAnchorColor\">>)(action);\r\n            }}\r\n          />\r\n        }\r\n      />\r\n    </CTreeItem>\r\n  );\r\n};\r\n\r\nexport type ToolCategoryType = \"Lines\" | \"Upcoming\";\r\n\r\nexport const ChartMenuTools = (props: {\r\n  ChartState: CalculatedChartStateType;\r\n  onNavigate: (target: CChartMenuStateType[\"location\"]) => void;\r\n  ChartStateDispatch: ChartStateHookType[1];\r\n  open: CChartMenuStateType[\"location\"];\r\n}) => {\r\n  const { ChartState, onNavigate, ChartStateDispatch, open } = props;\r\n  const theme = useTheme();\r\n  const [FilterCat, setFilterCat] = React.useState(true);\r\n\r\n  const categorys: { name: ToolCategoryType; icon: string }[] = [\r\n    { name: \"Lines\", icon: mdiRuler },\r\n    { name: \"Upcoming\", icon: mdiRulerSquareCompass },\r\n  ];\r\n  const tools: {\r\n    name: string;\r\n    type: NonNullable<CalculatedChartStateType[\"draw\"][\"type\"]>;\r\n    category: ToolCategoryType;\r\n  }[] = [\r\n    { name: \"trendline\", type: \"trendline\", category: \"Lines\" },\r\n    { name: \"horizontal\", type: \"hline\", category: \"Lines\" },\r\n    { name: \"vertical\", type: \"vline\", category: \"Lines\" },\r\n  ];\r\n\r\n  const amtTools = ChartState.subCharts\r\n    .map((subchart) => subchart.yaxis.map((yaxis) => yaxis.tools.length))\r\n    .flat()\r\n    .reduce((acc, cur) => acc + cur);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          right: 24, //see padding title bar\r\n          zIndex: 2,\r\n\r\n          // padding\r\n        }}\r\n      >\r\n        {amtTools > 0 ? (\r\n          <div style={{ paddingBottom: 5 }}>\r\n            <ToggleButtonGroup value={\"web\"} exclusive style={{ borderRadius: 500 }} size=\"small\">\r\n              <ToggleButton\r\n                style={{\r\n                  borderBottomLeftRadius: 50,\r\n                  textTransform: \"none\",\r\n                  borderTopLeftRadius: 50,\r\n                  background: open === \"tools\" ? theme.palette.secondary.light : theme.palette.background.paper,\r\n                }}\r\n                onClick={() => {\r\n                  onNavigate?.(\"tools\");\r\n                }}\r\n              >\r\n                <Typography> Add</Typography>\r\n              </ToggleButton>\r\n              <ToggleButton\r\n                value=\"android\"\r\n                style={{\r\n                  borderBottomRightRadius: 50,\r\n                  borderTopRightRadius: 50,\r\n                  background: open === \"editTool\" ? theme.palette.secondary.light : theme.palette.background.paper,\r\n                }}\r\n                onClick={() => {\r\n                  onNavigate?.(\"editTool\");\r\n                }}\r\n              >\r\n                Edit\r\n              </ToggleButton>\r\n            </ToggleButtonGroup>\r\n          </div>\r\n        ) : null}\r\n\r\n        <div\r\n          style={{ background: theme.palette.secondary.light, border: \"1px solid #666\", borderRadius: 50, padding: 5 }}\r\n        >\r\n          <IconButton\r\n            size=\"small\"\r\n            style={{ border: \"1px solid #fff\", margin: \"0px 5px\" }}\r\n            onClick={() => alert(\"upcoming\")}\r\n          >\r\n            <Icon path={mdiMagnify} size={1} color={theme.palette.primary.contrastText} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            style={{ border: \"1px solid #fff\", margin: \"0px 5px 0px 0px\" }}\r\n            onClick={() => setFilterCat((current) => !current)}\r\n          >\r\n            <Icon\r\n              path={FilterCat ? mdiSortAlphabeticalAscending : mdiFilter}\r\n              size={1}\r\n              color={theme.palette.primary.contrastText}\r\n            />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <TreeView\r\n        //   className={classes.root}\r\n        //   defaultExpanded={[\"3\"]}\r\n        defaultCollapseIcon={\r\n          <Icon path={mdiMenuDown} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n        }\r\n        defaultExpandIcon={\r\n          <Icon path={mdiMenuRight} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n        }\r\n        defaultEndIcon={<div style={{ width: 24 }} />}\r\n        //   selected=\"1\"\r\n        //   onNodeSelect={() => {}}\r\n        disableSelection\r\n        // style={{height: 100, overflowY: \"scroll\"}}\r\n      >\r\n        {open === \"editTool\"\r\n          ? ChartState.subCharts.map((subchart, subchartIdx) =>\r\n              subchart.yaxis.map((yaxis, yaxisIdx) =>\r\n                yaxis.tools.map((tool, toolIdx) => (\r\n                  <CToolTreeItem\r\n                    key={`editIndicator-sub-${subchartIdx}-yaxis-${yaxisIdx}-graph-${toolIdx}`}\r\n                    ChartState={ChartState}\r\n                    ChartStateDispatch={ChartStateDispatch}\r\n                    subchartIdx={subchartIdx}\r\n                    yaxisIdx={yaxisIdx}\r\n                    toolIdx={toolIdx}\r\n                  />\r\n                ))\r\n              )\r\n            )\r\n          : !!FilterCat\r\n          ? categorys.map((cat, catIdx) => (\r\n              <CTreeItem\r\n                key={`cat-${catIdx}`}\r\n                nodeId={catIdx.toString()}\r\n                labelText={cat.name}\r\n                labelIcon={\r\n                  <div\r\n                    style={{\r\n                      border: \"1px solid #666\",\r\n                      borderRadius: 5,\r\n                      marginRight: 10,\r\n                      background: theme.palette.secondary.main,\r\n                      minWidth: 48,\r\n                      height: 48,\r\n                    }}\r\n                  >\r\n                    <Icon path={cat.icon} size={2} color={theme.palette.secondary.contrastText} />\r\n                  </div>\r\n                }\r\n                bgColor={theme.palette.primary.light}\r\n              >\r\n                {tools\r\n                  .filter((tool) => tool.category === cat.name)\r\n                  .sort((a, b) => (a.name > b.name ? 1 : -1))\r\n                  .map((tool, toolIdx) => (\r\n                    <CTreeItem\r\n                      key={`cat-${catIdx}-tool-${toolIdx}`}\r\n                      nodeId={((catIdx + 1) * 100 + (toolIdx + 1)).toString()}\r\n                      labelText={tool.name}\r\n                      //   labelIcon={<Icon path={mdiFileChartOutline} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n                      // bgColor={theme.palette.primary.light}\r\n                      onLabelClick={() => {\r\n                        onToolLabelClick(ChartStateDispatch, tool.type);\r\n                        onNavigate?.(null);\r\n                      }}\r\n                    />\r\n                  ))}\r\n              </CTreeItem>\r\n            ))\r\n          : tools\r\n              .sort((a, b) => (a.name > b.name ? 1 : -1))\r\n              .map((tool, toolIdx) => (\r\n                <CTreeItem\r\n                  key={`cat-tool-${toolIdx}`}\r\n                  nodeId={(toolIdx + 1).toString()}\r\n                  labelText={tool.name}\r\n                  //   labelIcon={<Icon path={mdiFileChartOutline} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n                  // bgColor={theme.palette.primary.light}\r\n                  onLabelClick={() => {\r\n                    onToolLabelClick(ChartStateDispatch, tool.type);\r\n                    onNavigate?.(null);\r\n                  }}\r\n                />\r\n              ))}\r\n      </TreeView>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { Icon } from \"@mdi/react\";\r\nimport { ToggleButton, ToggleButtonGroup, TreeView } from \"@material-ui/lab\";\r\nimport {\r\n  mdiMenuDown,\r\n  mdiMenuRight,\r\n  mdiDiameterVariant,\r\n  mdiChartBellCurve,\r\n  mdiArrowExpandVertical,\r\n  mdiPoll,\r\n  mdiHome,\r\n  mdiFilter,\r\n  mdiMagnify,\r\n  mdiAlphabetical,\r\n  mdiSortAlphabeticalAscending,\r\n  mdiRuler,\r\n  mdiRulerSquareCompass,\r\n  mdiFileChartOutline,\r\n  mdiWater,\r\n  mdiArrowSplitHorizontal,\r\n  mdiBorderColor,\r\n  mdiBullseye,\r\n  mdiChartAreaspline,\r\n  mdiChartLine,\r\n  mdiClose,\r\n  mdiFormatText,\r\n  mdiGrid,\r\n  mdiHelp,\r\n  mdiIframeVariableOutline,\r\n  mdiMinus,\r\n  mdiPencilRuler,\r\n} from \"@mdi/js\";\r\nimport React from \"react\";\r\n\r\nimport {\r\n  CalculatedChartStateType,\r\n  ChartStateHookType,\r\n  isChartGraph,\r\n  isIndicatorGraph,\r\n} from \"../Types/CChartStateTypes\";\r\nimport { ChartDataSeries } from \"../Types/CChartTypes\";\r\nimport { Button, Checkbox, Grid, IconButton, Menu, MenuItem, TextField, Typography, useTheme } from \"@material-ui/core\";\r\nimport { CTreeItem } from \"../CTreeItem\";\r\nimport { ReducerActionType } from \"../ChartState/CChartStateReducer\";\r\nimport { Colorpicker } from \"../Colorpicker\";\r\nimport { CChartMenuStateType } from \"./ChartMenu\";\r\nimport { CIndicatorGraphTreeItem } from \"./ChartMenuIndicators\";\r\nimport { CToolTreeItem } from \"./ChartMenuTools\";\r\n\r\nconst onToolLabelClick = (\r\n  ChartStateDispatch: ChartStateHookType[1],\r\n  type: NonNullable<CalculatedChartStateType[\"draw\"][\"type\"]>\r\n) => {\r\n  const subchartIdx = 0;\r\n  const action: ReducerActionType<\"draw\"> = { task: \"draw\", params: { type, subchartIdx } };\r\n  return () => {\r\n    (ChartStateDispatch as React.Dispatch<ReducerActionType<\"draw\">>)(action);\r\n  };\r\n};\r\n\r\nexport type ToolCategoryType = \"Lines\" | \"Upcoming\";\r\n\r\nexport const ChartMenuSettings = (props: {\r\n  ChartMenuState: CChartMenuStateType;\r\n  ChartState: CalculatedChartStateType;\r\n  onNavigate: (target: CChartMenuStateType[\"location\"]) => void;\r\n  ChartStateDispatch: ChartStateHookType[1];\r\n  onSettingsExpand: (id: string) => void;\r\n}) => {\r\n  const { ChartState, onNavigate, ChartStateDispatch, onSettingsExpand, ChartMenuState } = props;\r\n  const theme = useTheme();\r\n  const [FilterCat, setFilterCat] = React.useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n  // const [Expanded, setExpanded] = React.useState<string[]>([]);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = (target?: CChartMenuStateType[\"location\"]) => {\r\n    setAnchorEl(null);\r\n    if (!!target) onNavigate?.(target);\r\n  };\r\n\r\n  // const handleToggleExpanded = (id: string) => {\r\n  //   if (Expanded.includes(id)) {\r\n  //     setExpanded(Expanded.filter((val) => val !== id));\r\n  //   } else setExpanded([...Expanded, id]);\r\n  // };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          right: 24, //see padding title bar\r\n          zIndex: 2,\r\n\r\n          // padding\r\n        }}\r\n      >\r\n        {/* <div\r\n          style={{\r\n            background: theme.palette.secondary.light,\r\n            border: \"1px solid #666\",\r\n            borderRadius: 50,\r\n            padding: 5,\r\n          }}\r\n        >\r\n          <IconButton\r\n            size=\"small\"\r\n            style={{ border: \"1px solid #fff\", margin: \"0px 5px\" }}\r\n            // onClick={() => onNavigate(\"menu\")}\r\n          >\r\n            <Icon path={mdiMagnify} size={1} color={theme.palette.primary.contrastText} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            style={{ border: \"1px solid #fff\", margin: \"0px 5px 0px 0px\" }}\r\n            onClick={() => setFilterCat((current) => !current)}\r\n          >\r\n            <Icon\r\n              path={FilterCat ? mdiSortAlphabeticalAscending : mdiFilter}\r\n              size={1}\r\n              color={theme.palette.primary.contrastText}\r\n            />\r\n          </IconButton>\r\n        </div> */}\r\n        <div style={{ paddingBottom: 5 }}>\r\n          <Button\r\n            // value=\"web\"\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 50,\r\n              padding: 5,\r\n              // marginTop: 5,\r\n              textTransform: \"none\",\r\n              background: theme.palette.secondary.light,\r\n              width: \"100%\",\r\n              color: theme.palette.secondary.contrastText,\r\n            }}\r\n            onClick={handleClick}\r\n          >\r\n            <Typography> Add...</Typography>\r\n          </Button>\r\n          <Menu\r\n            id=\"quick-add\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={() => handleClose(undefined)}\r\n            anchorOrigin={{\r\n              vertical: \"top\",\r\n              horizontal: \"center\",\r\n            }}\r\n            transformOrigin={{\r\n              vertical: \"bottom\",\r\n              horizontal: \"center\",\r\n            }}\r\n          >\r\n            <MenuItem onClick={() => handleClose(\"indicators\")}>Indicator</MenuItem>\r\n            <MenuItem onClick={() => handleClose(\"tools\")}>Tool</MenuItem>\r\n            {/* <MenuItem onClick={handleClose}></MenuItem> */}\r\n          </Menu>\r\n        </div>\r\n      </div>\r\n\r\n      <TreeView\r\n        //   className={classes.root}\r\n        //   defaultExpanded={[\"3\"]}\r\n        defaultCollapseIcon={\r\n          <Icon path={mdiMenuDown} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n        }\r\n        defaultExpandIcon={\r\n          <Icon path={mdiMenuRight} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n        }\r\n        defaultEndIcon={<div style={{ width: 24 }} />}\r\n        //   selected=\"1\"\r\n        //   onNodeSelect={() => {}}\r\n        disableSelection\r\n        // style={{height: 100, overflowY: \"scroll\"}}\r\n        expanded={ChartMenuState.expandedSetting}\r\n      >\r\n        <CTreeItem\r\n          nodeId=\"1\"\r\n          labelText=\"General\"\r\n          labelIcon={\r\n            <div\r\n              style={{\r\n                background: theme.palette.secondary.main,\r\n                width: 48,\r\n                height: 48,\r\n                border: \"1px solid #666\",\r\n                borderRadius: 5,\r\n                marginRight: 10,\r\n              }}\r\n            >\r\n              <Icon path={mdiFileChartOutline} size={2} color={theme.palette.secondary.contrastText} />\r\n            </div>\r\n          }\r\n          bgColor={theme.palette.primary.light}\r\n          labelTypographyVariant=\"h6\"\r\n          onLabelClick={() => {\r\n            const id = \"1\";\r\n            onSettingsExpand?.(id);\r\n          }}\r\n        >\r\n          <CTreeItem\r\n            nodeId=\"11\"\r\n            labelText=\"background color\"\r\n            labelIcon={<Icon path={mdiWater} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n            labelInfo={\r\n              <Colorpicker\r\n                color={ChartState.backgroundColor}\r\n                onColorSelected={(color) => {\r\n                  // const action: ReducerActionType<\"setBackgroundColor\"> = {\r\n                  //   task: \"setBackgroundColor\",\r\n                  //   params: { color: color },\r\n                  // };\r\n                  ChartStateDispatch({\r\n                    task: \"setBackgroundColor\",\r\n                    params: { color },\r\n                  } as ReducerActionType<\"setBackgroundColor\">);\r\n                }}\r\n              />\r\n            }\r\n          />\r\n          <CTreeItem\r\n            nodeId=\"12\"\r\n            labelText=\"axis fill color\"\r\n            labelIcon={<Icon path={mdiWater} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n            labelInfo={\r\n              <Colorpicker\r\n                color={ChartState.xaxis.style.fillColor}\r\n                onColorSelected={(color) => {\r\n                  const action: ReducerActionType<\"setAxisFillColor\"> = {\r\n                    task: \"setAxisFillColor\",\r\n                    params: { color: color },\r\n                  };\r\n                  (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setAxisFillColor\">>)(action);\r\n                }}\r\n              />\r\n            }\r\n          />\r\n          <CTreeItem\r\n            nodeId=\"13\"\r\n            labelText=\"axis stroke color\"\r\n            labelIcon={<Icon path={mdiBorderColor} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n            labelInfo={\r\n              <Colorpicker\r\n                color={ChartState.xaxis.style.strokeColor}\r\n                onColorSelected={(color) => {\r\n                  const action: ReducerActionType<\"setAxisStrokeColor\"> = {\r\n                    task: \"setAxisStrokeColor\",\r\n                    params: { color: color },\r\n                  };\r\n                  (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setAxisStrokeColor\">>)(action);\r\n                }}\r\n              />\r\n            }\r\n          />\r\n          <CTreeItem\r\n            nodeId=\"14\"\r\n            labelText=\"axis text color\"\r\n            labelIcon={<Icon path={mdiFormatText} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n            labelInfo={\r\n              <Colorpicker\r\n                color={ChartState.xaxis.style.fontColor}\r\n                onColorSelected={(color) => {\r\n                  const action: ReducerActionType<\"setAxisTextColor\"> = {\r\n                    task: \"setAxisTextColor\",\r\n                    params: { color: color },\r\n                  };\r\n                  (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setAxisTextColor\">>)(action);\r\n                }}\r\n              />\r\n            }\r\n          />\r\n          <CTreeItem\r\n            nodeId=\"15\"\r\n            labelText=\"use x-axis grid\"\r\n            labelIcon={<Icon path={mdiGrid} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n            labelInfo={\r\n              <Checkbox\r\n                checked={ChartState.grid.useGridX}\r\n                size=\"small\"\r\n                style={{ padding: 0, width: 24, height: 24 }}\r\n                onChange={() => {\r\n                  const action: ReducerActionType<\"toggleXaxisGrid\"> = {\r\n                    task: \"toggleXaxisGrid\",\r\n                    params: {},\r\n                  };\r\n                  (ChartStateDispatch as React.Dispatch<ReducerActionType<\"toggleXaxisGrid\">>)(action);\r\n                }}\r\n              />\r\n            }\r\n          />\r\n          <CTreeItem\r\n            nodeId=\"16\"\r\n            labelText=\"use y-axis grid\"\r\n            labelIcon={<Icon path={mdiGrid} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n            labelInfo={\r\n              <Checkbox\r\n                checked={ChartState.grid.useGridY}\r\n                size=\"small\"\r\n                style={{ padding: 0, width: 24, height: 24 }}\r\n                onChange={() => {\r\n                  const action: ReducerActionType<\"toggleYaxisGrid\"> = {\r\n                    task: \"toggleYaxisGrid\",\r\n                    params: {},\r\n                  };\r\n                  (ChartStateDispatch as React.Dispatch<ReducerActionType<\"toggleYaxisGrid\">>)(action);\r\n                }}\r\n              />\r\n            }\r\n          />\r\n          <CTreeItem\r\n            nodeId=\"17\"\r\n            labelText=\"grid stroke color\"\r\n            labelIcon={<Icon path={mdiBorderColor} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />}\r\n            labelInfo={\r\n              <Colorpicker\r\n                color={ChartState.grid.style.strokeColor}\r\n                onColorSelected={(color) => {\r\n                  const action: ReducerActionType<\"setGridStrokeColor\"> = {\r\n                    task: \"setGridStrokeColor\",\r\n                    params: { color: color },\r\n                  };\r\n                  (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setGridStrokeColor\">>)(action);\r\n                }}\r\n              />\r\n            }\r\n          />\r\n        </CTreeItem>\r\n\r\n        {ChartState.subCharts.map((subchart, subchartIdx) => (\r\n          <CTreeItem\r\n            labelTypographyVariant=\"h6\"\r\n            key={`sub-${subchartIdx}`}\r\n            nodeId={`sub-${subchartIdx}`}\r\n            labelText={subchartIdx === 0 ? \"Mainchart\" : `Subchart ${subchartIdx}`}\r\n            bgColor={theme.palette.primary.light}\r\n            onLabelClick={() => {\r\n              const id = `sub-${subchartIdx}`;\r\n              onSettingsExpand?.(id);\r\n            }}\r\n            labelIcon={\r\n              <div\r\n                style={{\r\n                  background: theme.palette.secondary.main,\r\n                  width: 48,\r\n                  height: 48,\r\n                  border: \"1px solid #666\",\r\n                  borderRadius: 5,\r\n                  marginRight: 10,\r\n                }}\r\n              >\r\n                <Icon path={mdiChartAreaspline} size={2} color={theme.palette.secondary.contrastText} />\r\n              </div>\r\n            }\r\n            labelInfo={\r\n              subchartIdx !== 0 ? (\r\n                <IconButton\r\n                  size=\"small\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    const action: ReducerActionType<\"removeSubchart\"> = {\r\n                      task: \"removeSubchart\",\r\n                      params: { subchartIdx },\r\n                    };\r\n                    (ChartStateDispatch as React.Dispatch<ReducerActionType<\"removeSubchart\">>)(action);\r\n                  }}\r\n                >\r\n                  <Icon path={mdiClose} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n                </IconButton>\r\n              ) : undefined\r\n            }\r\n          >\r\n            {subchart.yaxis[0].graphs.map((graph, graphIdx) =>\r\n              isIndicatorGraph(graph) ? (\r\n                <CIndicatorGraphTreeItem\r\n                  key={`editIndicator-sub-${subchartIdx}-yaxis-${0}-graph-${graphIdx}`}\r\n                  ChartState={ChartState}\r\n                  ChartStateDispatch={ChartStateDispatch}\r\n                  subchartIdx={subchartIdx}\r\n                  yaxisIdx={0}\r\n                  graphIdx={graphIdx}\r\n                  handleToggleExpanded={onSettingsExpand}\r\n                />\r\n              ) : isChartGraph(graph) ? (\r\n                <React.Fragment key={`graph-sub-${subchartIdx}-y-${0}-graph-${graphIdx}-frag`}>\r\n                  <CTreeItem\r\n                    onLabelClick={() => {\r\n                      const id = `graph-sub-${subchartIdx}-y-${0}-graph-${graphIdx}`;\r\n                      onSettingsExpand?.(id);\r\n                    }}\r\n                    key={`graph-sub-${subchartIdx}-y-${0}-graph-${graphIdx}`}\r\n                    nodeId={`graph-sub-${subchartIdx}-y-${0}-graph-${graphIdx}`}\r\n                    labelText={graph.name}\r\n                    bgColor={theme.palette.primary.light}\r\n                    labelIcon={\r\n                      <div\r\n                        style={{\r\n                          background: theme.palette.primary.main,\r\n                          width: 32,\r\n                          height: 32,\r\n                          border: \"1px solid #666\",\r\n                          borderRadius: 5,\r\n                          marginRight: 10,\r\n                        }}\r\n                      >\r\n                        <Icon path={mdiChartLine} size={\"32px\"} color={theme.palette.secondary.contrastText} />\r\n                      </div>\r\n                    }\r\n                    labelInfo={\r\n                      subchartIdx !== 0 || graphIdx !== 0 ? (\r\n                        <IconButton\r\n                          size=\"small\"\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                            const action: ReducerActionType<\"removeGraph\"> = {\r\n                              task: \"removeGraph\",\r\n                              params: { subchartIdx, yaxisIdx: 0, graphIdx },\r\n                            };\r\n                            (ChartStateDispatch as React.Dispatch<ReducerActionType<\"removeGraph\">>)(action);\r\n                          }}\r\n                        >\r\n                          <Icon path={mdiClose} size={1} color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"} />\r\n                        </IconButton>\r\n                      ) : undefined\r\n                    }\r\n                  >\r\n                    {graph.meta.type === \"linechart\" ? (\r\n                      <CTreeItem\r\n                        nodeId={`graph-sub-${subchartIdx}-y-${0}-graph-${graphIdx}-strokeColor`}\r\n                        labelText=\"line stroke color\"\r\n                        labelIcon={\r\n                          <Icon\r\n                            path={mdiBorderColor}\r\n                            size={1}\r\n                            color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"}\r\n                          />\r\n                        }\r\n                        labelInfo={\r\n                          <Colorpicker\r\n                            color={ChartState.subCharts[subchartIdx].yaxis[0].graphs[graphIdx].style?.strokeColor?.[0]}\r\n                            onColorSelected={(color) => {\r\n                              const action: ReducerActionType<\"setLineChartStrokeColor\"> = {\r\n                                task: \"setLineChartStrokeColor\",\r\n                                params: { color: color, subchartIdx, yaxisIdx: 0, graphIdx },\r\n                              };\r\n                              (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setLineChartStrokeColor\">>)(\r\n                                action\r\n                              );\r\n                            }}\r\n                          />\r\n                        }\r\n                      />\r\n                    ) : graph.meta.type === \"candlechart\" ? (\r\n                      <React.Fragment>\r\n                        <CTreeItem\r\n                          nodeId={`graph-sub-${subchartIdx}-y-${0}-graph-${graphIdx}-candleUpColor`}\r\n                          labelText=\"candle up color\"\r\n                          labelIcon={\r\n                            <Icon\r\n                              path={mdiBorderColor}\r\n                              size={1}\r\n                              color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"}\r\n                            />\r\n                          }\r\n                          labelInfo={\r\n                            <Colorpicker\r\n                              color={graph.style.candleUpColor}\r\n                              onColorSelected={(color) => {\r\n                                const action: ReducerActionType<\"setCandleChartUpColor\"> = {\r\n                                  task: \"setCandleChartUpColor\",\r\n                                  params: { color: color, subchartIdx, yaxisIdx: 0, graphIdx },\r\n                                };\r\n                                (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setCandleChartUpColor\">>)(\r\n                                  action\r\n                                );\r\n                              }}\r\n                            />\r\n                          }\r\n                        />\r\n                        <CTreeItem\r\n                          nodeId={`graph-sub-${subchartIdx}-y-${0}-graph-${graphIdx}-candleDownColor`}\r\n                          labelText=\"candle down color\"\r\n                          labelIcon={\r\n                            <Icon\r\n                              path={mdiBorderColor}\r\n                              size={1}\r\n                              color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"}\r\n                            />\r\n                          }\r\n                          labelInfo={\r\n                            <Colorpicker\r\n                              color={graph.style.candleDownColor}\r\n                              onColorSelected={(color) => {\r\n                                const action: ReducerActionType<\"setCandleChartDownColor\"> = {\r\n                                  task: \"setCandleChartDownColor\",\r\n                                  params: { color: color, subchartIdx, yaxisIdx: 0, graphIdx },\r\n                                };\r\n                                (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setCandleChartDownColor\">>)(\r\n                                  action\r\n                                );\r\n                              }}\r\n                            />\r\n                          }\r\n                        />\r\n                        <CTreeItem\r\n                          nodeId={`graph-sub-${subchartIdx}-y-${0}-graph-${graphIdx}-candleStrokeColor`}\r\n                          labelText=\"candle stroke color\"\r\n                          labelIcon={\r\n                            <Icon\r\n                              path={mdiBorderColor}\r\n                              size={1}\r\n                              color={theme.palette.type === \"light\" ? \"#333\" : \"#fff\"}\r\n                            />\r\n                          }\r\n                          labelInfo={\r\n                            <Colorpicker\r\n                              color={graph.style.candleStrokeColor}\r\n                              onColorSelected={(color) => {\r\n                                const action: ReducerActionType<\"setCandleChartStrokeColor\"> = {\r\n                                  task: \"setCandleChartStrokeColor\",\r\n                                  params: { color: color, subchartIdx, yaxisIdx: 0, graphIdx },\r\n                                };\r\n                                (ChartStateDispatch as React.Dispatch<ReducerActionType<\"setCandleChartStrokeColor\">>)(\r\n                                  action\r\n                                );\r\n                              }}\r\n                            />\r\n                          }\r\n                        />\r\n                      </React.Fragment>\r\n                    ) : null}\r\n                  </CTreeItem>\r\n                </React.Fragment>\r\n              ) : null\r\n            )}\r\n\r\n            {subchart.yaxis[0].tools.length > 0 ? (\r\n              <CTreeItem\r\n                key={`tools-${subchartIdx}-y0`}\r\n                nodeId={`tools-${subchartIdx}-y0`}\r\n                labelIcon={\r\n                  <div\r\n                    style={{\r\n                      background: theme.palette.primary.main,\r\n                      width: 32,\r\n                      height: 32,\r\n                      border: \"1px solid #666\",\r\n                      borderRadius: 5,\r\n                      marginRight: 10,\r\n                    }}\r\n                  >\r\n                    <Icon path={mdiPencilRuler} size={\"32px\"} color={theme.palette.secondary.contrastText} />\r\n                  </div>\r\n                }\r\n                labelText=\"Tools\"\r\n                onLabelClick={() => {\r\n                  const id = `tools-${subchartIdx}-y0`;\r\n                  onSettingsExpand?.(id);\r\n                }}\r\n              >\r\n                {subchart.yaxis[0].tools.map((tool, toolIdx) => (\r\n                  <CToolTreeItem\r\n                    key={`editTool-sub-${subchartIdx}-yaxis-${0}-tool-${toolIdx}`}\r\n                    ChartState={ChartState}\r\n                    ChartStateDispatch={ChartStateDispatch}\r\n                    subchartIdx={subchartIdx}\r\n                    yaxisIdx={0}\r\n                    toolIdx={toolIdx}\r\n                    handleToggleExpanded={onSettingsExpand}\r\n                  />\r\n                ))}\r\n              </CTreeItem>\r\n            ) : null}\r\n          </CTreeItem>\r\n        ))}\r\n      </TreeView>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import {\r\n  Button,\r\n  Grid,\r\n  ListItem,\r\n  List,\r\n  Paper,\r\n  Typography,\r\n  useMediaQuery,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { mdiChartLine, mdiChartBellCurve, mdiPencilRuler, mdiTune, mdiStarShooting, mdiBroom } from \"@mdi/js\";\r\nimport Icon, { Stack } from \"@mdi/react\";\r\nimport React from \"react\";\r\nimport { CalculatedChartStateType, ChartStateHookType, TypedDispatcher } from \"../Types/CChartStateTypes\";\r\nimport { CChartMenuStateType } from \"./ChartMenu\";\r\n\r\nexport const ChartMenuQuickys = (props: {\r\n  ChartState: CalculatedChartStateType;\r\n  ChartStateDispatch: ChartStateHookType[1];\r\n  onNavigate: (target: CChartMenuStateType[\"location\"]) => void;\r\n}) => {\r\n  const { ChartState, onNavigate, ChartStateDispatch } = props;\r\n\r\n  const isMinSm = useMediaQuery(\"(min-width:600px)\");\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Grid container>\r\n        <Grid item> */}\r\n      <List>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            ChartStateDispatch({\r\n              task: \"clearChart\",\r\n              params: { mode: \"indicators\" },\r\n            }) as unknown as TypedDispatcher<\"clearChart\">;\r\n          }}\r\n        >\r\n          <ListItemIcon\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 5,\r\n              marginRight: 10,\r\n              background: theme.palette.secondary.main,\r\n              minWidth: 48,\r\n              height: 48,\r\n              position: \"relative\",\r\n              top: 0,\r\n            }}\r\n          >\r\n            <Icon\r\n              path={mdiBroom}\r\n              size={2}\r\n              color={theme.palette.secondary.contrastText}\r\n              style={{ position: \"absolute\", top: 0, left: 0 }}\r\n              rotate={5}\r\n            />\r\n            <Icon\r\n              path={mdiChartBellCurve}\r\n              size={0.8}\r\n              color={\"#fff\"}\r\n              style={{ position: \"absolute\", bottom: 0, right: 0 }}\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Clear All Indicators\"\r\n            primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }}\r\n          />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            ChartStateDispatch({\r\n              task: \"clearChart\",\r\n              params: { mode: \"tools\" },\r\n            }) as unknown as TypedDispatcher<\"clearChart\">;\r\n          }}\r\n        >\r\n          <ListItemIcon\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 5,\r\n              marginRight: 10,\r\n              background: theme.palette.secondary.main,\r\n              minWidth: 48,\r\n              height: 48,\r\n              position: \"relative\",\r\n              top: 0,\r\n            }}\r\n          >\r\n            <Icon\r\n              path={mdiBroom}\r\n              size={2}\r\n              color={theme.palette.secondary.contrastText}\r\n              style={{ position: \"absolute\", top: 0, left: 0 }}\r\n              rotate={5}\r\n            />\r\n            <Icon\r\n              path={mdiPencilRuler}\r\n              size={0.7}\r\n              color={\"#fff\"}\r\n              style={{ position: \"absolute\", bottom: 1, right: 1 }}\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Clear All Tools\" primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }} />\r\n        </ListItem>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            // onNavigate?.(\"settings\");\r\n          }}\r\n        >\r\n          <ListItemIcon\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 5,\r\n              marginRight: 10,\r\n              background: theme.palette.secondary.main,\r\n              width: 48,\r\n              height: 48,\r\n            }}\r\n          >\r\n            <Icon path={mdiTune} size={2} color={theme.palette.secondary.contrastText} />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Autoscale Y axis (mode to disable upcoming)\"\r\n            primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }}\r\n          />\r\n        </ListItem>\r\n      </List>\r\n      {/* </Grid>\r\n      </Grid> */}\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { makeStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n// const useStyles = makeStyles((theme: Theme) => ({\r\n//   root: {\r\n//     width: \"100%\",\r\n//     \"& > * + *\": {\r\n//       marginTop: theme.spacing(2),\r\n//     },\r\n//   },\r\n// }));\r\n\r\nexport const CSnackBar = (props: { open: boolean; onClose: () => void; content: React.ReactNode }) => {\r\n  const { open, onClose, content } = props;\r\n  //   const classes = useStyles();\r\n\r\n  //   const [open, setOpen] = React.useState(false);\r\n\r\n  //   const handleClick = () => {\r\n  //     setOpen(true);\r\n  //   };\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") return;\r\n\r\n    onClose?.();\r\n  };\r\n\r\n  return (\r\n    <Snackbar\r\n      open={open}\r\n      autoHideDuration={6000}\r\n      onClose={handleClose}\r\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n    >\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {content}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n","import {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  makeStyles,\r\n  TextField,\r\n  Tooltip,\r\n  IconButton,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  mdiChartLine,\r\n  mdiChartBellCurve,\r\n  mdiWeb,\r\n  mdiFileDelimitedOutline,\r\n  mdiArrowRightThick,\r\n  mdiClose,\r\n} from \"@mdi/js\";\r\nimport { Icon } from \"@mdi/react\";\r\nimport React from \"react\";\r\nimport { CSnackBar } from \"../CSnackbar\";\r\nimport { getDateString } from \"../Time/CChartDateTime\";\r\nimport { CalculatedChartStateType, ChartStateHookType } from \"../Types/CChartStateTypes\";\r\nconst parse = require(\"csv-parse/lib/sync\");\r\n\r\nconst useStyles = makeStyles({\r\n  popper: {\r\n    zIndex: 1800,\r\n  },\r\n  tooltip: {\r\n    background: \"rgba(205, 205, 205, 0.95)\",\r\n    //   filter: \"blur(1px)\",\r\n  },\r\n});\r\n\r\nexport async function parseCsvFileObj(data: File) {\r\n  const res: any = await data.text().then((dataString) => {\r\n    // console.log(dataString);\r\n    const rowDelimiter = [\r\n      { chars: \"\\n\", amt: dataString.match(/\\n/gm)?.length ?? 0 },\r\n      { chars: \"\\r\", amt: dataString.match(/\\r/gm)?.length ?? 0 },\r\n      { chars: \"\\r\\n\", amt: dataString.match(/\\r\\n/gm)?.length ?? 0 },\r\n    ];\r\n    const rowDelimiterAmts = rowDelimiter.map((val) => val.amt);\r\n    const maxAmtRowDelimiterIdx = rowDelimiterAmts.indexOf(Math.max(...rowDelimiterAmts));\r\n    const guessedRowDelimiter = rowDelimiter[maxAmtRowDelimiterIdx].chars;\r\n    const rows = dataString.split(guessedRowDelimiter);\r\n\r\n    // only first line is checked for delimiter\r\n    const delimiter = [\r\n      { chars: \",\", amt: rows[0].match(/,/gm)?.length ?? 0 },\r\n      { chars: \";\", amt: rows[0].match(/;/gm)?.length ?? 0 },\r\n    ];\r\n    const delimiterAmts = delimiter.map((del) => del.amt);\r\n    const maxAmtDelimiterIdx = delimiterAmts.indexOf(Math.max(...delimiterAmts));\r\n    const guessedDelimiter = delimiter[maxAmtDelimiterIdx].chars;\r\n\r\n    // last delimiter is likely decimal delimiter\r\n    let amtDecDel = { dots: 0, commas: 0 };\r\n    rows.forEach((row) => {\r\n      row.split(guessedDelimiter).forEach((val) => {\r\n        const lastDot = val.lastIndexOf(\".\");\r\n        const lastComma = val.lastIndexOf(\",\");\r\n        if (lastDot !== -1 && lastComma !== -1) {\r\n          if (lastDot > lastComma) amtDecDel.dots++;\r\n          else amtDecDel.commas++;\r\n        } else if (lastDot !== -1 && lastComma === -1) amtDecDel.dots++;\r\n        else if (lastDot === -1 && lastComma !== -1) amtDecDel.commas++;\r\n      });\r\n    });\r\n    const isCommaDecDel = amtDecDel.dots < amtDecDel.commas;\r\n    const isCommaDigitSeparator = amtDecDel.dots > amtDecDel.commas && amtDecDel.commas > 0;\r\n\r\n    const newDataString = isCommaDecDel\r\n      ? dataString.replaceAll(\".\", \"\").replaceAll(\",\", \".\")\r\n      : isCommaDigitSeparator\r\n      ? dataString.replaceAll(\",\", \"\")\r\n      : dataString;\r\n\r\n    // console.log(isCommaDecDel, isCommaDigitSeparator);\r\n    // const parseNumbers = (val: string) => {\r\n    //   if (typeof val !== \"string\") return val;\r\n    //   if (isCommaDecDel) return parseFloat(val.replace(\".\", \"\").replace(\",\", \".\"));\r\n    //   else if (isCommaDigitSeparator) return parseFloat(val.replace(\",\", \"\"));\r\n    //   return parseFloat(val);\r\n    // };\r\n\r\n    let parseRes = parse(newDataString, {\r\n      delimiter: guessedDelimiter,\r\n      record_delimiter: guessedRowDelimiter,\r\n      cast: true,\r\n      trim: true,\r\n      cast_date: true,\r\n    }).map((dataset: any[]) => ({\r\n      date: dataset[0],\r\n      open: dataset[1],\r\n      high: dataset[2],\r\n      low: dataset[3],\r\n      close: dataset[4],\r\n      volume: dataset[5],\r\n    }));\r\n    parseRes.shift();\r\n    return parseRes;\r\n  });\r\n  return res;\r\n}\r\n\r\nexport const ChartMenuChart = (props: {\r\n  ChartState: CalculatedChartStateType;\r\n  //   onNavigate: (target: CChartMenuStateType) => void;\r\n  ChartStateDispatch: ChartStateHookType[1];\r\n}) => {\r\n  const { ChartState, ChartStateDispatch } = props;\r\n  const classes = useStyles();\r\n  const [IsError, setIsError] = React.useState<string | null>(null);\r\n\r\n  const theme = useTheme();\r\n  const HiddenInputRef: React.RefObject<HTMLInputElement> = React.useRef(null);\r\n  const [ShowUrlPopup, setShowUrlPopup] = React.useState(false);\r\n  const [CsvUrl, setCsvUrl] = React.useState(\"\");\r\n\r\n  async function handleInputFileChange(evt: React.ChangeEvent<HTMLInputElement>) {\r\n    const files = evt.target.files;\r\n    if (!files) return;\r\n    if (files.length > 0) {\r\n      try {\r\n        const res = await parseCsvFileObj(files[0]);\r\n        ChartState.methods.addSubchart(res, \"some chart\", undefined, true);\r\n      } catch (err) {\r\n        console.log(\"Error - could not parse provided local file\", err);\r\n        setIsError(\"Error - could not parse provided local file\");\r\n      }\r\n    }\r\n  }\r\n\r\n  // evt handler for KeyUp evt of Input/Textfield -> Callback onEnter\r\n  const HandleOnKeyUp = (e: React.KeyboardEvent<HTMLInputElement>): void => {\r\n    if (e.key === \"Enter\" && e.type === \"keyup\") {\r\n      fetchCsvFromURL();\r\n    }\r\n  };\r\n  async function fetchCsvFromURL() {\r\n    try {\r\n      const resp = await fetch(CsvUrl);\r\n      if (!resp) throw Error(\"cant download file from url\");\r\n      let file = resp as unknown as File;\r\n      const res = await parseCsvFileObj(file);\r\n      ChartState.methods.addSubchart(res, \"some chart\", undefined, true);\r\n    } catch (err) {\r\n      console.log(\"Error - could not download file from URL or File could not be parsed\", err);\r\n      setIsError(\"Error - could not download file from URL or File could not be parsed\");\r\n    }\r\n    // const data = fetch(CsvUrl).then((response) => {\r\n    //   return await parseCsvFileObj(response);\r\n    // });\r\n\r\n    setShowUrlPopup(false);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <CSnackBar open={!!IsError} onClose={() => setIsError(null)} content={IsError ? IsError : \"\"}></CSnackBar>\r\n      <input\r\n        type=\"file\"\r\n        style={{ visibility: \"hidden\", position: \"absolute\", top: 0, height: 0, width: 0 }}\r\n        ref={HiddenInputRef}\r\n        onChange={handleInputFileChange}\r\n      />\r\n      <List>\r\n        <ListItem\r\n          button\r\n          onClick={() => {\r\n            HiddenInputRef?.current?.click?.();\r\n          }}\r\n        >\r\n          <ListItemIcon\r\n            style={{\r\n              border: \"1px solid #666\",\r\n              borderRadius: 5,\r\n              marginRight: 10,\r\n              background: theme.palette.secondary.main,\r\n              minWidth: 48,\r\n              height: 48,\r\n            }}\r\n          >\r\n            <Icon path={mdiFileDelimitedOutline} size={2} color={theme.palette.secondary.contrastText} />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"CSV from device\" primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }} />\r\n        </ListItem>\r\n\r\n        <Tooltip\r\n          PopperProps={{ disablePortal: true }}\r\n          classes={{ popper: classes.popper, tooltip: classes.tooltip }}\r\n          style={{ zIndex: 1500 }}\r\n          open={ShowUrlPopup}\r\n          //   onClose={() => setShowUrlPopup(false)}\r\n          title={\r\n            <div>\r\n              <TextField\r\n                helperText=\"Enter/Paste URL\"\r\n                // style={{ width: 320 }}\r\n                fullWidth\r\n                onKeyUp={HandleOnKeyUp}\r\n                value={CsvUrl}\r\n                onChange={(e) => setCsvUrl(e.target.value)}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <React.Fragment>\r\n                      <IconButton onClick={fetchCsvFromURL} size=\"small\">\r\n                        <Icon path={mdiArrowRightThick} size={1} />\r\n                      </IconButton>\r\n                      <IconButton onClick={() => setShowUrlPopup(false)}>\r\n                        <Icon path={mdiClose} size={1} />\r\n                      </IconButton>\r\n                    </React.Fragment>\r\n                  ),\r\n                }}\r\n              />\r\n            </div>\r\n          }\r\n          interactive\r\n          arrow\r\n          placement=\"bottom\"\r\n          //   open={true}\r\n          //   onClose={() => { }}\r\n        >\r\n          <ListItem\r\n            button\r\n            onClick={() => {\r\n              // onNavigate?.(\"indicators\");\r\n              // HiddenInputRef?.current?.click?.();\r\n              setShowUrlPopup(true);\r\n            }}\r\n          >\r\n            <ListItemIcon\r\n              style={{\r\n                border: \"1px solid #666\",\r\n                borderRadius: 5,\r\n                marginRight: 10,\r\n                background: theme.palette.secondary.main,\r\n                minWidth: 48,\r\n                height: 48,\r\n              }}\r\n            >\r\n              <Icon path={mdiWeb} size={2} color={theme.palette.secondary.contrastText} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"CSV from URL\" primaryTypographyProps={{ variant: \"h6\", color: \"textSecondary\" }} />\r\n          </ListItem>\r\n        </Tooltip>\r\n      </List>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  createStyles,\r\n  Drawer,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Theme,\r\n  Typography,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { mdiClose, mdiFullscreen, mdiHome } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport { CalculatedChartStateType, ChartStateHookType } from \"../Types/CChartStateTypes\";\r\nimport { ChartMenuHome } from \"./ChartMenuHome\";\r\nimport { ChartMenuIndicators } from \"./ChartMenuIndicators\";\r\nimport { ChartMenuTools } from \"./ChartMenuTools\";\r\nimport { ChartMenuSettings } from \"./ChartMenuSettings\";\r\nimport { ChartMenuQuickys } from \"./ChartMenuQuickys\";\r\nimport { ChartMenuChart } from \"./ChartMenuChart\";\r\nimport { ReducerActionType } from \"../ChartState/CChartStateReducer\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n      minHeight: \"33%\",\r\n      border: \"1px solid #666\",\r\n      borderTopLeftRadius: 10,\r\n      borderTopRightRadius: 10,\r\n    },\r\n    paperDesktop: {\r\n      minHeight: \"33%\",\r\n      border: \"1px solid #666\",\r\n      borderBottomRightRadius: 10,\r\n      borderTopRightRadius: 10,\r\n    },\r\n  })\r\n);\r\n\r\nexport type CChartMenuStateType = {\r\n  location: \"menu\" | \"chart\" | \"indicators\" | \"tools\" | \"settings\" | \"quickys\" | \"editIndicator\" | \"editTool\" | null;\r\n  expandedSetting: string[];\r\n};\r\n\r\nexport const CChartMenu2 = (props: {\r\n  ChartMenuState: CChartMenuStateType;\r\n  onClose: () => void;\r\n  ChartState: CalculatedChartStateType;\r\n  onNavigate: (target: CChartMenuStateType[\"location\"]) => void;\r\n  ChartStateDispatch: ChartStateHookType[1];\r\n  onSettingsExpand: (id: string) => void;\r\n}) => {\r\n  const { onClose, ChartMenuState, ChartState, onNavigate, ChartStateDispatch, onSettingsExpand } = props;\r\n  const theme = useTheme();\r\n  const isMinSm = useMediaQuery(\"(min-width:600px)\");\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Drawer\r\n      anchor={!!isMinSm ? \"left\" : \"bottom\"}\r\n      open={!!ChartMenuState.location}\r\n      classes={{ paper: !!isMinSm ? classes.paperDesktop : classes.paper }}\r\n      ModalProps={{ hideBackdrop: true }}\r\n    >\r\n      <div style={{ background: theme.palette.primary.main, color: theme.palette.primary.contrastText, padding: 10 }}>\r\n        <Grid container alignItems=\"center\" justify=\"center\">\r\n          <Grid item>\r\n            <Typography component=\"div\" variant=\"h4\">\r\n              {ChartMenuState.location === \"quickys\"\r\n                ? \"Quick Tasks\"\r\n                : ChartMenuState.location === \"editIndicator\"\r\n                ? \"Edit Indicator\"\r\n                : ChartMenuState.location === \"indicators\"\r\n                ? \"Add Indicator\"\r\n                : ChartMenuState.location === \"editTool\"\r\n                ? \"Edit Tool\"\r\n                : ChartMenuState.location === \"tools\"\r\n                ? \"Add Tool\"\r\n                : ChartMenuState.location === \"settings\"\r\n                ? \"Settings\"\r\n                : \"Chart Menu\"}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs></Grid>\r\n          <Grid item>\r\n            <div style={{ height: \"2.6rem\" }}>\r\n              {!!ChartMenuState.location && ChartMenuState.location !== \"menu\" ? (\r\n                <IconButton\r\n                  size=\"small\"\r\n                  onClick={() => {\r\n                    onNavigate(\"menu\");\r\n                  }}\r\n                >\r\n                  <Icon path={mdiHome} size={1.75} color={theme.palette.primary.contrastText}></Icon>\r\n                </IconButton>\r\n              ) : null}\r\n\r\n              <IconButton\r\n                size=\"small\"\r\n                onClick={() => {\r\n                    (ChartStateDispatch as React.Dispatch<ReducerActionType<\"toggleFullscreen\">>)({task: \"toggleFullscreen\", params:[]});\r\n                }}\r\n              >\r\n                <Icon path={mdiFullscreen} size={1.75} color={theme.palette.primary.contrastText}></Icon>\r\n              </IconButton>\r\n              <IconButton\r\n                size=\"small\"\r\n                onClick={() => {\r\n                  onClose?.();\r\n                }}\r\n              >\r\n                <Icon path={mdiClose} size={1.75} color={theme.palette.primary.contrastText}></Icon>\r\n              </IconButton>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n      <div style={{ padding: 10 }}>\r\n        {ChartMenuState.location === \"menu\" ? (\r\n          <ChartMenuHome ChartState={ChartState} onNavigate={onNavigate} />\r\n        ) : ChartMenuState.location === \"indicators\" || ChartMenuState.location === \"editIndicator\" ? (\r\n          <ChartMenuIndicators\r\n            ChartState={ChartState}\r\n            onNavigate={onNavigate}\r\n            open={ChartMenuState.location}\r\n            ChartStateDispatch={ChartStateDispatch}\r\n          />\r\n        ) : ChartMenuState.location === \"tools\" || ChartMenuState.location === \"editTool\" ? (\r\n          <ChartMenuTools\r\n            ChartState={ChartState}\r\n            ChartStateDispatch={ChartStateDispatch}\r\n            onNavigate={onNavigate}\r\n            open={ChartMenuState.location}\r\n          />\r\n        ) : ChartMenuState.location === \"settings\" ? (\r\n          <ChartMenuSettings\r\n            ChartMenuState={ChartMenuState}\r\n            ChartState={ChartState}\r\n            ChartStateDispatch={ChartStateDispatch}\r\n            onNavigate={onNavigate}\r\n            onSettingsExpand={onSettingsExpand}\r\n          />\r\n        ) : ChartMenuState.location === \"quickys\" ? (\r\n          <ChartMenuQuickys ChartState={ChartState} onNavigate={onNavigate} ChartStateDispatch={ChartStateDispatch} />\r\n        ) : ChartMenuState.location === \"chart\" ? (\r\n          <ChartMenuChart ChartState={ChartState} ChartStateDispatch={ChartStateDispatch} />\r\n        ) : null}\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n","import React, { RefObject } from \"react\";\r\nimport { Stage, Layer, Rect, Line, Shape, Text } from \"react-konva\";\r\nimport { CChartProps, Dataset } from \"./Types/CChartTypes\";\r\nimport { isIndicatorGraph, TypedDispatcher } from \"./Types/CChartStateTypes\";\r\nimport Ajv from \"ajv\";\r\nimport { chartDataSchema } from \"./CChartDataSchema\";\r\nimport { CChartLabel } from \"./CChartLabel\";\r\nimport { CChartCrosshair } from \"./CChartCrosshair\";\r\n\r\nimport { CCandleChart } from \"./Charts/CCandleChart\";\r\nimport { CLineChart } from \"./Charts/CLineChart\";\r\nimport { CBarChart } from \"./Charts/CBarChart\";\r\nimport { ReducerActionType } from \"./ChartState/CChartStateReducer\";\r\nimport { defaultDarkState, useChartState } from \"./ChartState/CChartState\";\r\nimport { CTrendline } from \"./Tools/CTrendline\";\r\nimport { CVline } from \"./Tools/CVLine\";\r\nimport { CHline } from \"./Tools/CHLine\";\r\nimport { Button, Portal, ThemeProvider } from \"@material-ui/core\";\r\n\r\nimport { ConditionalMuiThemeProvider, muiDarkTheme, muiTheme } from \"./MuiTheme\";\r\nimport { CChartMenu2, CChartMenuStateType } from \"./Menu2/ChartMenu\";\r\nimport Icon from \"@mdi/react\";\r\nimport { mdiMenu } from \"@mdi/js\";\r\nimport mergeRefs from \"./utils\";\r\nconst ajv = new Ajv();\r\n\r\nexport const ConditionallPortal: React.FC<{ disablePortal: boolean }> = (props) => {\r\n  const { disablePortal } = props;\r\n  return <React.Fragment>{!disablePortal ? <Portal>{props.children}</Portal> : props.children};</React.Fragment>;\r\n};\r\n\r\nexport const CChart = (props: CChartProps) => {\r\n  // get props + -> deviceRatio (does konva need that anymore?!)\r\n  const {\r\n    width,\r\n    height,\r\n    chartData,\r\n    style,\r\n    viewMode,\r\n    disableTheme,\r\n    // , ChartState, ChartStateDispatch\r\n  } = props;\r\n  // responsive container and pointer events\r\n  let widthPerTick = 20;\r\n  const ContainerRef: RefObject<HTMLDivElement> = React.useRef(null);\r\n\r\n  const [ChartMenu2Open, setChartMenu2Open] = React.useState<CChartMenuStateType>({\r\n    location: null,\r\n    expandedSetting: [],\r\n  });\r\n\r\n  const initState = !!style ? style : {};\r\n\r\n  const [ChartState, ChartStateDispatch] = useChartState(ContainerRef, { width, height, viewMode, initState });\r\n  widthPerTick = ChartState.xaxis.scaledWidthPerTick;\r\n  const { widthYAxis, widthTickmarkLines } = ChartState.yaxis;\r\n  const { heightXAxis, heightTickMarkLines } = ChartState.xaxis;\r\n  const containerWidth = ChartState.containerSize.width - 1;\r\n  const containerHeight = ChartState.containerSize.height - 1;\r\n  const isContainerInit = ChartState.containerSize.init;\r\n\r\n  //QUICK FIX --> MUST BE DONE WITH CONTROLLED CHARTSTATE ACTUally\r\n  React.useEffect(() => {\r\n    if (initState.darkMode !== ChartState.darkMode)\r\n      (ChartStateDispatch as React.Dispatch<ReducerActionType<\"toggleDarkMode\">>)({\r\n        task: \"toggleDarkMode\",\r\n        params: [],\r\n      });\r\n  }, [initState.darkMode, ChartState.darkMode]);\r\n\r\n  const handleToggleExpanded = (id: string) => {\r\n    // console.log(\"here we go\", id);\r\n    if (ChartMenu2Open.expandedSetting.includes(id)) {\r\n      setChartMenu2Open((current) => ({\r\n        ...current,\r\n        expandedSetting: ChartMenu2Open.expandedSetting.filter((val) => val !== id),\r\n      }));\r\n      // setExpanded(Expanded.filter((val) => val !== id));\r\n    } else setChartMenu2Open((current) => ({ ...current, expandedSetting: [...ChartMenu2Open.expandedSetting, id] }));\r\n    //setExpanded([...Expanded, id]);\r\n  };\r\n\r\n  // check chartData schema every time chartData is modified\r\n  React.useEffect(() => {\r\n    if (!isContainerInit) return;\r\n    const validate = ajv.compile(chartDataSchema);\r\n    const valid = validate(chartData);\r\n    if (!valid) {\r\n      alert(\"ERROR - chartData prop is not valid, check console\");\r\n      console.log(\"ERROR - chartData prop is not valid -> \", \"data:\", chartData, \"errors:\", validate.errors);\r\n    } else if (ChartState.subCharts.length === 0) {\r\n      const action: ReducerActionType<\"addSubchart\"> = {\r\n        task: \"addSubchart\",\r\n        params: { chartSeries: chartData[0].data, chartName: chartData[0].name, containerHeight },\r\n      };\r\n      (ChartStateDispatch as React.Dispatch<ReducerActionType<\"addSubchart\">>)(action);\r\n      // addSubchart(chartData[0].data, chartData[0].name, { indicatorFn: ATR, params: [14] });\r\n      // addSubchart(chartData[0].data, chartData[0].name, { indicatorFn: RSI, params: [14] });\r\n      // addGraph(chartData[0].data, chartData[0].name, 0, { indicatorFn: SMA, params: [10] });\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [chartData, ChartState.subCharts.length, containerHeight, isContainerInit, heightXAxis]);\r\n  const fullState = ChartState;\r\n\r\n  console.log(fullState);\r\n  const xAxis = fullState.xaxis.xAxisTicks;\r\n\r\n  const darkMode = ChartState.darkMode;\r\n  // console.log(darkMode, muiDarkTheme.palette.type, muiTheme.palette.type);\r\n  return (\r\n    // <div style={{ width: \"100%\", height: \"100%\", position: \"fixed\", top: 0 }}>\r\n    <React.Fragment>\r\n      <ConditionalMuiThemeProvider theme={darkMode ? { ...muiDarkTheme } : { ...muiTheme }} disableTheme={disableTheme}>\r\n        <ConditionallPortal disablePortal={true}>\r\n          <div //responsive container (above is not necessary)\r\n            ref={ContainerRef}\r\n            style={{\r\n              boxSizing: \"border-box\",\r\n              position: \"relative\",\r\n              top: 0,\r\n              zIndex: 120000,\r\n              // width: !!width ? width : \"100%\",\r\n              // height: !!height ? height : \"100%\",\r\n              // width: \"100%\",\r\n              // height: \"100%\",\r\n              // position: \"fixed\",\r\n              // border: \"1px solid red\",\r\n              background: fullState.backgroundColor,\r\n              // ...addContainerStyles,\r\n            }}\r\n          >\r\n            <Stage //konva container\r\n              width={ChartState.containerSize.width}\r\n              height={ChartState.containerSize.height}\r\n              listening={false}\r\n\r\n              // style={{ boxSizing: \"border-box\" }}\r\n            >\r\n              {/*  Canvas Layer 3 - chart and example */}\r\n              <Layer>\r\n                {/* <Rect\r\n              x={20 + ChartState.pointer.totalTranslatedX}\r\n              y={50 + ChartState.pointer.totalTranslatedY}\r\n              width={100}\r\n              height={100}\r\n              fill=\"red\"\r\n              shadowBlur={10}\r\n            /> */}\r\n                {0 in fullState.subCharts ? <CCandleChart fullState={fullState} /> : null}\r\n                {fullState.subCharts.map((subchart, subchartIdx) =>\r\n                  subchart.yaxis.map((singleYaxis, singleYaxisIdx) =>\r\n                    singleYaxis.graphs.map((graph, graphIdx) => {\r\n                      const stateGraph = fullState.subCharts[subchartIdx].yaxis[0].graphs[graphIdx];\r\n                      // const type = stateGraph.type;\r\n                      const indicatorType = isIndicatorGraph(stateGraph) ? stateGraph.indicator.type : null;\r\n                      if (isIndicatorGraph(stateGraph) && stateGraph.data.length > 0) {\r\n                        const indicatorLines = stateGraph.data[stateGraph.data.length - 1].prices;\r\n\r\n                        if (indicatorType === \"line\") {\r\n                          return indicatorLines.map((indicatorDataSeries, indDataSeriesIdx) => (\r\n                            <CLineChart\r\n                              fullState={fullState}\r\n                              subchartIdx={subchartIdx}\r\n                              yaxisIdx={0}\r\n                              graphIdx={graphIdx}\r\n                              key={`lineChart-${subchartIdx}-${graphIdx}-${indDataSeriesIdx}`}\r\n                              indSeriesIdx={indDataSeriesIdx}\r\n                            />\r\n                          ));\r\n                        } else if (indicatorType === \"bars\") {\r\n                          return (\r\n                            <CBarChart\r\n                              fullState={fullState}\r\n                              subchartIdx={subchartIdx}\r\n                              yaxisIdx={0}\r\n                              graphIdx={graphIdx}\r\n                              key={`barchart-${subchartIdx}-${graphIdx}`}\r\n                            />\r\n                          );\r\n                        }\r\n                      }\r\n                      return null;\r\n                    })\r\n                  )\r\n                )}\r\n                {/* NEW TLINE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */}\r\n                {!!fullState.pointer.move.isMoving && fullState.draw.pixXy.length >= 1 ? (\r\n                  <Line\r\n                    x={0}\r\n                    y={0}\r\n                    points={[\r\n                      fullState.draw.pixXy[0][0],\r\n                      fullState.draw.pixXy[0][1],\r\n                      !!fullState.pointer?.chartPointer.move.x\r\n                        ? fullState.methods.xToPix(fullState.pointer.chartPointer.move.x)\r\n                        : fullState.pointer.move.xy[0],\r\n                      !!fullState.pointer?.chartPointer?.move.snapDatasets?.[0]?.pixYSnap\r\n                        ? fullState.pointer?.chartPointer?.move.snapDatasets[0].pixYSnap\r\n                        : fullState.pointer.move.xy[1],\r\n                    ]}\r\n                    stroke={\"red\"}\r\n                    strokeWidth={1}\r\n                  />\r\n                ) : null}\r\n                {/* EXISTING TLINES!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */}\r\n                {0 in fullState.subCharts\r\n                  ? fullState.subCharts[0].yaxis[0].tools.map((tool, toolIdx) => {\r\n                      if (tool.type === \"trendline\" && tool.xy.length === 2)\r\n                        return (\r\n                          <CTrendline\r\n                            key={`trendline-sub-0-y-0-tool-${toolIdx}`}\r\n                            mode=\"trendline\"\r\n                            subchartTop={fullState.subCharts[0].top}\r\n                            subchartBottom={fullState.subCharts[0].bottom}\r\n                            pixXy={[\r\n                              [fullState.methods.xToPix(tool.xy[0][0]), fullState.methods.yToPix(tool.xy[0][1], 0, 0)],\r\n                              [fullState.methods.xToPix(tool.xy[1][0]), fullState.methods.yToPix(tool.xy[1][1], 0, 0)],\r\n                            ]}\r\n                            style={{ anchorColor: tool.style.anchorColor, strokeColor: tool.style.strokeColor }}\r\n                          />\r\n                        );\r\n                      else if (tool.type === \"vline\" && tool.xy.length === 1)\r\n                        return (\r\n                          <CVline\r\n                            key={`vline-sub-0-y-0-tool-${toolIdx}`}\r\n                            mode=\"extendUpDown\"\r\n                            subchartTop={fullState.subCharts[0].top}\r\n                            subchartBottom={fullState.subCharts[0].bottom}\r\n                            pixXy={[\r\n                              [fullState.methods.xToPix(tool.xy[0][0]), fullState.methods.yToPix(tool.xy[0][1], 0, 0)],\r\n                            ]}\r\n                            style={{ anchorColor: tool.style.anchorColor, strokeColor: tool.style.strokeColor }}\r\n                          />\r\n                        );\r\n                      else if (tool.type === \"hline\" && tool.xy.length === 1)\r\n                        return (\r\n                          <CHline\r\n                            key={`hline-sub-0-y-0-tool-${toolIdx}`}\r\n                            mode=\"extendLeftRight\"\r\n                            pixXstart={0}\r\n                            pixXend={fullState.containerSize.width - fullState.yaxis.widthYAxis}\r\n                            pixXy={[\r\n                              [fullState.methods.xToPix(tool.xy[0][0]), fullState.methods.yToPix(tool.xy[0][1], 0, 0)],\r\n                            ]}\r\n                            style={{ anchorColor: tool.style.anchorColor, strokeColor: tool.style.strokeColor }}\r\n                          />\r\n                        );\r\n                      else return null;\r\n                    })\r\n                  : null}\r\n              </Layer>\r\n\r\n              {/*  Canvas Layer 5 (before 0) - axis bg rects + future chartbgcolor? */}\r\n              <Layer>\r\n                <Rect\r\n                  x={0 + 0.5}\r\n                  y={containerHeight - heightXAxis + 0.5}\r\n                  width={containerWidth}\r\n                  height={heightXAxis}\r\n                  fill={ChartState.xaxis.style.fillColor}\r\n                  stroke={ChartState.border}\r\n                  strokeWidth={1}\r\n                />\r\n                {fullState.subCharts.map((subchart, subchartIdx) => (\r\n                  <React.Fragment key={`subchart-border-${subchartIdx}`}>\r\n                    <Rect\r\n                      // key={`subchartBorder-${subchartIdx}`}\r\n                      x={0 + 0.5}\r\n                      y={subchart.top + 0.5}\r\n                      width={containerWidth}\r\n                      height={subchart.bottom - subchart.top}\r\n                      stroke={ChartState.border}\r\n                      strokeWidth={1}\r\n                    />\r\n                    {/* <Rect\r\n                      // key={`subchartPrimaryYaxis-${subchartIdx}`}\r\n                      x={containerWidth - widthYAxis + 0.5}\r\n                      y={subchart.top + 0.5}\r\n                      width={widthYAxis}\r\n                      height={subchart.bottom - subchart.top}\r\n                      // fill={ChartState.xaxis.style.fillColor}\r\n                      stroke={ChartState.yaxis.style.strokeColor}\r\n                      strokeWidth={1}\r\n                    /> */}\r\n                  </React.Fragment>\r\n                ))}\r\n              </Layer>\r\n              {/*  Canvas Layer 6 before 1 - x axis */}\r\n              <Layer>\r\n                {xAxis.map((xaxisTick, xaxisTickIdx) => {\r\n                  return (\r\n                    <React.Fragment key={`xaxis-ticks-${xaxisTickIdx}`}>\r\n                      <Line\r\n                        x={xaxisTick.x}\r\n                        y={ChartState.containerSize.height - 1 - heightXAxis + 0.5}\r\n                        points={[0, 0, 0, heightTickMarkLines]}\r\n                        stroke={ChartState.xaxis.style.strokeColor}\r\n                        strokeWidth={1}\r\n                      />\r\n                      {!!ChartState.grid.useGridX ? (\r\n                        <Line\r\n                          x={xaxisTick.x}\r\n                          y={0 + 0.5}\r\n                          points={[0, 0, 0, ChartState.containerSize.height - 1 - heightXAxis + 0.5]}\r\n                          stroke={ChartState.grid.style.strokeColor}\r\n                          strokeWidth={1}\r\n                        />\r\n                      ) : null}\r\n                      <Shape\r\n                        sceneFunc={(context, shape) => {\r\n                          // context.fillS\r\n                          const ctx = context._context;\r\n                          ctx.font = ChartState.xaxis.style.fontSize + \"px \" + ChartState.xaxis.style.fontName;\r\n                          ctx.fillStyle = ChartState.xaxis.style.fontColor;\r\n                          ctx.textAlign = \"center\";\r\n                          ctx.textBaseline = \"top\";\r\n                          ctx.fillText(\r\n                            xaxisTick.dateString,\r\n                            xaxisTick.x,\r\n                            ChartState.containerSize.height - 1 - heightXAxis + 0.5 + 20 + 5 // additional 5px distance to end of tickmark\r\n                          );\r\n                          // (!) Konva specific method, it is very important\r\n                          context.fillStrokeShape(shape);\r\n                        }}\r\n                        // fill=\"#333\"\r\n                        // stroke={ChartState.options.xAxis.style.fontColor}\r\n                        // strokeWidth={1}\r\n                      />\r\n                    </React.Fragment>\r\n                  );\r\n                })}\r\n              </Layer>\r\n              {/*  Canvas Layer 7 before 2 - y axis */}\r\n              <Layer>\r\n                \r\n\r\n                {fullState.subCharts.map((subchart, subchartIdx) => {\r\n                  return subchart.yaxis.map((singleYaxis, singleYaxisIdx) => {\r\n                    const yAxisTicks = singleYaxis.drawTicks;\r\n\r\n                    // const yAxisTicks =\r\n                    //   subchartIdx === 0 ? subchart.yaxis[0] : subchart.yaxis[0].slice(0, subchart.yaxis[0].length - 1);\r\n                    return yAxisTicks.map((yaxisTick, yaxisTickIdx) => {\r\n                      return (\r\n                        <React.Fragment key={`yaxis-ticks-${yaxisTickIdx}`}>\r\n                          <Line\r\n                            x={ChartState.containerSize.width - 1 + 0.5-ChartState.yaxis.widthTickmarkLines} //- widthYAxis\r\n                            y={yaxisTick.pixY + 0.5}\r\n                            points={[0, 0, widthTickmarkLines, 0]}\r\n                            stroke={ChartState.yaxis.style.strokeColor}\r\n                            strokeWidth={1}\r\n                          />\r\n                          {!!ChartState.grid.useGridY ? (\r\n                            <Line\r\n                              x={0 + 0.5}\r\n                              y={yaxisTick.pixY + 0.5}\r\n                              points={[0, 0, ChartState.containerSize.width - 1 + 0.5, 0]}\r\n                              stroke={ChartState.grid.style.strokeColor}\r\n                              strokeWidth={1}\r\n                            />\r\n                          ) : null}\r\n                          <Shape\r\n                            sceneFunc={(context, shape) => {\r\n                              const ctx = context._context;\r\n                              ctx.font = ChartState.yaxis.style.fontSize + \"px \" + ChartState.yaxis.style.fontName;\r\n                              ctx.fillStyle = ChartState.yaxis.style.fontColor;\r\n                              ctx.textAlign = \"right\";\r\n                              ctx.textBaseline = \"middle\";\r\n                              ctx.fillText(\r\n                                yaxisTick.label,\r\n                                ChartState.containerSize.width - 1 - ChartState.yaxis.widthTickmarkLines  + 0.5, //- widthYAxis + widthTickmarkLines + 5 +\r\n                                yaxisTick.pixY // additional 5px distance to end of tickmark\r\n                              );\r\n                              // (!) Konva specific method, it is very important\r\n                              context.fillStrokeShape(shape);\r\n                            }}\r\n                          />\r\n                        </React.Fragment>\r\n                      );\r\n                    });\r\n                  });\r\n                })}\r\n              </Layer>\r\n              {/*  Canvas Layer 4 - crosshair */}\r\n              <Layer>\r\n                {!!ChartState.pointer.move?.xy && !!ChartState.pointer.isHovering ? (\r\n                  <CChartCrosshair fullState={fullState} />\r\n                ) : null}\r\n              </Layer>\r\n            </Stage>\r\n\r\n            {!!fullState.xaxis.xEnd && xAxis.length > 0\r\n              ? fullState.subCharts.map((subchart, subchartIdx) => (\r\n                  <div\r\n                    key={`chart-label-subarea-${subchartIdx}`}\r\n                    style={{ position: \"absolute\", top: subchart.top + 2 }}\r\n                  >\r\n                    {subchart.yaxis[0].graphs.map((graph, graphIdx) => {\r\n                      const name =\r\n                        isIndicatorGraph(graph) && graph.indicator.params.length > 0\r\n                          ? `${graph.indicator.name}(${graph.indicator.params[0].val})`\r\n                          : isIndicatorGraph(graph) && graph.indicator.params.length === 0\r\n                          ? `${graph.indicator.name}`\r\n                          : graph.name;\r\n                      if (!graph.datasets.last) return null;\r\n\r\n                      const tmpDataset: Dataset =\r\n                        (fullState.pointer.isHovering &&\r\n                        subchartIdx === fullState.pointer?.chartPointer?.move.subchartIdx &&\r\n                        fullState.pointer?.chartPointer?.move.snapDatasets?.[0]?.graphIdx === graphIdx\r\n                          ? fullState.pointer?.chartPointer?.move?.snapDatasets?.[0]?.data\r\n                          : fullState.pointer.isHovering &&\r\n                            // subchartIdx === fullState.pointer?.chartPointer?.move.subchartIdx &&\r\n                            fullState.pointer.chartPointer.move.x !== null\r\n                          ? graph.data[fullState.pointer.chartPointer.move.x]\r\n                          : graph.datasets.last.data) || graph.datasets.last.data;\r\n\r\n                      return (\r\n                        <CChartLabel\r\n                          key={`chart-label-${subchartIdx}-${graphIdx}`}\r\n                          onClick={() =>\r\n                            setChartMenu2Open((current) => ({\r\n                              location: \"settings\",\r\n                              expandedSetting: [`graph-sub-${subchartIdx}-y-0-graph-${graphIdx}`, `sub-${subchartIdx}`],\r\n                            }))\r\n                          }\r\n                          name={name}\r\n                          dataset={tmpDataset}\r\n                          decimals={\r\n                            isIndicatorGraph(graph) && graph.indicator.default.decimals !== undefined\r\n                              ? graph.indicator.default.decimals\r\n                              : graph.decimals\r\n                          }\r\n                          // top={subchart.top + graphIdx * 30} // get height automatically!\r\n                        />\r\n                      );\r\n                    })}\r\n                  </div>\r\n                ))\r\n              : null}\r\n            <div style={{ position: \"absolute\", top: (fullState.subCharts?.[0]?.bottom ?? 0) - 64 - 10, left: 10 }}>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                style={{ width: 64, height: 64, textTransform: \"none\", borderRadius: 5, opacity: 0.8 }}\r\n                onClick={() => setChartMenu2Open((current) => ({ ...current, location: \"menu\" }))}\r\n              >\r\n                <div style={{ position: \"relative\", top: 0, height: 64 }}>\r\n                  <Icon path={mdiMenu} size=\"64px\" color=\"#fff\" />\r\n                </div>\r\n              </Button>\r\n            </div>\r\n\r\n            <CChartMenu2\r\n              ChartMenuState={ChartMenu2Open}\r\n              onClose={() => {\r\n                setChartMenu2Open((current) => ({ ...current, location: null }));\r\n              }}\r\n              onNavigate={(target) => setChartMenu2Open((current) => ({ ...current, location: target }))}\r\n              ChartState={fullState}\r\n              ChartStateDispatch={ChartStateDispatch}\r\n              onSettingsExpand={handleToggleExpanded}\r\n            />\r\n          </div>\r\n        </ConditionallPortal>\r\n      </ConditionalMuiThemeProvider>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  ThemeProvider,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  IconButton,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport { mdiGithub, mdiMenu, mdiThemeLightDark } from \"@mdi/js\";\r\nimport Icon from \"@mdi/react\";\r\nimport { muiTheme } from \"../Chart/MuiTheme\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(0),\r\n        color: theme.palette.primary.main, \r\n        // textTransform: \"none\",\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      //   color: \"#fff\",\r\n    },\r\n  })\r\n);\r\n \r\nexport const Site = (props: any) => {\r\n  const classes = useStyles();\r\n  const { setDarkMode } = props;\r\n  //   const darkMode = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\r\n  //     const muiThemeInt: Theme = {...muiTheme, palette: {...muiTheme.palette, type: darkMode? \"dark\" : \"light\"}};\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <div style={{ height: \"100%\" }}>\r\n      <div\r\n        style={{\r\n          height: 220,\r\n          backgroundColor: theme.palette.background.paper,\r\n          color: theme.palette.getContrastText(theme.palette.background.default),\r\n          backgroundImage: \"url(https://github.com/carmnk/resources/raw/main/icons/logo512.png)\",\r\n          backgroundRepeat: \"no-repeat\",\r\n          backgroundSize: 128,\r\n          backgroundPosition: \"50% 35%\",\r\n        //   borderBottom: \"1px solid #666\",\r\n        //   boxShadow: theme.shadows[6],\r\n        //   WebkitBoxShadow: theme.shadows[6],\r\n          // boxShadow: \"0 6px 6px 0 rgba(200, 200, 200, 0.5), 0 6px 20px 0 rgba(0, 0, 0, 0.19)\",\r\n          //   zIndex: 2222,\r\n          //   position: \"absolute\",\r\n          //           top: 0,\r\n          //   width: \"100%\"\r\n        }}\r\n      >\r\n        {/* <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 0,\r\n            left: 0,\r\n            height: 210,\r\n            boxShadow: theme.shadows[10],\r\n                      WebkitBoxShadow: theme.shadows[10],\r\n                      zIndex: 2222222,\r\n                      width: \"100%\",\r\n            pointerEvents: \"none\"\r\n          }}\r\n        ></div> */}\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title} color=\"primary\">\r\n            react-tech-chart\r\n          </Typography>\r\n          <Button className={classes.menuButton}>\r\n            <Typography>Docs</Typography>\r\n          </Button>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={() => setDarkMode((current: any) => !current)}\r\n          >\r\n            <Icon path={mdiThemeLightDark} size={1.2} />\r\n          </IconButton>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <Icon path={mdiGithub} size={1.2} />\r\n          </IconButton>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <Icon path={mdiMenu} size={1.2} />\r\n          </IconButton>\r\n        </Toolbar>\r\n\r\n        <div\r\n          style={{\r\n            minWidth: 320,\r\n            maxWidth: \"max(100%, 900px)\",\r\n            margin: \"0px auto\",\r\n            position: \"relative\",\r\n            top: 0,\r\n            height: \"calc(100% - 64px)\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              // width: \"max-content\",\r\n              // margin: \"0px auto\",\r\n\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                padding: \"100px 16px 0px 16px\",\r\n                textAlign: \"center\",\r\n                color: theme.palette.text.secondary,\r\n              }}\r\n            >\r\n              <Typography>\r\n                a high-level react stockchart component providing tools esp. for technical analysis.\r\n              </Typography>\r\n            </div>\r\n            {/* <img\r\n                alt=\"project logo\"\r\n                src=\"https://github.com/carmnk/resources/raw/main/icons/logo512.png\"\r\n                style={{ width: 128, height: 128, display: \"block\" }}\r\n              /> */}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div style={{ height: 220 }} /> */}\r\n      <div style={{ position: \"relative\", top: 0, height: \"calc(100% - 220px)\" }}>{props.children}</div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { CChart } from \"./Chart/CChart\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Button,\n  createStyles,\n  makeStyles,\n  Theme,\n  ThemeProvider,\n} from \"@material-ui/core\";\nimport Icon from \"@mdi/react\";\nimport { mdiClose, mdiGithub, mdiMenu } from \"@mdi/js\";\nimport { muiDarkTheme, muiTheme } from \"./Chart/MuiTheme\";\nimport { Site } from \"./Site/Site\";\nimport { useChartState } from \"./Chart/ChartState/CChartState\";\n\nconst parse = require(\"csv-parse/lib/sync\");\n\n// function parseData(pars: any) {\n//   return function (d: any) {\n//     d.date = parseDate(d.date);\n//     d.open = +d.open;\n//     d.high = +d.high;\n//     d.low = +d.low;\n//     d.close = +d.close;\n//     d.volume = +d.volume;\n\n//     return d;\n//   };\n// }\n// const parseDate = timeParse(\"%Y-%m-%d\");\n\nexport function getData() {\n  const promiseMSFT = fetch(\"https://raw.githubusercontent.com/carmnk/resources/main/data/csv/BAYN.DE.csv\")\n    .then((response) => {\n      return response.text();\n    })\n    .then((data) => {\n      //   console.log(data);\n      let res = parse(data, { delimiter: \",\", cast: true, trim: true, cast_date: true }).map((dataset: any[]) => ({\n        date: dataset[0],\n        open: dataset[1],\n        high: dataset[2],\n        low: dataset[3],\n        close: dataset[4],\n        volume: dataset[5],\n      }));\n      res.shift();\n      return res;\n    });\n\n  return promiseMSFT;\n}\n\n// const Sub = (props: any) => {\n//   console.log(`Sub no ${props.id} rendered`);\n//   React.useLayoutEffect(() => {\n//     // console.log(`Sub no ${props.id} layout mounted`);\n//   }, []);\n//   React.useEffect(() => {\n//     console.log(`Sub no ${props.id} mounted`);\n//   }, []);\n//   // React.useEffect(() => {\n//   //   console.log(`Sub no ${props.id} loaded`);\n//   // })\n//   return (\n//     <div>\n//       {props.id}\n//       {props?.test?.toString()}\n//     </div>\n//   );\n// };\n// const Sub2 = (props: any) => {\n//   console.log(`Sub2 no ${props.id} rendered`);\n//   return (\n//     <div>\n//       {props.id} {!!props?.test?.is ? \"ja\" : \"nein\"}\n//       <Sub id={props.id * 10 + 1}></Sub>\n//     </div>\n//   );\n// };\n\n// const Main = (props: any) => {\n//   const [TestState, setTestState] = React.useState({ one: false, two: false, three: { is: false } });\n//   console.log(\"main rendered\");\n//   React.useLayoutEffect(() => {\n//     // console.log(`main layout mounted`);\n//   }, []);\n//   React.useEffect(() => {\n//     console.log(`main mounted`);\n//     // setTestState(current => { return ({...current, one: true}) })\n//   }, []);\n//   props.a.b = 2;\n//   // props.c = 3;\n//   console.log(props);\n//   return (\n//     <div>\n//       <Sub id={1} test={TestState.one}>\n//         <Sub id={11} />\n//       </Sub>\n//       <Sub id={2}>\n//         <Sub id={21} />\n//       </Sub>\n//       <Sub2 id={4} test={TestState.three}></Sub2>\n//       <button onClick={() => setTestState((current) => ({ ...current, three: { is: !current.three.is } }))}>\n//         SET IT\n//       </button>\n//     </div>\n//   );\n// };\n\nfunction App() {\n  const [Data, setData] = React.useState<any>(null);\n  const [DarkMode, setDarkMode] = React.useState(true);\n  const ContainerRef = React.useRef<HTMLDivElement>(null);\n  const [W, setW] = React.useState(400);\n\n  console.log(ContainerRef);\n  const viewMode = \"responsive\";\n\n  // const [ChartState, ChartStateDispatch] = useChartState(ContainerRef, { viewMode });\n\n  React.useEffect(() => {\n    // parse()\n    getData().then((res) => setData(res));\n  }, []);\n\n  if (!Data) return null;\n  console.log(\"DATA:\", [{ data: Data, name: \"coolChart\" }]);\n\n  return (\n    <React.Fragment>\n      {/* <div style={{ position: \"relative\", top: 0, height: \"100%\" }}>\n        <CChart chartData={[{ data: Data, name: \"coolChart\" }]} viewMode=\"fullscreen\" style=\"TODO\" />\n      </div> */}\n      <ThemeProvider theme={DarkMode ? muiDarkTheme : muiTheme}>\n        <Site setDarkMode={setDarkMode}>\n          <div style={{ height: \"100%\" }}>\n            <CChart\n              // ref={ContainerRef}\n              chartData={[{ data: Data, name: \"coolChart\" }]}\n              viewMode={viewMode}\n              disableTheme\n              // darkMode={false}\n              style={{\n                darkMode: DarkMode,\n                // backgroundColor: \"#fff\",\n                // border: \"transparent\",\n                // border: \"#333\",\n                grid: { useGridX: false, useGridY: false },\n                // xaxis: { style: { strokeColor: \"#bbb\", fontColor: \"#fff\" } },\n                // yaxis: {style: {strokeColor: \"#fff\", fontColor: \"#fff\"}}\n              }}\n              // ChartState={ChartState}\n              // ChartStateDispatch={ChartStateDispatch}\n            />\n          </div>\n        </Site>\n      </ThemeProvider>\n      {/* <button style={{position: \"fixed\", top: 100}} onClick={() => {\n        console.log(\"YA\")\n        setW(800)\n      }}>AAAAAAAAAAAAAa</button> */}\n    </React.Fragment>\n    // <Main a={{ b: 1 }} c={0} />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}